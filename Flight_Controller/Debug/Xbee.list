
Xbee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800fb58  0800fb58  00010b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801025c  0801025c  000121dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801025c  0801025c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010264  08010264  000121dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010264  08010264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010268  08010268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801026c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  200001dc  08010448  000121dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08010448  00012928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f84  00000000  00000000  0001220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003622  00000000  00000000  00029190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0002c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a6  00000000  00000000  0002de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9e3  00000000  00000000  0002efee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a859  00000000  00000000  0004b9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acae7  00000000  00000000  0006622a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112d11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b04  00000000  00000000  00112d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0011a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fb40 	.word	0x0800fb40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800fb40 	.word	0x0800fb40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9eb 	b.w	8001090 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a0 	b.w	8001090 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	460c      	mov	r4, r1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d14e      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de0:	4694      	mov	ip, r2
 8000de2:	458c      	cmp	ip, r1
 8000de4:	4686      	mov	lr, r0
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	d962      	bls.n	8000eb2 <__udivmoddi4+0xde>
 8000dec:	b14a      	cbz	r2, 8000e02 <__udivmoddi4+0x2e>
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	4091      	lsls	r1, r2
 8000df4:	fa20 f303 	lsr.w	r3, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	4319      	orrs	r1, r3
 8000dfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f f68c 	uxth.w	r6, ip
 8000e0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb07 1114 	mls	r1, r7, r4, r1
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb04 f106 	mul.w	r1, r4, r6
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e2a:	f080 8112 	bcs.w	8001052 <__udivmoddi4+0x27e>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 810f 	bls.w	8001052 <__udivmoddi4+0x27e>
 8000e34:	3c02      	subs	r4, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a59      	subs	r1, r3, r1
 8000e3a:	fa1f f38e 	uxth.w	r3, lr
 8000e3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e42:	fb07 1110 	mls	r1, r7, r0, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f606 	mul.w	r6, r0, r6
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x94>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e5a:	f080 80fc 	bcs.w	8001056 <__udivmoddi4+0x282>
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	f240 80f9 	bls.w	8001056 <__udivmoddi4+0x282>
 8000e64:	4463      	add	r3, ip
 8000e66:	3802      	subs	r0, #2
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e6e:	2100      	movs	r1, #0
 8000e70:	b11d      	cbz	r5, 8000e7a <__udivmoddi4+0xa6>
 8000e72:	40d3      	lsrs	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	e9c5 3200 	strd	r3, r2, [r5]
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d905      	bls.n	8000e8e <__udivmoddi4+0xba>
 8000e82:	b10d      	cbz	r5, 8000e88 <__udivmoddi4+0xb4>
 8000e84:	e9c5 0100 	strd	r0, r1, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e7f5      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000e8e:	fab3 f183 	clz	r1, r3
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d146      	bne.n	8000f24 <__udivmoddi4+0x150>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d302      	bcc.n	8000ea0 <__udivmoddi4+0xcc>
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	f0c0 80f0 	bcc.w	8001080 <__udivmoddi4+0x2ac>
 8000ea0:	1a86      	subs	r6, r0, r2
 8000ea2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	2d00      	cmp	r5, #0
 8000eaa:	d0e6      	beq.n	8000e7a <__udivmoddi4+0xa6>
 8000eac:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb0:	e7e3      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	f040 8090 	bne.w	8000fd8 <__udivmoddi4+0x204>
 8000eb8:	eba1 040c 	sub.w	r4, r1, ip
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	fa1f f78c 	uxth.w	r7, ip
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ece:	fb08 4416 	mls	r4, r8, r6, r4
 8000ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed6:	fb07 f006 	mul.w	r0, r7, r6
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x11c>
 8000ede:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x11a>
 8000ee8:	4298      	cmp	r0, r3
 8000eea:	f200 80cd 	bhi.w	8001088 <__udivmoddi4+0x2b4>
 8000eee:	4626      	mov	r6, r4
 8000ef0:	1a1c      	subs	r4, r3, r0
 8000ef2:	fa1f f38e 	uxth.w	r3, lr
 8000ef6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000efa:	fb08 4410 	mls	r4, r8, r0, r4
 8000efe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f02:	fb00 f707 	mul.w	r7, r0, r7
 8000f06:	429f      	cmp	r7, r3
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x148>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f12:	d202      	bcs.n	8000f1a <__udivmoddi4+0x146>
 8000f14:	429f      	cmp	r7, r3
 8000f16:	f200 80b0 	bhi.w	800107a <__udivmoddi4+0x2a6>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	1bdb      	subs	r3, r3, r7
 8000f1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f22:	e7a5      	b.n	8000e70 <__udivmoddi4+0x9c>
 8000f24:	f1c1 0620 	rsb	r6, r1, #32
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f34:	fa04 f301 	lsl.w	r3, r4, r1
 8000f38:	ea43 030c 	orr.w	r3, r3, ip
 8000f3c:	40f4      	lsrs	r4, r6
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	0c38      	lsrs	r0, r7, #16
 8000f44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f48:	fbb4 fef0 	udiv	lr, r4, r0
 8000f4c:	fa1f fc87 	uxth.w	ip, r7
 8000f50:	fb00 441e 	mls	r4, r0, lr, r4
 8000f54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f58:	fb0e f90c 	mul.w	r9, lr, ip
 8000f5c:	45a1      	cmp	r9, r4
 8000f5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x1a6>
 8000f64:	193c      	adds	r4, r7, r4
 8000f66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f6a:	f080 8084 	bcs.w	8001076 <__udivmoddi4+0x2a2>
 8000f6e:	45a1      	cmp	r9, r4
 8000f70:	f240 8081 	bls.w	8001076 <__udivmoddi4+0x2a2>
 8000f74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	eba4 0409 	sub.w	r4, r4, r9
 8000f7e:	fa1f f983 	uxth.w	r9, r3
 8000f82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f86:	fb00 4413 	mls	r4, r0, r3, r4
 8000f8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f92:	45a4      	cmp	ip, r4
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x1d2>
 8000f96:	193c      	adds	r4, r7, r4
 8000f98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f9c:	d267      	bcs.n	800106e <__udivmoddi4+0x29a>
 8000f9e:	45a4      	cmp	ip, r4
 8000fa0:	d965      	bls.n	800106e <__udivmoddi4+0x29a>
 8000fa2:	3b02      	subs	r3, #2
 8000fa4:	443c      	add	r4, r7
 8000fa6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000faa:	fba0 9302 	umull	r9, r3, r0, r2
 8000fae:	eba4 040c 	sub.w	r4, r4, ip
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	46ce      	mov	lr, r9
 8000fb6:	469c      	mov	ip, r3
 8000fb8:	d351      	bcc.n	800105e <__udivmoddi4+0x28a>
 8000fba:	d04e      	beq.n	800105a <__udivmoddi4+0x286>
 8000fbc:	b155      	cbz	r5, 8000fd4 <__udivmoddi4+0x200>
 8000fbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000fc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fca:	40cb      	lsrs	r3, r1
 8000fcc:	431e      	orrs	r6, r3
 8000fce:	40cc      	lsrs	r4, r1
 8000fd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	e750      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000fd8:	f1c2 0320 	rsb	r3, r2, #32
 8000fdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	430c      	orrs	r4, r1
 8000fec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ff4:	fa1f f78c 	uxth.w	r7, ip
 8000ff8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ffc:	fb08 3110 	mls	r1, r8, r0, r3
 8001000:	0c23      	lsrs	r3, r4, #16
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f107 	mul.w	r1, r0, r7
 800100a:	4299      	cmp	r1, r3
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x24c>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 36ff 	add.w	r6, r0, #4294967295
 8001016:	d22c      	bcs.n	8001072 <__udivmoddi4+0x29e>
 8001018:	4299      	cmp	r1, r3
 800101a:	d92a      	bls.n	8001072 <__udivmoddi4+0x29e>
 800101c:	3802      	subs	r0, #2
 800101e:	4463      	add	r3, ip
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	b2a4      	uxth	r4, r4
 8001024:	fbb3 f1f8 	udiv	r1, r3, r8
 8001028:	fb08 3311 	mls	r3, r8, r1, r3
 800102c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001030:	fb01 f307 	mul.w	r3, r1, r7
 8001034:	42a3      	cmp	r3, r4
 8001036:	d908      	bls.n	800104a <__udivmoddi4+0x276>
 8001038:	eb1c 0404 	adds.w	r4, ip, r4
 800103c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001040:	d213      	bcs.n	800106a <__udivmoddi4+0x296>
 8001042:	42a3      	cmp	r3, r4
 8001044:	d911      	bls.n	800106a <__udivmoddi4+0x296>
 8001046:	3902      	subs	r1, #2
 8001048:	4464      	add	r4, ip
 800104a:	1ae4      	subs	r4, r4, r3
 800104c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001050:	e739      	b.n	8000ec6 <__udivmoddi4+0xf2>
 8001052:	4604      	mov	r4, r0
 8001054:	e6f0      	b.n	8000e38 <__udivmoddi4+0x64>
 8001056:	4608      	mov	r0, r1
 8001058:	e706      	b.n	8000e68 <__udivmoddi4+0x94>
 800105a:	45c8      	cmp	r8, r9
 800105c:	d2ae      	bcs.n	8000fbc <__udivmoddi4+0x1e8>
 800105e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001062:	eb63 0c07 	sbc.w	ip, r3, r7
 8001066:	3801      	subs	r0, #1
 8001068:	e7a8      	b.n	8000fbc <__udivmoddi4+0x1e8>
 800106a:	4631      	mov	r1, r6
 800106c:	e7ed      	b.n	800104a <__udivmoddi4+0x276>
 800106e:	4603      	mov	r3, r0
 8001070:	e799      	b.n	8000fa6 <__udivmoddi4+0x1d2>
 8001072:	4630      	mov	r0, r6
 8001074:	e7d4      	b.n	8001020 <__udivmoddi4+0x24c>
 8001076:	46d6      	mov	lr, sl
 8001078:	e77f      	b.n	8000f7a <__udivmoddi4+0x1a6>
 800107a:	4463      	add	r3, ip
 800107c:	3802      	subs	r0, #2
 800107e:	e74d      	b.n	8000f1c <__udivmoddi4+0x148>
 8001080:	4606      	mov	r6, r0
 8001082:	4623      	mov	r3, r4
 8001084:	4608      	mov	r0, r1
 8001086:	e70f      	b.n	8000ea8 <__udivmoddi4+0xd4>
 8001088:	3e02      	subs	r6, #2
 800108a:	4463      	add	r3, ip
 800108c:	e730      	b.n	8000ef0 <__udivmoddi4+0x11c>
 800108e:	bf00      	nop

08001090 <__aeabi_idiv0>:
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	@ 0x30
 8001098:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2319      	movs	r3, #25
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	463b      	mov	r3, r7
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	2288      	movs	r2, #136	@ 0x88
 80010ac:	21ec      	movs	r1, #236	@ 0xec
 80010ae:	4857      	ldr	r0, [pc, #348]	@ (800120c <TrimRead+0x178>)
 80010b0:	f005 fa42 	bl	8006538 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010b4:	463b      	mov	r3, r7
 80010b6:	3319      	adds	r3, #25
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	9202      	str	r2, [sp, #8]
 80010be:	2207      	movs	r2, #7
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	22e1      	movs	r2, #225	@ 0xe1
 80010c8:	21ec      	movs	r1, #236	@ 0xec
 80010ca:	4850      	ldr	r0, [pc, #320]	@ (800120c <TrimRead+0x178>)
 80010cc:	f005 fa34 	bl	8006538 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	783b      	ldrb	r3, [r7, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001210 <TrimRead+0x17c>)
 80010e2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <TrimRead+0x180>)
 80010f4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21a      	sxth	r2, r3
 8001104:	4b44      	ldr	r3, [pc, #272]	@ (8001218 <TrimRead+0x184>)
 8001106:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21a      	sxth	r2, r3
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b40      	ldr	r3, [pc, #256]	@ (800121c <TrimRead+0x188>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800111c:	7a7b      	ldrb	r3, [r7, #9]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <TrimRead+0x18c>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <TrimRead+0x190>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001140:	7b7b      	ldrb	r3, [r7, #13]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7b3b      	ldrb	r3, [r7, #12]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <TrimRead+0x194>)
 8001150:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	7bbb      	ldrb	r3, [r7, #14]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <TrimRead+0x198>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001164:	7c7b      	ldrb	r3, [r7, #17]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7c3b      	ldrb	r3, [r7, #16]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b2f      	ldr	r3, [pc, #188]	@ (8001230 <TrimRead+0x19c>)
 8001174:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001176:	7cfb      	ldrb	r3, [r7, #19]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7cbb      	ldrb	r3, [r7, #18]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <TrimRead+0x1a0>)
 8001186:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001188:	7d7b      	ldrb	r3, [r7, #21]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21a      	sxth	r2, r3
 800118e:	7d3b      	ldrb	r3, [r7, #20]
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <TrimRead+0x1a4>)
 8001198:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7dbb      	ldrb	r3, [r7, #22]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <TrimRead+0x1a8>)
 80011aa:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011ac:	7e3b      	ldrb	r3, [r7, #24]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <TrimRead+0x1ac>)
 80011b2:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011b4:	7ebb      	ldrb	r3, [r7, #26]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	7e7b      	ldrb	r3, [r7, #25]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <TrimRead+0x1b0>)
 80011c4:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011c6:	7efb      	ldrb	r3, [r7, #27]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <TrimRead+0x1b4>)
 80011cc:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011ce:	7f3b      	ldrb	r3, [r7, #28]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	7f7b      	ldrb	r3, [r7, #29]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <TrimRead+0x1b8>)
 80011e4:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011e6:	7fbb      	ldrb	r3, [r7, #30]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7f7b      	ldrb	r3, [r7, #29]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <TrimRead+0x1bc>)
 80011fa:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80011fc:	7ffb      	ldrb	r3, [r7, #31]
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <TrimRead+0x1c0>)
 8001202:	801a      	strh	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200003b4 	.word	0x200003b4
 8001210:	20000208 	.word	0x20000208
 8001214:	20000210 	.word	0x20000210
 8001218:	20000212 	.word	0x20000212
 800121c:	2000020a 	.word	0x2000020a
 8001220:	20000214 	.word	0x20000214
 8001224:	20000216 	.word	0x20000216
 8001228:	20000218 	.word	0x20000218
 800122c:	2000021a 	.word	0x2000021a
 8001230:	2000021c 	.word	0x2000021c
 8001234:	2000021e 	.word	0x2000021e
 8001238:	20000220 	.word	0x20000220
 800123c:	20000222 	.word	0x20000222
 8001240:	2000020c 	.word	0x2000020c
 8001244:	20000224 	.word	0x20000224
 8001248:	2000020e 	.word	0x2000020e
 800124c:	20000226 	.word	0x20000226
 8001250:	20000228 	.word	0x20000228
 8001254:	2000022a 	.word	0x2000022a

08001258 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af04      	add	r7, sp, #16
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4623      	mov	r3, r4
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	4603      	mov	r3, r0
 800126c:	71bb      	strb	r3, [r7, #6]
 800126e:	460b      	mov	r3, r1
 8001270:	717b      	strb	r3, [r7, #5]
 8001272:	4613      	mov	r3, r2
 8001274:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001276:	f7ff ff0d 	bl	8001094 <TrimRead>


	uint8_t datatowrite = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001282:	23b6      	movs	r3, #182	@ 0xb6
 8001284:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 030f 	add.w	r3, r7, #15
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	22e0      	movs	r2, #224	@ 0xe0
 800129a:	21ec      	movs	r1, #236	@ 0xec
 800129c:	4858      	ldr	r0, [pc, #352]	@ (8001400 <BME280_Config+0x1a8>)
 800129e:	f005 f851 	bl	8006344 <HAL_I2C_Mem_Write>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <BME280_Config+0x56>
	{
		return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	e0a3      	b.n	80013f6 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012ae:	2064      	movs	r0, #100	@ 0x64
 80012b0:	f003 fc3c 	bl	8004b2c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012b4:	797b      	ldrb	r3, [r7, #5]
 80012b6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	2301      	movs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	f107 030f 	add.w	r3, r7, #15
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	22f2      	movs	r2, #242	@ 0xf2
 80012cc:	21ec      	movs	r1, #236	@ 0xec
 80012ce:	484c      	ldr	r0, [pc, #304]	@ (8001400 <BME280_Config+0x1a8>)
 80012d0:	f005 f838 	bl	8006344 <HAL_I2C_Mem_Write>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <BME280_Config+0x88>
	{
		return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e08a      	b.n	80013f6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012e0:	2064      	movs	r0, #100	@ 0x64
 80012e2:	f003 fc23 	bl	8004b2c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	f107 030e 	add.w	r3, r7, #14
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	22f2      	movs	r2, #242	@ 0xf2
 80012fa:	21ec      	movs	r1, #236	@ 0xec
 80012fc:	4840      	ldr	r0, [pc, #256]	@ (8001400 <BME280_Config+0x1a8>)
 80012fe:	f005 f91b 	bl	8006538 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001302:	7bba      	ldrb	r2, [r7, #14]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	429a      	cmp	r2, r3
 8001308:	d002      	beq.n	8001310 <BME280_Config+0xb8>
	{
		return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e072      	b.n	80013f6 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	b25a      	sxtb	r2, r3
 8001318:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001328:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 030f 	add.w	r3, r7, #15
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	22f5      	movs	r2, #245	@ 0xf5
 800133c:	21ec      	movs	r1, #236	@ 0xec
 800133e:	4830      	ldr	r0, [pc, #192]	@ (8001400 <BME280_Config+0x1a8>)
 8001340:	f005 f800 	bl	8006344 <HAL_I2C_Mem_Write>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <BME280_Config+0xf8>
	{
		return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e052      	b.n	80013f6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001350:	2064      	movs	r0, #100	@ 0x64
 8001352:	f003 fbeb 	bl	8004b2c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f107 030e 	add.w	r3, r7, #14
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	22f5      	movs	r2, #245	@ 0xf5
 800136a:	21ec      	movs	r1, #236	@ 0xec
 800136c:	4824      	ldr	r0, [pc, #144]	@ (8001400 <BME280_Config+0x1a8>)
 800136e:	f005 f8e3 	bl	8006538 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001372:	7bba      	ldrb	r2, [r7, #14]
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	429a      	cmp	r2, r3
 8001378:	d002      	beq.n	8001380 <BME280_Config+0x128>
	{
		return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e03a      	b.n	80013f6 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	b25a      	sxtb	r2, r3
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	b25b      	sxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b25a      	sxtb	r2, r3
 8001390:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800139c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	22f4      	movs	r2, #244	@ 0xf4
 80013b0:	21ec      	movs	r1, #236	@ 0xec
 80013b2:	4813      	ldr	r0, [pc, #76]	@ (8001400 <BME280_Config+0x1a8>)
 80013b4:	f004 ffc6 	bl	8006344 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0x16c>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e018      	b.n	80013f6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	@ 0x64
 80013c6:	f003 fbb1 	bl	8004b2c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f4      	movs	r2, #244	@ 0xf4
 80013de:	21ec      	movs	r1, #236	@ 0xec
 80013e0:	4807      	ldr	r0, [pc, #28]	@ (8001400 <BME280_Config+0x1a8>)
 80013e2:	f005 f8a9 	bl	8006538 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <BME280_Config+0x19c>
	{
		return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e000      	b.n	80013f6 <BME280_Config+0x19e>
	}

	return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003b4 	.word	0x200003b4

08001404 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c3, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2301      	movs	r3, #1
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <BMEReadRaw+0x8c>)
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	22d0      	movs	r2, #208	@ 0xd0
 800141c:	21ec      	movs	r1, #236	@ 0xec
 800141e:	481d      	ldr	r0, [pc, #116]	@ (8001494 <BMEReadRaw+0x90>)
 8001420:	f005 f88a 	bl	8006538 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <BMEReadRaw+0x8c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b60      	cmp	r3, #96	@ 0x60
 800142a:	d12a      	bne.n	8001482 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	2308      	movs	r3, #8
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	463b      	mov	r3, r7
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	22f7      	movs	r2, #247	@ 0xf7
 800143e:	21ec      	movs	r1, #236	@ 0xec
 8001440:	4814      	ldr	r0, [pc, #80]	@ (8001494 <BMEReadRaw+0x90>)
 8001442:	f005 f879 	bl	8006538 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001446:	783b      	ldrb	r3, [r7, #0]
 8001448:	031a      	lsls	r2, r3, #12
 800144a:	787b      	ldrb	r3, [r7, #1]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4313      	orrs	r3, r2
 8001450:	78ba      	ldrb	r2, [r7, #2]
 8001452:	0912      	lsrs	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	4313      	orrs	r3, r2
 8001458:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <BMEReadRaw+0x94>)
 800145a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	031a      	lsls	r2, r3, #12
 8001460:	793b      	ldrb	r3, [r7, #4]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4313      	orrs	r3, r2
 8001466:	797a      	ldrb	r2, [r7, #5]
 8001468:	0912      	lsrs	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	4313      	orrs	r3, r2
 800146e:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <BMEReadRaw+0x98>)
 8001470:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	4313      	orrs	r3, r2
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <BMEReadRaw+0x9c>)
 800147c:	6013      	str	r3, [r2, #0]

		return 0;
 800147e:	2300      	movs	r3, #0
 8001480:	e001      	b.n	8001486 <BMEReadRaw+0x82>
	}

	else return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200001f8 	.word	0x200001f8
 8001494:	200003b4 	.word	0x200003b4
 8001498:	20000200 	.word	0x20000200
 800149c:	200001fc 	.word	0x200001fc
 80014a0:	20000204 	.word	0x20000204

080014a4 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	10da      	asrs	r2, r3, #3
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <BME280_compensate_T_int32+0x74>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a18      	ldr	r2, [pc, #96]	@ (800151c <BME280_compensate_T_int32+0x78>)
 80014ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	12db      	asrs	r3, r3, #11
 80014c4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	111b      	asrs	r3, r3, #4
 80014ca:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <BME280_compensate_T_int32+0x74>)
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	1112      	asrs	r2, r2, #4
 80014d4:	4910      	ldr	r1, [pc, #64]	@ (8001518 <BME280_compensate_T_int32+0x74>)
 80014d6:	8809      	ldrh	r1, [r1, #0]
 80014d8:	1a52      	subs	r2, r2, r1
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	131b      	asrs	r3, r3, #12
 80014e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <BME280_compensate_T_int32+0x7c>)
 80014e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	139b      	asrs	r3, r3, #14
 80014ec:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <BME280_compensate_T_int32+0x80>)
 80014f6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <BME280_compensate_T_int32+0x80>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3380      	adds	r3, #128	@ 0x80
 8001504:	121b      	asrs	r3, r3, #8
 8001506:	60fb      	str	r3, [r7, #12]
	return T;
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	4618      	mov	r0, r3
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000208 	.word	0x20000208
 800151c:	20000210 	.word	0x20000210
 8001520:	20000212 	.word	0x20000212
 8001524:	2000022c 	.word	0x2000022c

08001528 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800152c:	b0ca      	sub	sp, #296	@ 0x128
 800152e:	af00      	add	r7, sp, #0
 8001530:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001534:	4baf      	ldr	r3, [pc, #700]	@ (80017f4 <BME280_compensate_P_int64+0x2cc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	17da      	asrs	r2, r3, #31
 800153a:	461c      	mov	r4, r3
 800153c:	4615      	mov	r5, r2
 800153e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001542:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001546:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800154a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800154e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001552:	fb03 f102 	mul.w	r1, r3, r2
 8001556:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800155a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	18ca      	adds	r2, r1, r3
 8001564:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001568:	fba3 8903 	umull	r8, r9, r3, r3
 800156c:	eb02 0309 	add.w	r3, r2, r9
 8001570:	4699      	mov	r9, r3
 8001572:	4ba1      	ldr	r3, [pc, #644]	@ (80017f8 <BME280_compensate_P_int64+0x2d0>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	b21b      	sxth	r3, r3
 800157a:	17da      	asrs	r2, r3, #31
 800157c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001580:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001584:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001588:	4603      	mov	r3, r0
 800158a:	fb03 f209 	mul.w	r2, r3, r9
 800158e:	460b      	mov	r3, r1
 8001590:	fb08 f303 	mul.w	r3, r8, r3
 8001594:	4413      	add	r3, r2
 8001596:	4602      	mov	r2, r0
 8001598:	fba8 1202 	umull	r1, r2, r8, r2
 800159c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80015a0:	460a      	mov	r2, r1
 80015a2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80015a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80015aa:	4413      	add	r3, r2
 80015ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80015b0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80015b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80015b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015bc:	4b8f      	ldr	r3, [pc, #572]	@ (80017fc <BME280_compensate_P_int64+0x2d4>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	17da      	asrs	r2, r3, #31
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015ca:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015d2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015d6:	462a      	mov	r2, r5
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015e0:	4621      	mov	r1, r4
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	441a      	add	r2, r3
 80015e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015ec:	4621      	mov	r1, r4
 80015ee:	fba3 1301 	umull	r1, r3, r3, r1
 80015f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015f6:	460b      	mov	r3, r1
 80015f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001606:	f04f 0000 	mov.w	r0, #0
 800160a:	f04f 0100 	mov.w	r1, #0
 800160e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001612:	462b      	mov	r3, r5
 8001614:	0459      	lsls	r1, r3, #17
 8001616:	4623      	mov	r3, r4
 8001618:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800161c:	4623      	mov	r3, r4
 800161e:	0458      	lsls	r0, r3, #17
 8001620:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001624:	1814      	adds	r4, r2, r0
 8001626:	643c      	str	r4, [r7, #64]	@ 0x40
 8001628:	414b      	adcs	r3, r1
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
 800162c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001630:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001634:	4b72      	ldr	r3, [pc, #456]	@ (8001800 <BME280_compensate_P_int64+0x2d8>)
 8001636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163a:	b21b      	sxth	r3, r3
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001642:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001652:	00d9      	lsls	r1, r3, #3
 8001654:	2000      	movs	r0, #0
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800165e:	414b      	adcs	r3, r1
 8001660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001662:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800166a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800166e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001672:	fb03 f102 	mul.w	r1, r3, r2
 8001676:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800167a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	18ca      	adds	r2, r1, r3
 8001684:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001688:	fba3 1303 	umull	r1, r3, r3, r3
 800168c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001690:	460b      	mov	r3, r1
 8001692:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800169a:	18d3      	adds	r3, r2, r3
 800169c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80016a0:	4b58      	ldr	r3, [pc, #352]	@ (8001804 <BME280_compensate_P_int64+0x2dc>)
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	17da      	asrs	r2, r3, #31
 80016aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80016ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80016b2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80016b6:	462b      	mov	r3, r5
 80016b8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80016bc:	4642      	mov	r2, r8
 80016be:	fb02 f203 	mul.w	r2, r2, r3
 80016c2:	464b      	mov	r3, r9
 80016c4:	4621      	mov	r1, r4
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	4622      	mov	r2, r4
 80016ce:	4641      	mov	r1, r8
 80016d0:	fba2 1201 	umull	r1, r2, r2, r1
 80016d4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80016d8:	460a      	mov	r2, r1
 80016da:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80016de:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016e2:	4413      	add	r3, r2
 80016e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016e8:	f04f 0000 	mov.w	r0, #0
 80016ec:	f04f 0100 	mov.w	r1, #0
 80016f0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016f4:	4623      	mov	r3, r4
 80016f6:	0a18      	lsrs	r0, r3, #8
 80016f8:	462b      	mov	r3, r5
 80016fa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016fe:	462b      	mov	r3, r5
 8001700:	1219      	asrs	r1, r3, #8
 8001702:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <BME280_compensate_P_int64+0x2e0>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	b21b      	sxth	r3, r3
 800170a:	17da      	asrs	r2, r3, #31
 800170c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001710:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001714:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001718:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800171c:	464a      	mov	r2, r9
 800171e:	fb02 f203 	mul.w	r2, r2, r3
 8001722:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001726:	4644      	mov	r4, r8
 8001728:	fb04 f303 	mul.w	r3, r4, r3
 800172c:	441a      	add	r2, r3
 800172e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001732:	4644      	mov	r4, r8
 8001734:	fba3 4304 	umull	r4, r3, r3, r4
 8001738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800173c:	4623      	mov	r3, r4
 800173e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001758:	464c      	mov	r4, r9
 800175a:	0323      	lsls	r3, r4, #12
 800175c:	4644      	mov	r4, r8
 800175e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001762:	4644      	mov	r4, r8
 8001764:	0322      	lsls	r2, r4, #12
 8001766:	1884      	adds	r4, r0, r2
 8001768:	633c      	str	r4, [r7, #48]	@ 0x30
 800176a:	eb41 0303 	adc.w	r3, r1, r3
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001770:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001774:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001778:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800177c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001780:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001784:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001788:	4b20      	ldr	r3, [pc, #128]	@ (800180c <BME280_compensate_P_int64+0x2e4>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	2200      	movs	r2, #0
 8001790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001794:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001798:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800179c:	462b      	mov	r3, r5
 800179e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80017a2:	4642      	mov	r2, r8
 80017a4:	fb02 f203 	mul.w	r2, r2, r3
 80017a8:	464b      	mov	r3, r9
 80017aa:	4621      	mov	r1, r4
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	4622      	mov	r2, r4
 80017b4:	4641      	mov	r1, r8
 80017b6:	fba2 1201 	umull	r1, r2, r2, r1
 80017ba:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80017be:	460a      	mov	r2, r1
 80017c0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80017c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80017c8:	4413      	add	r3, r2
 80017ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80017da:	4629      	mov	r1, r5
 80017dc:	104a      	asrs	r2, r1, #1
 80017de:	4629      	mov	r1, r5
 80017e0:	17cb      	asrs	r3, r1, #31
 80017e2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80017e6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017ea:	4313      	orrs	r3, r2
 80017ec:	d110      	bne.n	8001810 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80017ee:	2300      	movs	r3, #0
 80017f0:	e154      	b.n	8001a9c <BME280_compensate_P_int64+0x574>
 80017f2:	bf00      	nop
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	2000021c 	.word	0x2000021c
 80017fc:	2000021a 	.word	0x2000021a
 8001800:	20000218 	.word	0x20000218
 8001804:	20000216 	.word	0x20000216
 8001808:	20000214 	.word	0x20000214
 800180c:	2000020a 	.word	0x2000020a
	}
	p = 1048576-adc_P;
 8001810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001814:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001818:	17da      	asrs	r2, r3, #31
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800181c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800181e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001822:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001826:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800182a:	105b      	asrs	r3, r3, #1
 800182c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001830:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001834:	07db      	lsls	r3, r3, #31
 8001836:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800183a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800183e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001842:	4621      	mov	r1, r4
 8001844:	1a89      	subs	r1, r1, r2
 8001846:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001848:	4629      	mov	r1, r5
 800184a:	eb61 0303 	sbc.w	r3, r1, r3
 800184e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001850:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001854:	4622      	mov	r2, r4
 8001856:	462b      	mov	r3, r5
 8001858:	1891      	adds	r1, r2, r2
 800185a:	6239      	str	r1, [r7, #32]
 800185c:	415b      	adcs	r3, r3
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001860:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001864:	4621      	mov	r1, r4
 8001866:	1851      	adds	r1, r2, r1
 8001868:	61b9      	str	r1, [r7, #24]
 800186a:	4629      	mov	r1, r5
 800186c:	414b      	adcs	r3, r1
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800187c:	4649      	mov	r1, r9
 800187e:	018b      	lsls	r3, r1, #6
 8001880:	4641      	mov	r1, r8
 8001882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001886:	4641      	mov	r1, r8
 8001888:	018a      	lsls	r2, r1, #6
 800188a:	4641      	mov	r1, r8
 800188c:	1889      	adds	r1, r1, r2
 800188e:	6139      	str	r1, [r7, #16]
 8001890:	4649      	mov	r1, r9
 8001892:	eb43 0101 	adc.w	r1, r3, r1
 8001896:	6179      	str	r1, [r7, #20]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018a4:	4649      	mov	r1, r9
 80018a6:	008b      	lsls	r3, r1, #2
 80018a8:	4641      	mov	r1, r8
 80018aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ae:	4641      	mov	r1, r8
 80018b0:	008a      	lsls	r2, r1, #2
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	4622      	mov	r2, r4
 80018ba:	189b      	adds	r3, r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	460b      	mov	r3, r1
 80018c0:	462a      	mov	r2, r5
 80018c2:	eb42 0303 	adc.w	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018d4:	4649      	mov	r1, r9
 80018d6:	008b      	lsls	r3, r1, #2
 80018d8:	4641      	mov	r1, r8
 80018da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018de:	4641      	mov	r1, r8
 80018e0:	008a      	lsls	r2, r1, #2
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	4622      	mov	r2, r4
 80018ea:	189b      	adds	r3, r3, r2
 80018ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80018ee:	462b      	mov	r3, r5
 80018f0:	460a      	mov	r2, r1
 80018f2:	eb42 0303 	adc.w	r3, r2, r3
 80018f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80018f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018fc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001900:	f7ff f9ca 	bl	8000c98 <__aeabi_ldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800190c:	4b66      	ldr	r3, [pc, #408]	@ (8001aa8 <BME280_compensate_P_int64+0x580>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	b21b      	sxth	r3, r3
 8001914:	17da      	asrs	r2, r3, #31
 8001916:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001918:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800191a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800191e:	f04f 0000 	mov.w	r0, #0
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	0b50      	lsrs	r0, r2, #13
 8001928:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800192c:	1359      	asrs	r1, r3, #13
 800192e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001932:	462b      	mov	r3, r5
 8001934:	fb00 f203 	mul.w	r2, r0, r3
 8001938:	4623      	mov	r3, r4
 800193a:	fb03 f301 	mul.w	r3, r3, r1
 800193e:	4413      	add	r3, r2
 8001940:	4622      	mov	r2, r4
 8001942:	fba2 1200 	umull	r1, r2, r2, r0
 8001946:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800194a:	460a      	mov	r2, r1
 800194c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001950:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001954:	4413      	add	r3, r2
 8001956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800195a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0b50      	lsrs	r0, r2, #13
 8001968:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800196c:	1359      	asrs	r1, r3, #13
 800196e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001972:	462b      	mov	r3, r5
 8001974:	fb00 f203 	mul.w	r2, r0, r3
 8001978:	4623      	mov	r3, r4
 800197a:	fb03 f301 	mul.w	r3, r3, r1
 800197e:	4413      	add	r3, r2
 8001980:	4622      	mov	r2, r4
 8001982:	fba2 1200 	umull	r1, r2, r2, r0
 8001986:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800198a:	460a      	mov	r2, r1
 800198c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001990:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001994:	4413      	add	r3, r2
 8001996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80019a6:	4621      	mov	r1, r4
 80019a8:	0e4a      	lsrs	r2, r1, #25
 80019aa:	4629      	mov	r1, r5
 80019ac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019b0:	4629      	mov	r1, r5
 80019b2:	164b      	asrs	r3, r1, #25
 80019b4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019b8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <BME280_compensate_P_int64+0x584>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	17da      	asrs	r2, r3, #31
 80019c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80019c4:	667a      	str	r2, [r7, #100]	@ 0x64
 80019c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019ce:	462a      	mov	r2, r5
 80019d0:	fb02 f203 	mul.w	r2, r2, r3
 80019d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019d8:	4621      	mov	r1, r4
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80019e4:	4621      	mov	r1, r4
 80019e6:	fba2 1201 	umull	r1, r2, r2, r1
 80019ea:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019ee:	460a      	mov	r2, r1
 80019f0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019f8:	4413      	add	r3, r2
 80019fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	0cca      	lsrs	r2, r1, #19
 8001a0e:	4629      	mov	r1, r5
 8001a10:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a14:	4629      	mov	r1, r5
 8001a16:	14cb      	asrs	r3, r1, #19
 8001a18:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a1c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a20:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a24:	1884      	adds	r4, r0, r2
 8001a26:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001a28:	eb41 0303 	adc.w	r3, r1, r3
 8001a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a32:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a36:	4621      	mov	r1, r4
 8001a38:	1889      	adds	r1, r1, r2
 8001a3a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	eb43 0101 	adc.w	r1, r3, r1
 8001a42:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a50:	4623      	mov	r3, r4
 8001a52:	0a18      	lsrs	r0, r3, #8
 8001a54:	462b      	mov	r3, r5
 8001a56:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	1219      	asrs	r1, r3, #8
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <BME280_compensate_P_int64+0x588>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	17da      	asrs	r2, r3, #31
 8001a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a78:	464c      	mov	r4, r9
 8001a7a:	0123      	lsls	r3, r4, #4
 8001a7c:	4644      	mov	r4, r8
 8001a7e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a82:	4644      	mov	r4, r8
 8001a84:	0122      	lsls	r2, r4, #4
 8001a86:	1884      	adds	r4, r0, r2
 8001a88:	603c      	str	r4, [r7, #0]
 8001a8a:	eb41 0303 	adc.w	r3, r1, r3
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a94:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001a98:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa8:	20000222 	.word	0x20000222
 8001aac:	20000220 	.word	0x20000220
 8001ab0:	2000021e 	.word	0x2000021e

08001ab4 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001abc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b70 <bme280_compensate_H_int32+0xbc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001ac4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	039a      	lsls	r2, r3, #14
 8001aca:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <bme280_compensate_H_int32+0xc0>)
 8001acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad0:	051b      	lsls	r3, r3, #20
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <bme280_compensate_H_int32+0xc4>)
 8001ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ada:	4619      	mov	r1, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ae4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001ae8:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001aea:	4a24      	ldr	r2, [pc, #144]	@ (8001b7c <bme280_compensate_H_int32+0xc8>)
 8001aec:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001af0:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001af8:	1292      	asrs	r2, r2, #10
 8001afa:	4921      	ldr	r1, [pc, #132]	@ (8001b80 <bme280_compensate_H_int32+0xcc>)
 8001afc:	8809      	ldrh	r1, [r1, #0]
 8001afe:	4608      	mov	r0, r1
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	fb00 f101 	mul.w	r1, r0, r1
 8001b06:	12c9      	asrs	r1, r1, #11
 8001b08:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001b0c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b10:	1292      	asrs	r2, r2, #10
 8001b12:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001b16:	491b      	ldr	r1, [pc, #108]	@ (8001b84 <bme280_compensate_H_int32+0xd0>)
 8001b18:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b1c:	fb01 f202 	mul.w	r2, r1, r2
 8001b20:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001b24:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	13db      	asrs	r3, r3, #15
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	13d2      	asrs	r2, r2, #15
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b3a:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <bme280_compensate_H_int32+0xd4>)
 8001b3c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b42:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b50:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001b58:	bfa8      	it	ge
 8001b5a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b5e:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	131b      	asrs	r3, r3, #12
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	2000022c 	.word	0x2000022c
 8001b74:	20000226 	.word	0x20000226
 8001b78:	20000228 	.word	0x20000228
 8001b7c:	2000022a 	.word	0x2000022a
 8001b80:	2000020e 	.word	0x2000020e
 8001b84:	20000224 	.word	0x20000224
 8001b88:	2000020c 	.word	0x2000020c

08001b8c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b90:	f7ff fc38 	bl	8001404 <BMEReadRaw>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d17d      	bne.n	8001c96 <BME280_Measure+0x10a>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b9a:	4b48      	ldr	r3, [pc, #288]	@ (8001cbc <BME280_Measure+0x130>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ba2:	d104      	bne.n	8001bae <BME280_Measure+0x22>
 8001ba4:	4b46      	ldr	r3, [pc, #280]	@ (8001cc0 <BME280_Measure+0x134>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e016      	b.n	8001bdc <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bae:	4b43      	ldr	r3, [pc, #268]	@ (8001cbc <BME280_Measure+0x130>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fc76 	bl	80014a4 <BME280_compensate_T_int32>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcba 	bl	8000534 <__aeabi_i2d>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc4 <BME280_Measure+0x138>)
 8001bc6:	f7fe fe49 	bl	800085c <__aeabi_ddiv>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f811 	bl	8000bf8 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a39      	ldr	r2, [pc, #228]	@ (8001cc0 <BME280_Measure+0x134>)
 8001bda:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc8 <BME280_Measure+0x13c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001be4:	d104      	bne.n	8001bf0 <BME280_Measure+0x64>
 8001be6:	4b39      	ldr	r3, [pc, #228]	@ (8001ccc <BME280_Measure+0x140>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e030      	b.n	8001c52 <BME280_Measure+0xc6>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001bf0:	4b35      	ldr	r3, [pc, #212]	@ (8001cc8 <BME280_Measure+0x13c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fc97 	bl	8001528 <BME280_compensate_P_int64>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc89 	bl	8000514 <__aeabi_ui2d>
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <BME280_Measure+0x144>)
 8001c08:	f7fe fe28 	bl	800085c <__aeabi_ddiv>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe fff0 	bl	8000bf8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ccc <BME280_Measure+0x140>)
 8001c1c:	6013      	str	r3, [r2, #0]
			  alt= 44330.0f*(1-powf(Pressure/101325.0f,1.0f/5.255f));
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <BME280_Measure+0x140>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001cd4 <BME280_Measure+0x148>
 8001c28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c2c:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8001cd8 <BME280_Measure+0x14c>
 8001c30:	eeb0 0a47 	vmov.f32	s0, s14
 8001c34:	f00d fbba 	bl	800f3ac <powf>
 8001c38:	eef0 7a40 	vmov.f32	s15, s0
 8001c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001cdc <BME280_Measure+0x150>
 8001c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <BME280_Measure+0x154>)
 8001c4e:	edc3 7a00 	vstr	s15, [r3]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
			  alt= 44330.0f*(1-powf(Pressure/101325.0f,1.0f/5.255f));
#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <BME280_Measure+0x158>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c5a:	d104      	bne.n	8001c66 <BME280_Measure+0xda>
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <BME280_Measure+0x15c>)
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = alt = 0;
	}
}
 8001c64:	e027      	b.n	8001cb6 <BME280_Measure+0x12a>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <BME280_Measure+0x158>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff22 	bl	8001ab4 <bme280_compensate_H_int32>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc4e 	bl	8000514 <__aeabi_ui2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <BME280_Measure+0x160>)
 8001c7e:	f7fe fded 	bl	800085c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffb5 	bl	8000bf8 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <BME280_Measure+0x15c>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	e00f      	b.n	8001cb6 <BME280_Measure+0x12a>
		Temperature = Pressure = Humidity = alt = 0;
 8001c96:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <BME280_Measure+0x154>)
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <BME280_Measure+0x154>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <BME280_Measure+0x15c>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <BME280_Measure+0x15c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a08      	ldr	r2, [pc, #32]	@ (8001ccc <BME280_Measure+0x140>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <BME280_Measure+0x140>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a03      	ldr	r2, [pc, #12]	@ (8001cc0 <BME280_Measure+0x134>)
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001fc 	.word	0x200001fc
 8001cc0:	20000570 	.word	0x20000570
 8001cc4:	40590000 	.word	0x40590000
 8001cc8:	20000200 	.word	0x20000200
 8001ccc:	20000574 	.word	0x20000574
 8001cd0:	40700000 	.word	0x40700000
 8001cd4:	47c5e680 	.word	0x47c5e680
 8001cd8:	3e42dcae 	.word	0x3e42dcae
 8001cdc:	472d2a00 	.word	0x472d2a00
 8001ce0:	2000057c 	.word	0x2000057c
 8001ce4:	20000204 	.word	0x20000204
 8001ce8:	20000578 	.word	0x20000578
 8001cec:	40900000 	.word	0x40900000

08001cf0 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4903      	ldr	r1, [pc, #12]	@ (8001d04 <GPS_Init+0x14>)
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <GPS_Init+0x18>)
 8001cfa:	f006 fb78 	bl	80083ee <HAL_UART_Receive_IT>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000230 	.word	0x20000230
 8001d08:	20000494 	.word	0x20000494

08001d0c <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <GPS_UART_CallBack+0x54>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b0a      	cmp	r3, #10
 8001d16:	d010      	beq.n	8001d3a <GPS_UART_CallBack+0x2e>
 8001d18:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <GPS_UART_CallBack+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <GPS_UART_CallBack+0x58>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	b2d1      	uxtb	r1, r2
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <GPS_UART_CallBack+0x58>)
 8001d2c:	7011      	strb	r1, [r2, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <GPS_UART_CallBack+0x54>)
 8001d32:	7819      	ldrb	r1, [r3, #0]
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <GPS_UART_CallBack+0x5c>)
 8001d36:	5499      	strb	r1, [r3, r2]
 8001d38:	e00a      	b.n	8001d50 <GPS_UART_CallBack+0x44>
		GPS_print((char*)rx_b uffer);
		#endif

		//if(GPS_validate((char*) rx_buffer))
		//printf("%s\r\n",(char*) rx_buffer); // need to edit it
		GPS_parse((char*) rx_buffer);
 8001d3a:	480b      	ldr	r0, [pc, #44]	@ (8001d68 <GPS_UART_CallBack+0x5c>)
 8001d3c:	f000 f818 	bl	8001d70 <GPS_parse>
		rx_index = 0;
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <GPS_UART_CallBack+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <GPS_UART_CallBack+0x5c>)
 8001d4c:	f009 fb79 	bl	800b442 <memset>
	}
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001d50:	2201      	movs	r2, #1
 8001d52:	4903      	ldr	r1, [pc, #12]	@ (8001d60 <GPS_UART_CallBack+0x54>)
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <GPS_UART_CallBack+0x60>)
 8001d56:	f006 fb4a 	bl	80083ee <HAL_UART_Receive_IT>
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000230 	.word	0x20000230
 8001d64:	200002b4 	.word	0x200002b4
 8001d68:	20000234 	.word	0x20000234
 8001d6c:	20000494 	.word	0x20000494

08001d70 <GPS_parse>:
    sprintf(checkcalcstr,"%02X",calculated_check);
    return((checkcalcstr[0] == check[0])
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
}

void GPS_parse(char *GPSstrParse){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af08      	add	r7, sp, #32
 8001d76:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001d78:	2206      	movs	r2, #6
 8001d7a:	494a      	ldr	r1, [pc, #296]	@ (8001ea4 <GPS_parse+0x134>)
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f009 fb68 	bl	800b452 <strncmp>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d137      	bne.n	8001df8 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001d88:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <GPS_parse+0x138>)
 8001d8a:	9307      	str	r3, [sp, #28]
 8001d8c:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <GPS_parse+0x13c>)
 8001d8e:	9306      	str	r3, [sp, #24]
 8001d90:	4b47      	ldr	r3, [pc, #284]	@ (8001eb0 <GPS_parse+0x140>)
 8001d92:	9305      	str	r3, [sp, #20]
 8001d94:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <GPS_parse+0x144>)
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <GPS_parse+0x148>)
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <GPS_parse+0x14c>)
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	4b47      	ldr	r3, [pc, #284]	@ (8001ec0 <GPS_parse+0x150>)
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	4b47      	ldr	r3, [pc, #284]	@ (8001ec4 <GPS_parse+0x154>)
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <GPS_parse+0x158>)
 8001daa:	4a48      	ldr	r2, [pc, #288]	@ (8001ecc <GPS_parse+0x15c>)
 8001dac:	4948      	ldr	r1, [pc, #288]	@ (8001ed0 <GPS_parse+0x160>)
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f009 fad8 	bl	800b364 <siscanf>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	dd70      	ble.n	8001e9c <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001dba:	4b46      	ldr	r3, [pc, #280]	@ (8001ed4 <GPS_parse+0x164>)
 8001dbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dc0:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <GPS_parse+0x164>)
 8001dc2:	7e1b      	ldrb	r3, [r3, #24]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	f000 f8a7 	bl	8001f1c <GPS_nmea_to_dec>
 8001dce:	eef0 7a40 	vmov.f32	s15, s0
 8001dd2:	4b40      	ldr	r3, [pc, #256]	@ (8001ed4 <GPS_parse+0x164>)
 8001dd4:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed4 <GPS_parse+0x164>)
 8001dda:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <GPS_parse+0x164>)
 8001de0:	7e5b      	ldrb	r3, [r3, #25]
 8001de2:	4618      	mov	r0, r3
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	f000 f898 	bl	8001f1c <GPS_nmea_to_dec>
 8001dec:	eef0 7a40 	vmov.f32	s15, s0
 8001df0:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <GPS_parse+0x164>)
 8001df2:	edc3 7a00 	vstr	s15, [r3]
    		return;
 8001df6:	e051      	b.n	8001e9c <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001df8:	2206      	movs	r2, #6
 8001dfa:	4937      	ldr	r1, [pc, #220]	@ (8001ed8 <GPS_parse+0x168>)
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f009 fb28 	bl	800b452 <strncmp>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d114      	bne.n	8001e32 <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001e08:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <GPS_parse+0x16c>)
 8001e0a:	9305      	str	r3, [sp, #20]
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <GPS_parse+0x170>)
 8001e0e:	9304      	str	r3, [sp, #16]
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <GPS_parse+0x174>)
 8001e12:	9303      	str	r3, [sp, #12]
 8001e14:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <GPS_parse+0x14c>)
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	4b29      	ldr	r3, [pc, #164]	@ (8001ec0 <GPS_parse+0x150>)
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <GPS_parse+0x154>)
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <GPS_parse+0x158>)
 8001e22:	4a2a      	ldr	r2, [pc, #168]	@ (8001ecc <GPS_parse+0x15c>)
 8001e24:	4930      	ldr	r1, [pc, #192]	@ (8001ee8 <GPS_parse+0x178>)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f009 fa9c 	bl	800b364 <siscanf>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	e034      	b.n	8001e9c <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001e32:	2206      	movs	r2, #6
 8001e34:	492d      	ldr	r1, [pc, #180]	@ (8001eec <GPS_parse+0x17c>)
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f009 fb0b 	bl	800b452 <strncmp>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d110      	bne.n	8001e64 <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001e42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <GPS_parse+0x180>)
 8001e44:	9303      	str	r3, [sp, #12]
 8001e46:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <GPS_parse+0x15c>)
 8001e48:	9302      	str	r3, [sp, #8]
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <GPS_parse+0x14c>)
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <GPS_parse+0x150>)
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <GPS_parse+0x154>)
 8001e54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <GPS_parse+0x158>)
 8001e56:	4927      	ldr	r1, [pc, #156]	@ (8001ef4 <GPS_parse+0x184>)
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f009 fa83 	bl	800b364 <siscanf>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	e01b      	b.n	8001e9c <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001e64:	2206      	movs	r2, #6
 8001e66:	4924      	ldr	r1, [pc, #144]	@ (8001ef8 <GPS_parse+0x188>)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f009 faf2 	bl	800b452 <strncmp>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d113      	bne.n	8001e9c <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <GPS_parse+0x18c>)
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <GPS_parse+0x190>)
 8001e7a:	9304      	str	r3, [sp, #16]
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <GPS_parse+0x194>)
 8001e7e:	9303      	str	r3, [sp, #12]
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <GPS_parse+0x174>)
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <GPS_parse+0x198>)
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <GPS_parse+0x19c>)
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <GPS_parse+0x1a0>)
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <GPS_parse+0x1a4>)
 8001e90:	4921      	ldr	r1, [pc, #132]	@ (8001f18 <GPS_parse+0x1a8>)
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f009 fa66 	bl	800b364 <siscanf>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
            return;
    }
}
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800fb60 	.word	0x0800fb60
 8001ea8:	20000504 	.word	0x20000504
 8001eac:	20000500 	.word	0x20000500
 8001eb0:	200004fc 	.word	0x200004fc
 8001eb4:	200004f8 	.word	0x200004f8
 8001eb8:	200004f4 	.word	0x200004f4
 8001ebc:	200004f1 	.word	0x200004f1
 8001ec0:	200004e4 	.word	0x200004e4
 8001ec4:	200004f0 	.word	0x200004f0
 8001ec8:	200004e8 	.word	0x200004e8
 8001ecc:	200004ec 	.word	0x200004ec
 8001ed0:	0800fb68 	.word	0x0800fb68
 8001ed4:	200004d8 	.word	0x200004d8
 8001ed8:	0800fb90 	.word	0x0800fb90
 8001edc:	20000510 	.word	0x20000510
 8001ee0:	2000050c 	.word	0x2000050c
 8001ee4:	20000508 	.word	0x20000508
 8001ee8:	0800fb98 	.word	0x0800fb98
 8001eec:	0800fbb8 	.word	0x0800fbb8
 8001ef0:	20000514 	.word	0x20000514
 8001ef4:	0800fbc0 	.word	0x0800fbc0
 8001ef8:	0800fbdc 	.word	0x0800fbdc
 8001efc:	2000052c 	.word	0x2000052c
 8001f00:	20000528 	.word	0x20000528
 8001f04:	20000525 	.word	0x20000525
 8001f08:	20000524 	.word	0x20000524
 8001f0c:	20000520 	.word	0x20000520
 8001f10:	2000051c 	.word	0x2000051c
 8001f14:	20000518 	.word	0x20000518
 8001f18:	0800fbe4 	.word	0x0800fbe4

08001f1c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f26:	4603      	mov	r3, r0
 8001f28:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001f2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f2e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001fb0 <GPS_nmea_to_dec+0x94>
 8001f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3a:	ee17 3a90 	vmov	r3, s15
 8001f3e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2264      	movs	r2, #100	@ 0x64
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f50:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f58:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001f5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f60:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001fb4 <GPS_nmea_to_dec+0x98>
 8001f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f68:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f76:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	2b53      	cmp	r3, #83	@ 0x53
 8001f86:	d002      	beq.n	8001f8e <GPS_nmea_to_dec+0x72>
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b57      	cmp	r3, #87	@ 0x57
 8001f8c:	d105      	bne.n	8001f9a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f92:	eef1 7a67 	vneg.f32	s15, s15
 8001f96:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	ee07 3a90 	vmov	s15, r3
}
 8001fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	42c80000 	.word	0x42c80000
 8001fb4:	42700000 	.word	0x42700000

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	@ (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	@ (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	@ (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	@ 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	621a      	str	r2, [r3, #32]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d01c      	beq.n	800219a <LL_TIM_OC_EnableFast+0x4a>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d017      	beq.n	8002196 <LL_TIM_OC_EnableFast+0x46>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b10      	cmp	r3, #16
 800216a:	d012      	beq.n	8002192 <LL_TIM_OC_EnableFast+0x42>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b40      	cmp	r3, #64	@ 0x40
 8002170:	d00d      	beq.n	800218e <LL_TIM_OC_EnableFast+0x3e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002178:	d007      	beq.n	800218a <LL_TIM_OC_EnableFast+0x3a>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002180:	d101      	bne.n	8002186 <LL_TIM_OC_EnableFast+0x36>
 8002182:	2305      	movs	r3, #5
 8002184:	e00a      	b.n	800219c <LL_TIM_OC_EnableFast+0x4c>
 8002186:	2306      	movs	r3, #6
 8002188:	e008      	b.n	800219c <LL_TIM_OC_EnableFast+0x4c>
 800218a:	2304      	movs	r3, #4
 800218c:	e006      	b.n	800219c <LL_TIM_OC_EnableFast+0x4c>
 800218e:	2303      	movs	r3, #3
 8002190:	e004      	b.n	800219c <LL_TIM_OC_EnableFast+0x4c>
 8002192:	2302      	movs	r3, #2
 8002194:	e002      	b.n	800219c <LL_TIM_OC_EnableFast+0x4c>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_TIM_OC_EnableFast+0x4c>
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3318      	adds	r3, #24
 80021a2:	4619      	mov	r1, r3
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <LL_TIM_OC_EnableFast+0x80>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	440b      	add	r3, r1
 80021ac:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	4907      	ldr	r1, [pc, #28]	@ (80021d4 <LL_TIM_OC_EnableFast+0x84>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	4619      	mov	r1, r3
 80021ba:	2304      	movs	r3, #4
 80021bc:	408b      	lsls	r3, r1
 80021be:	431a      	orrs	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	601a      	str	r2, [r3, #0]

}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	0800fd6c 	.word	0x0800fd6c
 80021d4:	0800fd74 	.word	0x0800fd74

080021d8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d01c      	beq.n	8002222 <LL_TIM_OC_EnablePreload+0x4a>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d017      	beq.n	800221e <LL_TIM_OC_EnablePreload+0x46>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d012      	beq.n	800221a <LL_TIM_OC_EnablePreload+0x42>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b40      	cmp	r3, #64	@ 0x40
 80021f8:	d00d      	beq.n	8002216 <LL_TIM_OC_EnablePreload+0x3e>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002200:	d007      	beq.n	8002212 <LL_TIM_OC_EnablePreload+0x3a>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002208:	d101      	bne.n	800220e <LL_TIM_OC_EnablePreload+0x36>
 800220a:	2305      	movs	r3, #5
 800220c:	e00a      	b.n	8002224 <LL_TIM_OC_EnablePreload+0x4c>
 800220e:	2306      	movs	r3, #6
 8002210:	e008      	b.n	8002224 <LL_TIM_OC_EnablePreload+0x4c>
 8002212:	2304      	movs	r3, #4
 8002214:	e006      	b.n	8002224 <LL_TIM_OC_EnablePreload+0x4c>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <LL_TIM_OC_EnablePreload+0x4c>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <LL_TIM_OC_EnablePreload+0x4c>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_TIM_OC_EnablePreload+0x4c>
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3318      	adds	r3, #24
 800222a:	4619      	mov	r1, r3
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <LL_TIM_OC_EnablePreload+0x80>)
 8002230:	5cd3      	ldrb	r3, [r2, r3]
 8002232:	440b      	add	r3, r1
 8002234:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	4907      	ldr	r1, [pc, #28]	@ (800225c <LL_TIM_OC_EnablePreload+0x84>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	4619      	mov	r1, r3
 8002242:	2308      	movs	r3, #8
 8002244:	408b      	lsls	r3, r1
 8002246:	431a      	orrs	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	0800fd6c 	.word	0x0800fd6c
 800225c:	0800fd74 	.word	0x0800fd74

08002260 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	609a      	str	r2, [r3, #8]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60da      	str	r2, [r3, #12]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60da      	str	r2, [r3, #12]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	615a      	str	r2, [r3, #20]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002312:	b480      	push	{r7}
 8002314:	b089      	sub	sp, #36	@ 0x24
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	330c      	adds	r3, #12
 800231e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	e853 3f00 	ldrex	r3, [r3]
 8002326:	60bb      	str	r3, [r7, #8]
   return(result);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f043 0320 	orr.w	r3, r3, #32
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	330c      	adds	r3, #12
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	61ba      	str	r2, [r7, #24]
 8002338:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233a:	6979      	ldr	r1, [r7, #20]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	e841 2300 	strex	r3, r2, [r1]
 8002342:	613b      	str	r3, [r7, #16]
   return(result);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e7      	bne.n	800231a <LL_USART_EnableIT_RXNE+0x8>
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	3724      	adds	r7, #36	@ 0x24
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3314      	adds	r3, #20
 8002364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	e853 3f00 	ldrex	r3, [r3]
 800236c:	60bb      	str	r3, [r7, #8]
   return(result);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3314      	adds	r3, #20
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	61ba      	str	r2, [r7, #24]
 800237e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	e841 2300 	strex	r3, r2, [r1]
 8002388:	613b      	str	r3, [r7, #16]
   return(result);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e7      	bne.n	8002360 <LL_USART_EnableDMAReq_TX+0x8>
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40023800 	.word	0x40023800

080023e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023f4:	4907      	ldr	r1, [pc, #28]	@ (8002414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40023800 	.word	0x40023800

08002418 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002422:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <LL_APB2_GRP1_EnableClock+0x2c>)
 800242e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4013      	ands	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40023800 	.word	0x40023800

08002448 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002452:	4a0c      	ldr	r2, [pc, #48]	@ (8002484 <LL_DMA_EnableStream+0x3c>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4908      	ldr	r1, [pc, #32]	@ (8002484 <LL_DMA_EnableStream+0x3c>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	440a      	add	r2, r1
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	4611      	mov	r1, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	440a      	add	r2, r1
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	0800fd7c 	.word	0x0800fd7c

08002488 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002492:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <LL_DMA_DisableStream+0x3c>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4908      	ldr	r1, [pc, #32]	@ (80024c4 <LL_DMA_DisableStream+0x3c>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	440a      	add	r2, r1
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	4611      	mov	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	440a      	add	r2, r1
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	0800fd7c 	.word	0x0800fd7c

080024c8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80024d4:	4a0d      	ldr	r2, [pc, #52]	@ (800250c <LL_DMA_SetDataTransferDirection+0x44>)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024e8:	4908      	ldr	r1, [pc, #32]	@ (800250c <LL_DMA_SetDataTransferDirection+0x44>)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	440b      	add	r3, r1
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	440b      	add	r3, r1
 80024f6:	4619      	mov	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	0800fd7c 	.word	0x0800fd7c

08002510 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800251c:	4a0d      	ldr	r2, [pc, #52]	@ (8002554 <LL_DMA_SetMode+0x44>)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4413      	add	r3, r2
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8002530:	4908      	ldr	r1, [pc, #32]	@ (8002554 <LL_DMA_SetMode+0x44>)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	440b      	add	r3, r1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	440b      	add	r3, r1
 800253e:	4619      	mov	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	0800fd7c 	.word	0x0800fd7c

08002558 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <LL_DMA_SetPeriphIncMode+0x44>)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002578:	4908      	ldr	r1, [pc, #32]	@ (800259c <LL_DMA_SetPeriphIncMode+0x44>)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	440b      	add	r3, r1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	440b      	add	r3, r1
 8002586:	4619      	mov	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	0800fd7c 	.word	0x0800fd7c

080025a0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <LL_DMA_SetMemoryIncMode+0x44>)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80025c0:	4908      	ldr	r1, [pc, #32]	@ (80025e4 <LL_DMA_SetMemoryIncMode+0x44>)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	440b      	add	r3, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	440b      	add	r3, r1
 80025ce:	4619      	mov	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	0800fd7c 	.word	0x0800fd7c

080025e8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <LL_DMA_SetPeriphSize+0x44>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8002608:	4908      	ldr	r1, [pc, #32]	@ (800262c <LL_DMA_SetPeriphSize+0x44>)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	440b      	add	r3, r1
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	440b      	add	r3, r1
 8002616:	4619      	mov	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	0800fd7c 	.word	0x0800fd7c

08002630 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <LL_DMA_SetMemorySize+0x44>)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002650:	4908      	ldr	r1, [pc, #32]	@ (8002674 <LL_DMA_SetMemorySize+0x44>)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	440b      	add	r3, r1
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	440b      	add	r3, r1
 800265e:	4619      	mov	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	0800fd7c 	.word	0x0800fd7c

08002678 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4413      	add	r3, r2
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002698:	4908      	ldr	r1, [pc, #32]	@ (80026bc <LL_DMA_SetStreamPriorityLevel+0x44>)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	440b      	add	r3, r1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	440b      	add	r3, r1
 80026a6:	4619      	mov	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	0800fd7c 	.word	0x0800fd7c

080026c0 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80026cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002704 <LL_DMA_SetDataLength+0x44>)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	4908      	ldr	r1, [pc, #32]	@ (8002704 <LL_DMA_SetDataLength+0x44>)
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	440a      	add	r2, r1
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	4611      	mov	r1, r2
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	440a      	add	r2, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	0800fd7c 	.word	0x0800fd7c

08002708 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002714:	4a0d      	ldr	r2, [pc, #52]	@ (800274c <LL_DMA_SetChannelSelection+0x44>)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002728:	4908      	ldr	r1, [pc, #32]	@ (800274c <LL_DMA_SetChannelSelection+0x44>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	440b      	add	r3, r1
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	440b      	add	r3, r1
 8002736:	4619      	mov	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	0800fd7c 	.word	0x0800fd7c

08002750 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800275a:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <LL_DMA_DisableFifoMode+0x3c>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4908      	ldr	r1, [pc, #32]	@ (800278c <LL_DMA_DisableFifoMode+0x3c>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	440a      	add	r2, r1
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4611      	mov	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	440a      	add	r2, r1
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6153      	str	r3, [r2, #20]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	0800fd7c 	.word	0x0800fd7c

08002790 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b40      	cmp	r3, #64	@ 0x40
 80027a2:	d114      	bne.n	80027ce <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <LL_DMA_ConfigAddresses+0x74>)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4413      	add	r3, r2
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80027b8:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <LL_DMA_ConfigAddresses+0x74>)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4413      	add	r3, r2
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80027cc:	e013      	b.n	80027f6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80027ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <LL_DMA_ConfigAddresses+0x74>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80027e2:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <LL_DMA_ConfigAddresses+0x74>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4413      	add	r3, r2
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	60d3      	str	r3, [r2, #12]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	0800fd7c 	.word	0x0800fd7c

08002808 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002812:	4a0c      	ldr	r2, [pc, #48]	@ (8002844 <LL_DMA_EnableIT_TC+0x3c>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4908      	ldr	r1, [pc, #32]	@ (8002844 <LL_DMA_EnableIT_TC+0x3c>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	440a      	add	r2, r1
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	4611      	mov	r1, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	440a      	add	r2, r1
 8002830:	f043 0310 	orr.w	r3, r3, #16
 8002834:	6013      	str	r3, [r2, #0]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	0800fd7c 	.word	0x0800fd7c

08002848 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	if(huart == &huart6) GPS_UART_CallBack();
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <HAL_UART_RxCpltCallback+0x1c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_UART_RxCpltCallback+0x14>
 8002858:	f7ff fa58 	bl	8001d0c <GPS_UART_CallBack>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000494 	.word	0x20000494

08002868 <map_float>:
long map (long x, long in_min, long in_max, long out_min, long out_max)
{
return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
}

float map_float(float x, float in_min, float in_max, float out_min, float out_max) {
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002872:	edc7 0a04 	vstr	s1, [r7, #16]
 8002876:	ed87 1a03 	vstr	s2, [r7, #12]
 800287a:	edc7 1a02 	vstr	s3, [r7, #8]
 800287e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002882:	ed97 7a05 	vldr	s14, [r7, #20]
 8002886:	edd7 7a04 	vldr	s15, [r7, #16]
 800288a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800288e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002892:	edd7 7a02 	vldr	s15, [r7, #8]
 8002896:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800289a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800289e:	ed97 7a03 	vldr	s14, [r7, #12]
 80028a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80028b6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <pidController_alt>:

// Desired altitude
//float desired_altitude = 4;  // Example: 100 meters

// PID controller function
float pidController_alt(float setpoint, float measured_value) {
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80028ce:	edc7 0a00 	vstr	s1, [r7]
    float error = setpoint - measured_value;
 80028d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80028d6:	edd7 7a00 	vldr	s15, [r7]
 80028da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028de:	edc7 7a03 	vstr	s15, [r7, #12]
    integral_alt += error;
 80028e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <pidController_alt+0x8c>)
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <pidController_alt+0x8c>)
 80028f2:	edc3 7a00 	vstr	s15, [r3]
    float derivative = error - previous_error_alt;
 80028f6:	4b17      	ldr	r3, [pc, #92]	@ (8002954 <pidController_alt+0x90>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002904:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_error_alt = error;
 8002908:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <pidController_alt+0x90>)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6013      	str	r3, [r2, #0]
    return (altitude_heading.kp * error) + (altitude_heading.ki * integral_alt) + (altitude_heading.kd * derivative);
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <pidController_alt+0x94>)
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	edd7 7a03 	vldr	s15, [r7, #12]
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <pidController_alt+0x94>)
 800291e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <pidController_alt+0x8c>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <pidController_alt+0x94>)
 8002932:	edd3 6a02 	vldr	s13, [r3, #8]
 8002936:	edd7 7a02 	vldr	s15, [r7, #8]
 800293a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002942:	eeb0 0a67 	vmov.f32	s0, s15
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000590 	.word	0x20000590
 8002954:	20000594 	.word	0x20000594
 8002958:	20000678 	.word	0x20000678

0800295c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002960:	b099      	sub	sp, #100	@ 0x64
 8002962:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002964:	f002 f870 	bl	8004a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002968:	f000 fc2e 	bl	80031c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800296c:	f000 ff8c 	bl	8003888 <MX_GPIO_Init>
  MX_DMA_Init();
 8002970:	f000 ff5a 	bl	8003828 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002974:	f000 ff04 	bl	8003780 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002978:	f000 fe60 	bl	800363c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800297c:	f000 ff2a 	bl	80037d4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8002980:	f000 fd3a 	bl	80033f8 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002984:	f000 fd0a 	bl	800339c <MX_I2C3_Init>
  MX_I2C1_Init();
 8002988:	f000 fcda 	bl	8003340 <MX_I2C1_Init>
  MX_ADC1_Init();
 800298c:	f000 fc86 	bl	800329c <MX_ADC1_Init>
  MX_TIM4_Init();
 8002990:	f000 fdae 	bl	80034f0 <MX_TIM4_Init>
  MX_TIM10_Init();
 8002994:	f000 fe1c 	bl	80035d0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8002998:	f7ff f9aa 	bl	8001cf0 <GPS_Init>
  // Initialize the RFFT instance
  LL_USART_EnableIT_RXNE(USART1);
 800299c:	4865      	ldr	r0, [pc, #404]	@ (8002b34 <main+0x1d8>)
 800299e:	f7ff fcb8 	bl	8002312 <LL_USART_EnableIT_RXNE>
  LL_TIM_EnableCounter(TIM4);
 80029a2:	4865      	ldr	r0, [pc, #404]	@ (8002b38 <main+0x1dc>)
 80029a4:	f7ff fb91 	bl	80020ca <LL_TIM_EnableCounter>

  //BMP8CONFIG
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_20, IIR_16);
 80029a8:	2304      	movs	r3, #4
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	2307      	movs	r3, #7
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2303      	movs	r3, #3
 80029b2:	2201      	movs	r2, #1
 80029b4:	2105      	movs	r1, #5
 80029b6:	2002      	movs	r0, #2
 80029b8:	f7fe fc4e 	bl	8001258 <BME280_Config>
  //MPU6050
  //MPU6050SetDefault(&MPU6050_DOWN);
  //while (MPU6050_Init(&hi2c1,MPU6050_ADDR_0) == 1);

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80029bc:	f107 0316 	add.w	r3, r7, #22
 80029c0:	2201      	movs	r2, #1
 80029c2:	4619      	mov	r1, r3
 80029c4:	485d      	ldr	r0, [pc, #372]	@ (8002b3c <main+0x1e0>)
 80029c6:	f002 f919 	bl	8004bfc <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80029ca:	2100      	movs	r1, #0
 80029cc:	485c      	ldr	r0, [pc, #368]	@ (8002b40 <main+0x1e4>)
 80029ce:	f005 f81d 	bl	8007a0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80029d2:	2104      	movs	r1, #4
 80029d4:	485a      	ldr	r0, [pc, #360]	@ (8002b40 <main+0x1e4>)
 80029d6:	f005 f819 	bl	8007a0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80029da:	2108      	movs	r1, #8
 80029dc:	4858      	ldr	r0, [pc, #352]	@ (8002b40 <main+0x1e4>)
 80029de:	f005 f815 	bl	8007a0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80029e2:	210c      	movs	r1, #12
 80029e4:	4856      	ldr	r0, [pc, #344]	@ (8002b40 <main+0x1e4>)
 80029e6:	f005 f811 	bl	8007a0c <HAL_TIM_PWM_Start>

  ESC_Calibration();
 80029ea:	f000 ffe9 	bl	80039c0 <ESC_Calibration>

  //while(IS_throttle_Min() == 0);


  // we should turn these sequence of code into a function
  LL_TIM_CC_EnableChannel(TIM4,LL_TIM_CHANNEL_CH4);
 80029ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029f2:	4851      	ldr	r0, [pc, #324]	@ (8002b38 <main+0x1dc>)
 80029f4:	f7ff fb89 	bl	800210a <LL_TIM_CC_EnableChannel>

  TIM4->PSC = 2000;
 80029f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b38 <main+0x1dc>)
 80029fa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002a00:	2064      	movs	r0, #100	@ 0x64
 8002a02:	f002 f893 	bl	8004b2c <HAL_Delay>
  TIM4->PSC = 1500;
 8002a06:	4b4c      	ldr	r3, [pc, #304]	@ (8002b38 <main+0x1dc>)
 8002a08:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002a0e:	2064      	movs	r0, #100	@ 0x64
 8002a10:	f002 f88c 	bl	8004b2c <HAL_Delay>
  TIM4->PSC = 1000;
 8002a14:	4b48      	ldr	r3, [pc, #288]	@ (8002b38 <main+0x1dc>)
 8002a16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002a1c:	2064      	movs	r0, #100	@ 0x64
 8002a1e:	f002 f885 	bl	8004b2c <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM4,LL_TIM_CHANNEL_CH4);
 8002a22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a26:	4844      	ldr	r0, [pc, #272]	@ (8002b38 <main+0x1dc>)
 8002a28:	f7ff fb80 	bl	800212c <LL_TIM_CC_DisableChannel>



	//BMP280
	BME280_Measure();
 8002a2c:	f7ff f8ae 	bl	8001b8c <BME280_Measure>
	alt_heading_reference_init = alt;
 8002a30:	4b44      	ldr	r3, [pc, #272]	@ (8002b44 <main+0x1e8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	637b      	str	r3, [r7, #52]	@ 0x34

	LL_TIM_EnableCounter(TIM10);
 8002a36:	4844      	ldr	r0, [pc, #272]	@ (8002b48 <main+0x1ec>)
 8002a38:	f7ff fb47 	bl	80020ca <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM10);
 8002a3c:	4842      	ldr	r0, [pc, #264]	@ (8002b48 <main+0x1ec>)
 8002a3e:	f7ff fc32 	bl	80022a6 <LL_TIM_EnableIT_UPDATE>
		//float KalmanAngleRoll_map = map_float(MPU6050_DOWN.KalmanAngleRoll,-4.5,4.0,-90,90)   ;
		//float KalmanAnglePitch_map = map_float(MPU6050_DOWN.KalmanAnglePitch,-4.5,4.5,-90,90) ;


		//BMP280
		BME280_Measure();
 8002a42:	f7ff f8a3 	bl	8001b8c <BME280_Measure>
		alt = alt - alt_heading_reference_init;
 8002a46:	4b3f      	ldr	r3, [pc, #252]	@ (8002b44 <main+0x1e8>)
 8002a48:	ed93 7a00 	vldr	s14, [r3]
 8002a4c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a54:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <main+0x1e8>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]
		alt = alt < 0 ? 0 : alt;
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b44 <main+0x1e8>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a68:	d502      	bpl.n	8002a70 <main+0x114>
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e001      	b.n	8002a74 <main+0x118>
 8002a70:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <main+0x1e8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a33      	ldr	r2, [pc, #204]	@ (8002b44 <main+0x1e8>)
 8002a76:	6013      	str	r3, [r2, #0]

		adcVolt = adcVal * 0.000806f;
 8002a78:	8afb      	ldrh	r3, [r7, #22]
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002b4c <main+0x1f0>
 8002a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		batVolt = adcVolt * (R1 + R2) / R2;
 8002a8e:	4b30      	ldr	r3, [pc, #192]	@ (8002b50 <main+0x1f4>)
 8002a90:	ed93 7a00 	vldr	s14, [r3]
 8002a94:	4b2f      	ldr	r3, [pc, #188]	@ (8002b54 <main+0x1f8>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a9e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002aa2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <main+0x1f8>)
 8002aa8:	ed93 7a00 	vldr	s14, [r3]
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		gps_lat_dec = GPS.dec_latitude * 10000;
 8002ab4:	4b28      	ldr	r3, [pc, #160]	@ (8002b58 <main+0x1fc>)
 8002ab6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aba:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002b5c <main+0x200>
 8002abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac6:	ee17 2a90 	vmov	r2, s15
 8002aca:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <main+0x204>)
 8002acc:	601a      	str	r2, [r3, #0]
		gps_lon_dec = GPS.dec_longitude * 10000;
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <main+0x1fc>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002b5c <main+0x200>
 8002ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae0:	ee17 2a90 	vmov	r2, s15
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <main+0x208>)
 8002ae6:	601a      	str	r2, [r3, #0]
		alt_dec = alt * 100;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <main+0x1e8>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002b68 <main+0x20c>
 8002af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002afa:	ee17 2a90 	vmov	r2, s15
 8002afe:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <main+0x210>)
 8002b00:	601a      	str	r2, [r3, #0]
		bat_dec = batVolt * 100;
 8002b02:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b06:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002b68 <main+0x20c>
 8002b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b12:	ee17 2a90 	vmov	r2, s15
 8002b16:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <main+0x214>)
 8002b18:	601a      	str	r2, [r3, #0]

		if(batVolt < 10.0f)
 8002b1a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b1e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2a:	d525      	bpl.n	8002b78 <main+0x21c>
		  {
			  low_bat_flag = 1;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <main+0x218>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e024      	b.n	8002b7e <main+0x222>
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	200002b8 	.word	0x200002b8
 8002b40:	20000408 	.word	0x20000408
 8002b44:	2000057c 	.word	0x2000057c
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	3a5349bf 	.word	0x3a5349bf
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004
 8002b58:	200004d8 	.word	0x200004d8
 8002b5c:	461c4000 	.word	0x461c4000
 8002b60:	20000530 	.word	0x20000530
 8002b64:	20000534 	.word	0x20000534
 8002b68:	42c80000 	.word	0x42c80000
 8002b6c:	20000538 	.word	0x20000538
 8002b70:	2000053c 	.word	0x2000053c
 8002b74:	2000058c 	.word	0x2000058c
		  }
		  else
		  {
			  low_bat_flag = 0;
 8002b78:	4bb0      	ldr	r3, [pc, #704]	@ (8002e3c <main+0x4e0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
		  }


	  		if(_rx_cplt_flag == 1)
 8002b7e:	4bb0      	ldr	r3, [pc, #704]	@ (8002e40 <main+0x4e4>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	f040 8095 	bne.w	8002cb2 <main+0x356>
			  {
	  			printf("%s\r\n",_rx_buf);
 8002b88:	49ae      	ldr	r1, [pc, #696]	@ (8002e44 <main+0x4e8>)
 8002b8a:	48af      	ldr	r0, [pc, #700]	@ (8002e48 <main+0x4ec>)
 8002b8c:	f008 fbb8 	bl	800b300 <iprintf>
				printf("%d\r\n",strlen(_rx_buf));
 8002b90:	48ac      	ldr	r0, [pc, #688]	@ (8002e44 <main+0x4e8>)
 8002b92:	f7fd fb75 	bl	8000280 <strlen>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	48ac      	ldr	r0, [pc, #688]	@ (8002e4c <main+0x4f0>)
 8002b9c:	f008 fbb0 	bl	800b300 <iprintf>
				  _rx_cplt_flag = 0;
 8002ba0:	4ba7      	ldr	r3, [pc, #668]	@ (8002e40 <main+0x4e4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
				  if(strlen(_rx_buf) == 52 && _rx_buf[0] == '#')
 8002ba6:	48a7      	ldr	r0, [pc, #668]	@ (8002e44 <main+0x4e8>)
 8002ba8:	f7fd fb6a 	bl	8000280 <strlen>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b34      	cmp	r3, #52	@ 0x34
 8002bb0:	d17f      	bne.n	8002cb2 <main+0x356>
 8002bb2:	4ba4      	ldr	r3, [pc, #656]	@ (8002e44 <main+0x4e8>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b23      	cmp	r3, #35	@ 0x23
 8002bb8:	d17b      	bne.n	8002cb2 <main+0x356>
				  {
					  //printf("%d\r\n",strlen(_rx_buf));

					  //printf("recep comp\r\n");

					  parseData(_rx_buf);
 8002bba:	48a2      	ldr	r0, [pc, #648]	@ (8002e44 <main+0x4e8>)
 8002bbc:	f001 f900 	bl	8003dc0 <parseData>

					  if(imu.OrrX>360.0){
 8002bc0:	4ba3      	ldr	r3, [pc, #652]	@ (8002e50 <main+0x4f4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002bc8:	dd08      	ble.n	8002bdc <main+0x280>
						  imu.OrrX = OrrX_pre;
 8002bca:	4ba2      	ldr	r3, [pc, #648]	@ (8002e54 <main+0x4f8>)
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd4:	ee17 2a90 	vmov	r2, s15
 8002bd8:	4b9d      	ldr	r3, [pc, #628]	@ (8002e50 <main+0x4f4>)
 8002bda:	601a      	str	r2, [r3, #0]
					  }
					  OrrX_pre = imu.OrrX;
 8002bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e50 <main+0x4f4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be8:	4b9a      	ldr	r3, [pc, #616]	@ (8002e54 <main+0x4f8>)
 8002bea:	edc3 7a00 	vstr	s15, [r3]
					  if(imu.OrrY>360.0){
 8002bee:	4b98      	ldr	r3, [pc, #608]	@ (8002e50 <main+0x4f4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002bf6:	dd08      	ble.n	8002c0a <main+0x2ae>
						  imu.OrrY = OrrY_pre;
 8002bf8:	4b97      	ldr	r3, [pc, #604]	@ (8002e58 <main+0x4fc>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c02:	ee17 2a90 	vmov	r2, s15
 8002c06:	4b92      	ldr	r3, [pc, #584]	@ (8002e50 <main+0x4f4>)
 8002c08:	605a      	str	r2, [r3, #4]
					  }
					  OrrY_pre = imu.OrrY;
 8002c0a:	4b91      	ldr	r3, [pc, #580]	@ (8002e50 <main+0x4f4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c16:	4b90      	ldr	r3, [pc, #576]	@ (8002e58 <main+0x4fc>)
 8002c18:	edc3 7a00 	vstr	s15, [r3]
					  if(imu.OrrZ>360.0){
 8002c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e50 <main+0x4f4>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002c24:	dd08      	ble.n	8002c38 <main+0x2dc>
						  imu.OrrZ = OrrZ_pre;
 8002c26:	4b8d      	ldr	r3, [pc, #564]	@ (8002e5c <main+0x500>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c30:	ee17 2a90 	vmov	r2, s15
 8002c34:	4b86      	ldr	r3, [pc, #536]	@ (8002e50 <main+0x4f4>)
 8002c36:	609a      	str	r2, [r3, #8]
					  }
					  OrrZ_pre = imu.OrrZ;
 8002c38:	4b85      	ldr	r3, [pc, #532]	@ (8002e50 <main+0x4f4>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c44:	4b85      	ldr	r3, [pc, #532]	@ (8002e5c <main+0x500>)
 8002c46:	edc3 7a00 	vstr	s15, [r3]


					  printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\r\n",imu.OrrX,imu.OrrY,imu.OrrZ,imu.GyroX,imu.GyroY,imu.GyroZ,imu.LACCx,imu.LACCy,imu.LACCz);
 8002c4a:	4b81      	ldr	r3, [pc, #516]	@ (8002e50 <main+0x4f4>)
 8002c4c:	681e      	ldr	r6, [r3, #0]
 8002c4e:	4b80      	ldr	r3, [pc, #512]	@ (8002e50 <main+0x4f4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	4b7e      	ldr	r3, [pc, #504]	@ (8002e50 <main+0x4f4>)
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e50 <main+0x4f4>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e50 <main+0x4f4>)
 8002c60:	6912      	ldr	r2, [r2, #16]
 8002c62:	497b      	ldr	r1, [pc, #492]	@ (8002e50 <main+0x4f4>)
 8002c64:	68c9      	ldr	r1, [r1, #12]
 8002c66:	487a      	ldr	r0, [pc, #488]	@ (8002e50 <main+0x4f4>)
 8002c68:	6980      	ldr	r0, [r0, #24]
 8002c6a:	4c79      	ldr	r4, [pc, #484]	@ (8002e50 <main+0x4f4>)
 8002c6c:	69e4      	ldr	r4, [r4, #28]
 8002c6e:	4d78      	ldr	r5, [pc, #480]	@ (8002e50 <main+0x4f4>)
 8002c70:	6a2d      	ldr	r5, [r5, #32]
 8002c72:	9505      	str	r5, [sp, #20]
 8002c74:	9404      	str	r4, [sp, #16]
 8002c76:	9003      	str	r0, [sp, #12]
 8002c78:	9102      	str	r1, [sp, #8]
 8002c7a:	9201      	str	r2, [sp, #4]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	4631      	mov	r1, r6
 8002c84:	4876      	ldr	r0, [pc, #472]	@ (8002e60 <main+0x504>)
 8002c86:	f008 fb3b 	bl	800b300 <iprintf>
					  printf("%d\t%d\t%d\t%d\t%d\t%d\r\n", rc.RH, rc.RV, rc.LV, rc.LH, rc.SwL, rc.SwR);
 8002c8a:	4b76      	ldr	r3, [pc, #472]	@ (8002e64 <main+0x508>)
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	4b75      	ldr	r3, [pc, #468]	@ (8002e64 <main+0x508>)
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4b74      	ldr	r3, [pc, #464]	@ (8002e64 <main+0x508>)
 8002c94:	6898      	ldr	r0, [r3, #8]
 8002c96:	4b73      	ldr	r3, [pc, #460]	@ (8002e64 <main+0x508>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	4c72      	ldr	r4, [pc, #456]	@ (8002e64 <main+0x508>)
 8002c9c:	7c24      	ldrb	r4, [r4, #16]
 8002c9e:	4625      	mov	r5, r4
 8002ca0:	4c70      	ldr	r4, [pc, #448]	@ (8002e64 <main+0x508>)
 8002ca2:	7c64      	ldrb	r4, [r4, #17]
 8002ca4:	9402      	str	r4, [sp, #8]
 8002ca6:	9501      	str	r5, [sp, #4]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4603      	mov	r3, r0
 8002cac:	486e      	ldr	r0, [pc, #440]	@ (8002e68 <main+0x50c>)
 8002cae:	f008 fb27 	bl	800b300 <iprintf>
							*/

				  	  }
			  }

	  			float mapped_alt= map_float(rc.LV, 10, 1023, 0,3000);
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002e64 <main+0x508>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbe:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 8002e6c <main+0x510>
 8002cc2:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 8002e70 <main+0x514>
 8002cc6:	ed9f 1a6b 	vldr	s2, [pc, #428]	@ 8002e74 <main+0x518>
 8002cca:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8002cce:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd2:	f7ff fdc9 	bl	8002868 <map_float>
 8002cd6:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	  			printf("rc.LV: %f\r\n",rc.LV);
 8002cda:	4b62      	ldr	r3, [pc, #392]	@ (8002e64 <main+0x508>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4865      	ldr	r0, [pc, #404]	@ (8002e78 <main+0x51c>)
 8002ce2:	f008 fb0d 	bl	800b300 <iprintf>
	  			alt_heading_reference = map_float(mapped_alt, 2, 3000, 0,4);
 8002ce6:	eeb1 2a00 	vmov.f32	s4, #16	@ 0x40800000  4.0
 8002cea:	eddf 1a61 	vldr	s3, [pc, #388]	@ 8002e70 <main+0x514>
 8002cee:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8002e6c <main+0x510>
 8002cf2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002cf6:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002cfa:	f7ff fdb5 	bl	8002868 <map_float>
 8002cfe:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
				printf("alt_heading_reference: %f\r\n",alt_heading_reference);
 8002d02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d04:	f7fd fc28 	bl	8000558 <__aeabi_f2d>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	485b      	ldr	r0, [pc, #364]	@ (8002e7c <main+0x520>)
 8002d0e:	f008 faf7 	bl	800b300 <iprintf>
				altitude_heading.kp = 1;
 8002d12:	4b5b      	ldr	r3, [pc, #364]	@ (8002e80 <main+0x524>)
 8002d14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002d18:	601a      	str	r2, [r3, #0]
				altitude_heading.ki = 0;
 8002d1a:	4b59      	ldr	r3, [pc, #356]	@ (8002e80 <main+0x524>)
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
				altitude_heading.kd = 0;
 8002d22:	4b57      	ldr	r3, [pc, #348]	@ (8002e80 <main+0x524>)
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]

				yaw_heading.kp = 0.3;
 8002d2a:	4b56      	ldr	r3, [pc, #344]	@ (8002e84 <main+0x528>)
 8002d2c:	4a56      	ldr	r2, [pc, #344]	@ (8002e88 <main+0x52c>)
 8002d2e:	601a      	str	r2, [r3, #0]
				yaw_heading.ki = 4;
 8002d30:	4b54      	ldr	r3, [pc, #336]	@ (8002e84 <main+0x528>)
 8002d32:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002d36:	605a      	str	r2, [r3, #4]
				yaw_heading.kd = 0;
 8002d38:	4b52      	ldr	r3, [pc, #328]	@ (8002e84 <main+0x528>)
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]


	  			float Ut_alt = pidController_alt(1,alt);
 8002d40:	4b52      	ldr	r3, [pc, #328]	@ (8002e8c <main+0x530>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	eef0 0a67 	vmov.f32	s1, s15
 8002d4a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002d4e:	f7ff fdb9 	bl	80028c4 <pidController_alt>
 8002d52:	ed87 0a08 	vstr	s0, [r7, #32]
	  			//float Ut_yaw = pidController_yaw(alt_heading_reference,alt);

	  			pitch.in.kp = 1.5;
 8002d56:	4b4e      	ldr	r3, [pc, #312]	@ (8002e90 <main+0x534>)
 8002d58:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002d5c:	601a      	str	r2, [r3, #0]
				pitch.in.ki = 1.5;
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e90 <main+0x534>)
 8002d60:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002d64:	605a      	str	r2, [r3, #4]
				pitch.in.kd = 0;
 8002d66:	4b4a      	ldr	r3, [pc, #296]	@ (8002e90 <main+0x534>)
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
				pitch.out.kp = 2;
 8002d6e:	4b48      	ldr	r3, [pc, #288]	@ (8002e90 <main+0x534>)
 8002d70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
				pitch.out.ki = 2;
 8002d76:	4b46      	ldr	r3, [pc, #280]	@ (8002e90 <main+0x534>)
 8002d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
				pitch.out.kd = 0;
 8002d7e:	4b44      	ldr	r3, [pc, #272]	@ (8002e90 <main+0x534>)
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	@ 0x40


				roll.in.kp = 1.5;
 8002d86:	4b43      	ldr	r3, [pc, #268]	@ (8002e94 <main+0x538>)
 8002d88:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002d8c:	601a      	str	r2, [r3, #0]
				roll.in.ki = 1.5;
 8002d8e:	4b41      	ldr	r3, [pc, #260]	@ (8002e94 <main+0x538>)
 8002d90:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002d94:	605a      	str	r2, [r3, #4]
				roll.in.kd = 0;
 8002d96:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <main+0x538>)
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
				roll.out.kp = 2;
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e94 <main+0x538>)
 8002da0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38
				roll.out.ki = 2;
 8002da6:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <main+0x538>)
 8002da8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002dac:	63da      	str	r2, [r3, #60]	@ 0x3c
				roll.out.kd = 0;
 8002dae:	4b39      	ldr	r3, [pc, #228]	@ (8002e94 <main+0x538>)
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40

	  			Double_Roll_Pitch_PID_Calculation(&pitch, 0 , imu.OrrZ, imu.GyroZ);
 8002db6:	4b26      	ldr	r3, [pc, #152]	@ (8002e50 <main+0x4f4>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc2:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <main+0x4f4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	ee07 3a10 	vmov	s14, r3
 8002dca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002dce:	eeb0 1a47 	vmov.f32	s2, s14
 8002dd2:	eef0 0a67 	vmov.f32	s1, s15
 8002dd6:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8002e70 <main+0x514>
 8002dda:	482d      	ldr	r0, [pc, #180]	@ (8002e90 <main+0x534>)
 8002ddc:	f000 fe1c 	bl	8003a18 <Double_Roll_Pitch_PID_Calculation>
				Double_Roll_Pitch_PID_Calculation(&roll, 0, imu.OrrY,imu.GyroY);
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <main+0x4f4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dec:	4b18      	ldr	r3, [pc, #96]	@ (8002e50 <main+0x4f4>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	ee07 3a10 	vmov	s14, r3
 8002df4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002df8:	eeb0 1a47 	vmov.f32	s2, s14
 8002dfc:	eef0 0a67 	vmov.f32	s1, s15
 8002e00:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002e70 <main+0x514>
 8002e04:	4823      	ldr	r0, [pc, #140]	@ (8002e94 <main+0x538>)
 8002e06:	f000 fe07 	bl	8003a18 <Double_Roll_Pitch_PID_Calculation>
				Single_Yaw_Heading_PID_Calculation(&yaw_heading, 246, imu.OrrX,imu.GyroX);
 8002e0a:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <main+0x4f4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e16:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <main+0x4f4>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	ee07 3a10 	vmov	s14, r3
 8002e1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e22:	eeb0 1a47 	vmov.f32	s2, s14
 8002e26:	eef0 0a67 	vmov.f32	s1, s15
 8002e2a:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002e98 <main+0x53c>
 8002e2e:	4815      	ldr	r0, [pc, #84]	@ (8002e84 <main+0x528>)
 8002e30:	f000 ff2c 	bl	8003c8c <Single_Yaw_Heading_PID_Calculation>
				ccr1 = MIN /* + Ut_alt  -  pitch.in.pid_result  + roll.in.pid_result */ + yaw_heading.pid_result; // M1
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <main+0x528>)
 8002e36:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002e3a:	e031      	b.n	8002ea0 <main+0x544>
 8002e3c:	2000058c 	.word	0x2000058c
 8002e40:	200007c8 	.word	0x200007c8
 8002e44:	20000794 	.word	0x20000794
 8002e48:	0800fc04 	.word	0x0800fc04
 8002e4c:	0800fc0c 	.word	0x0800fc0c
 8002e50:	2000076c 	.word	0x2000076c
 8002e54:	20000580 	.word	0x20000580
 8002e58:	20000584 	.word	0x20000584
 8002e5c:	20000588 	.word	0x20000588
 8002e60:	0800fc14 	.word	0x0800fc14
 8002e64:	20000758 	.word	0x20000758
 8002e68:	0800fc34 	.word	0x0800fc34
 8002e6c:	453b8000 	.word	0x453b8000
 8002e70:	00000000 	.word	0x00000000
 8002e74:	447fc000 	.word	0x447fc000
 8002e78:	0800fc48 	.word	0x0800fc48
 8002e7c:	0800fc54 	.word	0x0800fc54
 8002e80:	20000678 	.word	0x20000678
 8002e84:	200006e8 	.word	0x200006e8
 8002e88:	3e99999a 	.word	0x3e99999a
 8002e8c:	2000057c 	.word	0x2000057c
 8002e90:	20000608 	.word	0x20000608
 8002e94:	20000598 	.word	0x20000598
 8002e98:	43760000 	.word	0x43760000
 8002e9c:	425c0000 	.word	0x425c0000
 8002ea0:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8002e9c <main+0x540>
 8002ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eac:	ee17 3a90 	vmov	r3, s15
 8002eb0:	83fb      	strh	r3, [r7, #30]
				ccr2 = MIN /*+   Ut_alt - pitch.in.pid_result  - roll.in.pid_result */ - yaw_heading.pid_result;  // M2
 8002eb2:	4b30      	ldr	r3, [pc, #192]	@ (8002f74 <main+0x618>)
 8002eb4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002eb8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002f78 <main+0x61c>
 8002ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ec4:	ee17 3a90 	vmov	r3, s15
 8002ec8:	83bb      	strh	r3, [r7, #28]
				ccr3 = MIN /*+  Ut_alt + pitch.in.pid_result  - roll.in.pid_result */ + yaw_heading.pid_result;	 // M3
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <main+0x618>)
 8002ecc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002ed0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002f78 <main+0x61c>
 8002ed4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002edc:	ee17 3a90 	vmov	r3, s15
 8002ee0:	837b      	strh	r3, [r7, #26]
				ccr4 = MIN /*+ Ut_alt + pitch.in.pid_result + roll.in.pid_result */ -  yaw_heading.pid_result;  // M4
 8002ee2:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <main+0x618>)
 8002ee4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002ee8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002f78 <main+0x61c>
 8002eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef4:	ee17 3a90 	vmov	r3, s15
 8002ef8:	833b      	strh	r3, [r7, #24]

				printf("yaw_heading.pid_result: %f\r\n ",yaw_heading.pid_result);
 8002efa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f74 <main+0x618>)
 8002efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb2a 	bl	8000558 <__aeabi_f2d>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	481c      	ldr	r0, [pc, #112]	@ (8002f7c <main+0x620>)
 8002f0a:	f008 f9f9 	bl	800b300 <iprintf>
				printf("CCR1= %d, CCR2=  %d, CCR3=  %d ,CCR4=  %d\r\n ",ccr1,ccr2,ccr3,ccr4);
 8002f0e:	8bf9      	ldrh	r1, [r7, #30]
 8002f10:	8bba      	ldrh	r2, [r7, #28]
 8002f12:	8b78      	ldrh	r0, [r7, #26]
 8002f14:	8b3b      	ldrh	r3, [r7, #24]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4819      	ldr	r0, [pc, #100]	@ (8002f80 <main+0x624>)
 8002f1c:	f008 f9f0 	bl	800b300 <iprintf>



	  		ccr1 = ccr1 > MAX ? MAX : ccr1 < MIN ? MIN : ccr1;
 8002f20:	8bfb      	ldrh	r3, [r7, #30]
 8002f22:	2b41      	cmp	r3, #65	@ 0x41
 8002f24:	d805      	bhi.n	8002f32 <main+0x5d6>
 8002f26:	8bfb      	ldrh	r3, [r7, #30]
 8002f28:	2b37      	cmp	r3, #55	@ 0x37
 8002f2a:	bf38      	it	cc
 8002f2c:	2337      	movcc	r3, #55	@ 0x37
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	e000      	b.n	8002f34 <main+0x5d8>
 8002f32:	2341      	movs	r3, #65	@ 0x41
 8002f34:	83fb      	strh	r3, [r7, #30]
	  		ccr2 = ccr2 > MAX ? MAX : ccr2 < MIN ? MIN : ccr2;
 8002f36:	8bbb      	ldrh	r3, [r7, #28]
 8002f38:	2b41      	cmp	r3, #65	@ 0x41
 8002f3a:	d805      	bhi.n	8002f48 <main+0x5ec>
 8002f3c:	8bbb      	ldrh	r3, [r7, #28]
 8002f3e:	2b37      	cmp	r3, #55	@ 0x37
 8002f40:	bf38      	it	cc
 8002f42:	2337      	movcc	r3, #55	@ 0x37
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	e000      	b.n	8002f4a <main+0x5ee>
 8002f48:	2341      	movs	r3, #65	@ 0x41
 8002f4a:	83bb      	strh	r3, [r7, #28]
	  		ccr3 = ccr3 > MAX ? MAX : ccr3 < MIN ? MIN : ccr3;
 8002f4c:	8b7b      	ldrh	r3, [r7, #26]
 8002f4e:	2b41      	cmp	r3, #65	@ 0x41
 8002f50:	d805      	bhi.n	8002f5e <main+0x602>
 8002f52:	8b7b      	ldrh	r3, [r7, #26]
 8002f54:	2b37      	cmp	r3, #55	@ 0x37
 8002f56:	bf38      	it	cc
 8002f58:	2337      	movcc	r3, #55	@ 0x37
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	e000      	b.n	8002f60 <main+0x604>
 8002f5e:	2341      	movs	r3, #65	@ 0x41
 8002f60:	837b      	strh	r3, [r7, #26]
	  		ccr4 = ccr4 > MAX ? MAX : ccr4 < MIN ? MIN : ccr4;
 8002f62:	8b3b      	ldrh	r3, [r7, #24]
 8002f64:	2b41      	cmp	r3, #65	@ 0x41
 8002f66:	d80d      	bhi.n	8002f84 <main+0x628>
 8002f68:	8b3b      	ldrh	r3, [r7, #24]
 8002f6a:	2b37      	cmp	r3, #55	@ 0x37
 8002f6c:	bf38      	it	cc
 8002f6e:	2337      	movcc	r3, #55	@ 0x37
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	e008      	b.n	8002f86 <main+0x62a>
 8002f74:	200006e8 	.word	0x200006e8
 8002f78:	425c0000 	.word	0x425c0000
 8002f7c:	0800fc70 	.word	0x0800fc70
 8002f80:	0800fc90 	.word	0x0800fc90
 8002f84:	2341      	movs	r3, #65	@ 0x41
 8002f86:	833b      	strh	r3, [r7, #24]

		    TIM3->CCR1 = 65;
 8002f88:	4b7c      	ldr	r3, [pc, #496]	@ (800317c <main+0x820>)
 8002f8a:	2241      	movs	r2, #65	@ 0x41
 8002f8c:	635a      	str	r2, [r3, #52]	@ 0x34
		    TIM3->CCR2 = 65;
 8002f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800317c <main+0x820>)
 8002f90:	2241      	movs	r2, #65	@ 0x41
 8002f92:	639a      	str	r2, [r3, #56]	@ 0x38
		    TIM3->CCR3 = 65;
 8002f94:	4b79      	ldr	r3, [pc, #484]	@ (800317c <main+0x820>)
 8002f96:	2241      	movs	r2, #65	@ 0x41
 8002f98:	63da      	str	r2, [r3, #60]	@ 0x3c
		    TIM3->CCR4 = 65;
 8002f9a:	4b78      	ldr	r3, [pc, #480]	@ (800317c <main+0x820>)
 8002f9c:	2241      	movs	r2, #65	@ 0x41
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40

	  	sprintf(data_to_pc,"0003,0000,0000,0000,%4d,%5d,%07d,%07d,",bat_dec,alt,gps_lat_dec,gps_lon_dec);
 8002fa0:	4b77      	ldr	r3, [pc, #476]	@ (8003180 <main+0x824>)
 8002fa2:	681c      	ldr	r4, [r3, #0]
 8002fa4:	4b77      	ldr	r3, [pc, #476]	@ (8003184 <main+0x828>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fad5 	bl	8000558 <__aeabi_f2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4975      	ldr	r1, [pc, #468]	@ (8003188 <main+0x82c>)
 8002fb4:	6809      	ldr	r1, [r1, #0]
 8002fb6:	4875      	ldr	r0, [pc, #468]	@ (800318c <main+0x830>)
 8002fb8:	6800      	ldr	r0, [r0, #0]
 8002fba:	9003      	str	r0, [sp, #12]
 8002fbc:	9102      	str	r1, [sp, #8]
 8002fbe:	e9cd 2300 	strd	r2, r3, [sp]
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	4972      	ldr	r1, [pc, #456]	@ (8003190 <main+0x834>)
 8002fc6:	4873      	ldr	r0, [pc, #460]	@ (8003194 <main+0x838>)
 8002fc8:	f008 f9ac 	bl	800b324 <siprintf>
	  	//printf("long= %.4f ,lat=  %.4f\r\n ",GPS.dec_longitude,GPS.dec_latitude);
	  	printf("alt: %f, Pres: %f, Temp: %f, Hum: %f \r\n ",alt, Pressure, Temperature, Humidity);
 8002fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8003184 <main+0x828>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fac1 	bl	8000558 <__aeabi_f2d>
 8002fd6:	4682      	mov	sl, r0
 8002fd8:	468b      	mov	fp, r1
 8002fda:	4b6f      	ldr	r3, [pc, #444]	@ (8003198 <main+0x83c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd faba 	bl	8000558 <__aeabi_f2d>
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	460d      	mov	r5, r1
 8002fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800319c <main+0x840>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fab3 	bl	8000558 <__aeabi_f2d>
 8002ff2:	4680      	mov	r8, r0
 8002ff4:	4689      	mov	r9, r1
 8002ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80031a0 <main+0x844>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd faac 	bl	8000558 <__aeabi_f2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003008:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800300c:	e9cd 4500 	strd	r4, r5, [sp]
 8003010:	4652      	mov	r2, sl
 8003012:	465b      	mov	r3, fp
 8003014:	4863      	ldr	r0, [pc, #396]	@ (80031a4 <main+0x848>)
 8003016:	f008 f973 	bl	800b300 <iprintf>
	  	//printf("%d\t%.5f\r\n", adcVal, batVolt);
		//printf("ALT_GAINS : %f\t%f\t%f\t%f\t%f\t%f\r\n", altitude_heading.kp, altitude_heading.ki, altitude_heading.kd, altitude_rate.kp, altitude_rate.ki, altitude_rate.kd);
		//printf("YAW_GAINS : %f\t%f\t%f\t%f\t%f\t%f\r\n", yaw_heading.kp, yaw_heading.ki, yaw_heading.kd, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
		printf("ROLL_GAINS : %f\t%f\t%f\t%f\t%f\t%f\r\n", roll.in.kp, roll.in.ki, roll.in.kd, roll.out.kp, roll.out.ki, roll.out.kd);
 800301a:	4b63      	ldr	r3, [pc, #396]	@ (80031a8 <main+0x84c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fa9a 	bl	8000558 <__aeabi_f2d>
 8003024:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003028:	4b5f      	ldr	r3, [pc, #380]	@ (80031a8 <main+0x84c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fa93 	bl	8000558 <__aeabi_f2d>
 8003032:	4604      	mov	r4, r0
 8003034:	460d      	mov	r5, r1
 8003036:	4b5c      	ldr	r3, [pc, #368]	@ (80031a8 <main+0x84c>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa8c 	bl	8000558 <__aeabi_f2d>
 8003040:	4680      	mov	r8, r0
 8003042:	4689      	mov	r9, r1
 8003044:	4b58      	ldr	r3, [pc, #352]	@ (80031a8 <main+0x84c>)
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa85 	bl	8000558 <__aeabi_f2d>
 800304e:	4682      	mov	sl, r0
 8003050:	468b      	mov	fp, r1
 8003052:	4b55      	ldr	r3, [pc, #340]	@ (80031a8 <main+0x84c>)
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa7e 	bl	8000558 <__aeabi_f2d>
 800305c:	e9c7 0100 	strd	r0, r1, [r7]
 8003060:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <main+0x84c>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd fa77 	bl	8000558 <__aeabi_f2d>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003072:	ed97 7b00 	vldr	d7, [r7]
 8003076:	ed8d 7b06 	vstr	d7, [sp, #24]
 800307a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800307e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003082:	e9cd 4500 	strd	r4, r5, [sp]
 8003086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308a:	4848      	ldr	r0, [pc, #288]	@ (80031ac <main+0x850>)
 800308c:	f008 f938 	bl	800b300 <iprintf>
		printf("PITCH_GAINS : %f\t%f\t%f\t%f\t%f\t%f\r\n", pitch.in.kp, pitch.in.ki, pitch.in.kd, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8003090:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <main+0x854>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fa5f 	bl	8000558 <__aeabi_f2d>
 800309a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800309e:	4b44      	ldr	r3, [pc, #272]	@ (80031b0 <main+0x854>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fa58 	bl	8000558 <__aeabi_f2d>
 80030a8:	4604      	mov	r4, r0
 80030aa:	460d      	mov	r5, r1
 80030ac:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <main+0x854>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa51 	bl	8000558 <__aeabi_f2d>
 80030b6:	4680      	mov	r8, r0
 80030b8:	4689      	mov	r9, r1
 80030ba:	4b3d      	ldr	r3, [pc, #244]	@ (80031b0 <main+0x854>)
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fa4a 	bl	8000558 <__aeabi_f2d>
 80030c4:	4682      	mov	sl, r0
 80030c6:	468b      	mov	fp, r1
 80030c8:	4b39      	ldr	r3, [pc, #228]	@ (80031b0 <main+0x854>)
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fa43 	bl	8000558 <__aeabi_f2d>
 80030d2:	e9c7 0100 	strd	r0, r1, [r7]
 80030d6:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <main+0x854>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fa3c 	bl	8000558 <__aeabi_f2d>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80030e8:	ed97 7b00 	vldr	d7, [r7]
 80030ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80030f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80030f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80030f8:	e9cd 4500 	strd	r4, r5, [sp]
 80030fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003100:	482c      	ldr	r0, [pc, #176]	@ (80031b4 <main+0x858>)
 8003102:	f008 f8fd 	bl	800b300 <iprintf>
		printf("%d\t%d\t%d\t%d\t%d\t%d\r\n", rc.RH, rc.RV, rc.LV, rc.LH, rc.SwL, rc.SwR);
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <main+0x85c>)
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <main+0x85c>)
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4b2a      	ldr	r3, [pc, #168]	@ (80031b8 <main+0x85c>)
 8003110:	6898      	ldr	r0, [r3, #8]
 8003112:	4b29      	ldr	r3, [pc, #164]	@ (80031b8 <main+0x85c>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	4c28      	ldr	r4, [pc, #160]	@ (80031b8 <main+0x85c>)
 8003118:	7c24      	ldrb	r4, [r4, #16]
 800311a:	4625      	mov	r5, r4
 800311c:	4c26      	ldr	r4, [pc, #152]	@ (80031b8 <main+0x85c>)
 800311e:	7c64      	ldrb	r4, [r4, #17]
 8003120:	9402      	str	r4, [sp, #8]
 8003122:	9501      	str	r5, [sp, #4]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4603      	mov	r3, r0
 8003128:	4824      	ldr	r0, [pc, #144]	@ (80031bc <main+0x860>)
 800312a:	f008 f8e9 	bl	800b300 <iprintf>
		 printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\r\n",imu.OrrX,imu.OrrY,imu.OrrZ,imu.GyroX,imu.GyroY,imu.GyroZ,imu.LACCx,imu.LACCy,imu.LACCz);
 800312e:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <main+0x864>)
 8003130:	681e      	ldr	r6, [r3, #0]
 8003132:	4b23      	ldr	r3, [pc, #140]	@ (80031c0 <main+0x864>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <main+0x864>)
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <main+0x864>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <main+0x864>)
 8003144:	6912      	ldr	r2, [r2, #16]
 8003146:	491e      	ldr	r1, [pc, #120]	@ (80031c0 <main+0x864>)
 8003148:	68c9      	ldr	r1, [r1, #12]
 800314a:	481d      	ldr	r0, [pc, #116]	@ (80031c0 <main+0x864>)
 800314c:	6980      	ldr	r0, [r0, #24]
 800314e:	4c1c      	ldr	r4, [pc, #112]	@ (80031c0 <main+0x864>)
 8003150:	69e4      	ldr	r4, [r4, #28]
 8003152:	4d1b      	ldr	r5, [pc, #108]	@ (80031c0 <main+0x864>)
 8003154:	6a2d      	ldr	r5, [r5, #32]
 8003156:	9505      	str	r5, [sp, #20]
 8003158:	9404      	str	r4, [sp, #16]
 800315a:	9003      	str	r0, [sp, #12]
 800315c:	9102      	str	r1, [sp, #8]
 800315e:	9201      	str	r2, [sp, #4]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	4631      	mov	r1, r6
 8003168:	4816      	ldr	r0, [pc, #88]	@ (80031c4 <main+0x868>)
 800316a:	f008 f8c9 	bl	800b300 <iprintf>


	  	//printf("alt= %f\r\n ",alt);
	  	//printf("%s\r\n",data_to_pc);

	  	DMA_TransmitData();
 800316e:	f000 fc0f 	bl	8003990 <DMA_TransmitData>
	  	HAL_Delay(30);
 8003172:	201e      	movs	r0, #30
 8003174:	f001 fcda 	bl	8004b2c <HAL_Delay>
  {
 8003178:	e463      	b.n	8002a42 <main+0xe6>
 800317a:	bf00      	nop
 800317c:	40000400 	.word	0x40000400
 8003180:	2000053c 	.word	0x2000053c
 8003184:	2000057c 	.word	0x2000057c
 8003188:	20000530 	.word	0x20000530
 800318c:	20000534 	.word	0x20000534
 8003190:	0800fcc0 	.word	0x0800fcc0
 8003194:	20000540 	.word	0x20000540
 8003198:	20000574 	.word	0x20000574
 800319c:	20000570 	.word	0x20000570
 80031a0:	20000578 	.word	0x20000578
 80031a4:	0800fce8 	.word	0x0800fce8
 80031a8:	20000598 	.word	0x20000598
 80031ac:	0800fd14 	.word	0x0800fd14
 80031b0:	20000608 	.word	0x20000608
 80031b4:	0800fd38 	.word	0x0800fd38
 80031b8:	20000758 	.word	0x20000758
 80031bc:	0800fc34 	.word	0x0800fc34
 80031c0:	2000076c 	.word	0x2000076c
 80031c4:	0800fc14 	.word	0x0800fc14

080031c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b094      	sub	sp, #80	@ 0x50
 80031cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ce:	f107 0320 	add.w	r3, r7, #32
 80031d2:	2230      	movs	r2, #48	@ 0x30
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f008 f933 	bl	800b442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	4b28      	ldr	r3, [pc, #160]	@ (8003294 <SystemClock_Config+0xcc>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <SystemClock_Config+0xcc>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fc:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <SystemClock_Config+0xcc>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003208:	2300      	movs	r3, #0
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <SystemClock_Config+0xd0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003214:	4a20      	ldr	r2, [pc, #128]	@ (8003298 <SystemClock_Config+0xd0>)
 8003216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <SystemClock_Config+0xd0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003228:	2302      	movs	r3, #2
 800322a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800322c:	2301      	movs	r3, #1
 800322e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003230:	2310      	movs	r3, #16
 8003232:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003234:	2302      	movs	r3, #2
 8003236:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003238:	2300      	movs	r3, #0
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800323c:	2308      	movs	r3, #8
 800323e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003240:	2354      	movs	r3, #84	@ 0x54
 8003242:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003244:	2302      	movs	r3, #2
 8003246:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003248:	2307      	movs	r3, #7
 800324a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800324c:	f107 0320 	add.w	r3, r7, #32
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fef3 	bl	800703c <HAL_RCC_OscConfig>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800325c:	f000 fbd6 	bl	8003a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003260:	230f      	movs	r3, #15
 8003262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003264:	2302      	movs	r3, #2
 8003266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800326c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	2102      	movs	r1, #2
 800327c:	4618      	mov	r0, r3
 800327e:	f004 f955 	bl	800752c <HAL_RCC_ClockConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003288:	f000 fbc0 	bl	8003a0c <Error_Handler>
  }
}
 800328c:	bf00      	nop
 800328e:	3750      	adds	r7, #80	@ 0x50
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000

0800329c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032a2:	463b      	mov	r3, r7
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032ae:	4b21      	ldr	r3, [pc, #132]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032b0:	4a21      	ldr	r2, [pc, #132]	@ (8003338 <MX_ADC1_Init+0x9c>)
 80032b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032ce:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032d8:	2200      	movs	r2, #0
 80032da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032de:	4a17      	ldr	r2, [pc, #92]	@ (800333c <MX_ADC1_Init+0xa0>)
 80032e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032fc:	480d      	ldr	r0, [pc, #52]	@ (8003334 <MX_ADC1_Init+0x98>)
 80032fe:	f001 fc39 	bl	8004b74 <HAL_ADC_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003308:	f000 fb80 	bl	8003a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800330c:	230a      	movs	r3, #10
 800330e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003310:	2301      	movs	r3, #1
 8003312:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003318:	463b      	mov	r3, r7
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	@ (8003334 <MX_ADC1_Init+0x98>)
 800331e:	f001 fd7b 	bl	8004e18 <HAL_ADC_ConfigChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003328:	f000 fb70 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200002b8 	.word	0x200002b8
 8003338:	40012000 	.word	0x40012000
 800333c:	0f000001 	.word	0x0f000001

08003340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <MX_I2C1_Init+0x50>)
 8003346:	4a13      	ldr	r2, [pc, #76]	@ (8003394 <MX_I2C1_Init+0x54>)
 8003348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800334a:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <MX_I2C1_Init+0x50>)
 800334c:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <MX_I2C1_Init+0x58>)
 800334e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <MX_I2C1_Init+0x50>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003356:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <MX_I2C1_Init+0x50>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800335c:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <MX_I2C1_Init+0x50>)
 800335e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003362:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <MX_I2C1_Init+0x50>)
 8003366:	2200      	movs	r2, #0
 8003368:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800336a:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <MX_I2C1_Init+0x50>)
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003370:	4b07      	ldr	r3, [pc, #28]	@ (8003390 <MX_I2C1_Init+0x50>)
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <MX_I2C1_Init+0x50>)
 8003378:	2200      	movs	r2, #0
 800337a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800337c:	4804      	ldr	r0, [pc, #16]	@ (8003390 <MX_I2C1_Init+0x50>)
 800337e:	f002 fe9d 	bl	80060bc <HAL_I2C_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003388:	f000 fb40 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000360 	.word	0x20000360
 8003394:	40005400 	.word	0x40005400
 8003398:	000186a0 	.word	0x000186a0

0800339c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80033a0:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033a2:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <MX_I2C3_Init+0x54>)
 80033a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033a8:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <MX_I2C3_Init+0x58>)
 80033aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033c0:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033cc:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033d8:	4804      	ldr	r0, [pc, #16]	@ (80033ec <MX_I2C3_Init+0x50>)
 80033da:	f002 fe6f 	bl	80060bc <HAL_I2C_Init>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80033e4:	f000 fb12 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200003b4 	.word	0x200003b4
 80033f0:	40005c00 	.word	0x40005c00
 80033f4:	000186a0 	.word	0x000186a0

080033f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033fe:	f107 0320 	add.w	r3, r7, #32
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	615a      	str	r2, [r3, #20]
 8003418:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800341a:	4b33      	ldr	r3, [pc, #204]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 800341c:	4a33      	ldr	r2, [pc, #204]	@ (80034ec <MX_TIM3_Init+0xf4>)
 800341e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 8003420:	4b31      	ldr	r3, [pc, #196]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 8003422:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8003426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b2f      	ldr	r3, [pc, #188]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800342e:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 8003430:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003436:	4b2c      	ldr	r3, [pc, #176]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800343c:	4b2a      	ldr	r3, [pc, #168]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 800343e:	2280      	movs	r2, #128	@ 0x80
 8003440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003442:	4829      	ldr	r0, [pc, #164]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 8003444:	f004 fa92 	bl	800796c <HAL_TIM_PWM_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800344e:	f000 fadd 	bl	8003a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800345a:	f107 0320 	add.w	r3, r7, #32
 800345e:	4619      	mov	r1, r3
 8003460:	4821      	ldr	r0, [pc, #132]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 8003462:	f004 fe77 	bl	8008154 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800346c:	f000 face 	bl	8003a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003470:	2360      	movs	r3, #96	@ 0x60
 8003472:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800347c:	2304      	movs	r3, #4
 800347e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	2200      	movs	r2, #0
 8003484:	4619      	mov	r1, r3
 8003486:	4818      	ldr	r0, [pc, #96]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 8003488:	f004 fb70 	bl	8007b6c <HAL_TIM_PWM_ConfigChannel>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003492:	f000 fabb 	bl	8003a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	2204      	movs	r2, #4
 800349a:	4619      	mov	r1, r3
 800349c:	4812      	ldr	r0, [pc, #72]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 800349e:	f004 fb65 	bl	8007b6c <HAL_TIM_PWM_ConfigChannel>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80034a8:	f000 fab0 	bl	8003a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	2208      	movs	r2, #8
 80034b0:	4619      	mov	r1, r3
 80034b2:	480d      	ldr	r0, [pc, #52]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 80034b4:	f004 fb5a 	bl	8007b6c <HAL_TIM_PWM_ConfigChannel>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80034be:	f000 faa5 	bl	8003a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	220c      	movs	r2, #12
 80034c6:	4619      	mov	r1, r3
 80034c8:	4807      	ldr	r0, [pc, #28]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 80034ca:	f004 fb4f 	bl	8007b6c <HAL_TIM_PWM_ConfigChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80034d4:	f000 fa9a 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034d8:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <MX_TIM3_Init+0xf0>)
 80034da:	f000 ffad 	bl	8004438 <HAL_TIM_MspPostInit>

}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	@ 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000408 	.word	0x20000408
 80034ec:	40000400 	.word	0x40000400

080034f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b094      	sub	sp, #80	@ 0x50
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80034f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003506:	f107 031c 	add.w	r3, r7, #28
 800350a:	2220      	movs	r2, #32
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f007 ff97 	bl	800b442 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	611a      	str	r2, [r3, #16]
 8003522:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003524:	2004      	movs	r0, #4
 8003526:	f7fe ff5f 	bl	80023e8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800352a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800352e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003530:	2300      	movs	r3, #0
 8003532:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 8003534:	2314      	movs	r3, #20
 8003536:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003538:	2300      	movs	r3, #0
 800353a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800353c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003540:	4619      	mov	r1, r3
 8003542:	4821      	ldr	r0, [pc, #132]	@ (80035c8 <MX_TIM4_Init+0xd8>)
 8003544:	f006 fa10 	bl	8009968 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8003548:	481f      	ldr	r0, [pc, #124]	@ (80035c8 <MX_TIM4_Init+0xd8>)
 800354a:	f7fe fdce 	bl	80020ea <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 800354e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003552:	481d      	ldr	r0, [pc, #116]	@ (80035c8 <MX_TIM4_Init+0xd8>)
 8003554:	f7fe fe40 	bl	80021d8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003558:	2360      	movs	r3, #96	@ 0x60
 800355a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800355c:	2300      	movs	r3, #0
 800355e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8003564:	230a      	movs	r3, #10
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	461a      	mov	r2, r3
 8003572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003576:	4814      	ldr	r0, [pc, #80]	@ (80035c8 <MX_TIM4_Init+0xd8>)
 8003578:	f006 fa70 	bl	8009a5c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM4, LL_TIM_CHANNEL_CH4);
 800357c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003580:	4811      	ldr	r0, [pc, #68]	@ (80035c8 <MX_TIM4_Init+0xd8>)
 8003582:	f7fe fde5 	bl	8002150 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003586:	2100      	movs	r1, #0
 8003588:	480f      	ldr	r0, [pc, #60]	@ (80035c8 <MX_TIM4_Init+0xd8>)
 800358a:	f7fe fe69 	bl	8002260 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800358e:	480e      	ldr	r0, [pc, #56]	@ (80035c8 <MX_TIM4_Init+0xd8>)
 8003590:	f7fe fe79 	bl	8002286 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003594:	2002      	movs	r0, #2
 8003596:	f7fe ff0f 	bl	80023b8 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB9   ------> TIM4_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800359a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800359e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035a0:	2302      	movs	r3, #2
 80035a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4804      	ldr	r0, [pc, #16]	@ (80035cc <MX_TIM4_Init+0xdc>)
 80035ba:	f005 ffb6 	bl	800952a <LL_GPIO_Init>

}
 80035be:	bf00      	nop
 80035c0:	3750      	adds	r7, #80	@ 0x50
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40020400 	.word	0x40020400

080035d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 80035e4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80035e8:	f7fe ff16 	bl	8002418 <LL_APB2_GRP1_EnableClock>

  /* TIM10 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80035ec:	f7fe fce4 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fd34 	bl	8002064 <NVIC_EncodePriority>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4619      	mov	r1, r3
 8003600:	2019      	movs	r0, #25
 8003602:	f7fe fd05 	bl	8002010 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003606:	2019      	movs	r0, #25
 8003608:	f7fe fce4 	bl	8001fd4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 800360c:	2301      	movs	r3, #1
 800360e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 41999;
 8003614:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8003618:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4805      	ldr	r0, [pc, #20]	@ (8003638 <MX_TIM10_Init+0x68>)
 8003624:	f006 f9a0 	bl	8009968 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM10);
 8003628:	4803      	ldr	r0, [pc, #12]	@ (8003638 <MX_TIM10_Init+0x68>)
 800362a:	f7fe fd5e 	bl	80020ea <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40014400 	.word	0x40014400

0800363c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b091      	sub	sp, #68	@ 0x44
 8003640:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	611a      	str	r2, [r3, #16]
 8003652:	615a      	str	r2, [r3, #20]
 8003654:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
 8003664:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003666:	2010      	movs	r0, #16
 8003668:	f7fe fed6 	bl	8002418 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800366c:	2001      	movs	r0, #1
 800366e:	f7fe fea3 	bl	80023b8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8003672:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003676:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003678:	2302      	movs	r3, #2
 800367a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800367c:	2303      	movs	r3, #3
 800367e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003688:	2307      	movs	r3, #7
 800368a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	1d3b      	adds	r3, r7, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4837      	ldr	r0, [pc, #220]	@ (8003770 <MX_USART1_UART_Init+0x134>)
 8003692:	f005 ff4a 	bl	800952a <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 8003696:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800369a:	2107      	movs	r1, #7
 800369c:	4835      	ldr	r0, [pc, #212]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 800369e:	f7ff f833 	bl	8002708 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80036a2:	2240      	movs	r2, #64	@ 0x40
 80036a4:	2107      	movs	r1, #7
 80036a6:	4833      	ldr	r0, [pc, #204]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036a8:	f7fe ff0e 	bl	80024c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2107      	movs	r1, #7
 80036b0:	4830      	ldr	r0, [pc, #192]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036b2:	f7fe ffe1 	bl	8002678 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2107      	movs	r1, #7
 80036ba:	482e      	ldr	r0, [pc, #184]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036bc:	f7fe ff28 	bl	8002510 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2107      	movs	r1, #7
 80036c4:	482b      	ldr	r0, [pc, #172]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036c6:	f7fe ff47 	bl	8002558 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 80036ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ce:	2107      	movs	r1, #7
 80036d0:	4828      	ldr	r0, [pc, #160]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036d2:	f7fe ff65 	bl	80025a0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2107      	movs	r1, #7
 80036da:	4826      	ldr	r0, [pc, #152]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036dc:	f7fe ff84 	bl	80025e8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2107      	movs	r1, #7
 80036e4:	4823      	ldr	r0, [pc, #140]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036e6:	f7fe ffa3 	bl	8002630 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 80036ea:	2107      	movs	r1, #7
 80036ec:	4821      	ldr	r0, [pc, #132]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 80036ee:	f7ff f82f 	bl	8002750 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80036f2:	f7fe fc61 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2200      	movs	r2, #0
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe fcb1 	bl	8002064 <NVIC_EncodePriority>
 8003702:	4603      	mov	r3, r0
 8003704:	4619      	mov	r1, r3
 8003706:	2025      	movs	r0, #37	@ 0x25
 8003708:	f7fe fc82 	bl	8002010 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800370c:	2025      	movs	r0, #37	@ 0x25
 800370e:	f7fe fc61 	bl	8001fd4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003712:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003716:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003724:	230c      	movs	r3, #12
 8003726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003728:	2300      	movs	r3, #0
 800372a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	4810      	ldr	r0, [pc, #64]	@ (8003778 <MX_USART1_UART_Init+0x13c>)
 8003738:	f006 fdc6 	bl	800a2c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800373c:	480e      	ldr	r0, [pc, #56]	@ (8003778 <MX_USART1_UART_Init+0x13c>)
 800373e:	f7fe fdd2 	bl	80022e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003742:	480d      	ldr	r0, [pc, #52]	@ (8003778 <MX_USART1_UART_Init+0x13c>)
 8003744:	f7fe fdbf 	bl	80022c6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_7, (uint32_t)&data_to_pc, LL_USART_DMA_GetRegAddr(USART1), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003748:	4c0c      	ldr	r4, [pc, #48]	@ (800377c <MX_USART1_UART_Init+0x140>)
 800374a:	480b      	ldr	r0, [pc, #44]	@ (8003778 <MX_USART1_UART_Init+0x13c>)
 800374c:	f7fe fe27 	bl	800239e <LL_USART_DMA_GetRegAddr>
 8003750:	4603      	mov	r3, r0
 8003752:	2240      	movs	r2, #64	@ 0x40
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	4622      	mov	r2, r4
 8003758:	2107      	movs	r1, #7
 800375a:	4806      	ldr	r0, [pc, #24]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 800375c:	f7ff f818 	bl	8002790 <LL_DMA_ConfigAddresses>
  // Enable transmit completion interrupt.
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_7);
 8003760:	2107      	movs	r1, #7
 8003762:	4804      	ldr	r0, [pc, #16]	@ (8003774 <MX_USART1_UART_Init+0x138>)
 8003764:	f7ff f850 	bl	8002808 <LL_DMA_EnableIT_TC>
  /* USER CODE END USART1_Init 2 */

}
 8003768:	bf00      	nop
 800376a:	373c      	adds	r7, #60	@ 0x3c
 800376c:	46bd      	mov	sp, r7
 800376e:	bd90      	pop	{r4, r7, pc}
 8003770:	40020000 	.word	0x40020000
 8003774:	40026400 	.word	0x40026400
 8003778:	40011000 	.word	0x40011000
 800377c:	20000540 	.word	0x20000540

08003780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003784:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 8003786:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <MX_USART2_UART_Init+0x50>)
 8003788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 800378c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003792:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 800379a:	2200      	movs	r2, #0
 800379c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037a4:	4b09      	ldr	r3, [pc, #36]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037a6:	220c      	movs	r2, #12
 80037a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037aa:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037b6:	4805      	ldr	r0, [pc, #20]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037b8:	f004 fd3a 	bl	8008230 <HAL_UART_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037c2:	f000 f923 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000450 	.word	0x20000450
 80037d0:	40004400 	.word	0x40004400

080037d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80037d8:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <MX_USART6_UART_Init+0x50>)
 80037dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 80037e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80037e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80037f8:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 80037fa:	220c      	movs	r2, #12
 80037fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800380a:	4805      	ldr	r0, [pc, #20]	@ (8003820 <MX_USART6_UART_Init+0x4c>)
 800380c:	f004 fd10 	bl	8008230 <HAL_UART_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003816:	f000 f8f9 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000494 	.word	0x20000494
 8003824:	40011400 	.word	0x40011400

08003828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	4b14      	ldr	r3, [pc, #80]	@ (8003884 <MX_DMA_Init+0x5c>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	4a13      	ldr	r2, [pc, #76]	@ (8003884 <MX_DMA_Init+0x5c>)
 8003838:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800383c:	6313      	str	r3, [r2, #48]	@ 0x30
 800383e:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <MX_DMA_Init+0x5c>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800384a:	2200      	movs	r2, #0
 800384c:	2100      	movs	r1, #0
 800384e:	2038      	movs	r0, #56	@ 0x38
 8003850:	f001 fe5d 	bl	800550e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003854:	2038      	movs	r0, #56	@ 0x38
 8003856:	f001 fe76 	bl	8005546 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800385a:	f7fe fbad 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 800385e:	4603      	mov	r3, r0
 8003860:	2200      	movs	r2, #0
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fbfd 	bl	8002064 <NVIC_EncodePriority>
 800386a:	4603      	mov	r3, r0
 800386c:	4619      	mov	r1, r3
 800386e:	2046      	movs	r0, #70	@ 0x46
 8003870:	f7fe fbce 	bl	8002010 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003874:	2046      	movs	r0, #70	@ 0x46
 8003876:	f7fe fbad 	bl	8001fd4 <__NVIC_EnableIRQ>

}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800

08003888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	@ 0x28
 800388c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	f107 0314 	add.w	r3, r7, #20
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	4a25      	ldr	r2, [pc, #148]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ca:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	4b1f      	ldr	r3, [pc, #124]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	4a1e      	ldr	r2, [pc, #120]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <MX_GPIO_Init+0xd0>)
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	6313      	str	r3, [r2, #48]	@ 0x30
 8003902:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <MX_GPIO_Init+0xd0>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800390e:	2200      	movs	r2, #0
 8003910:	2120      	movs	r1, #32
 8003912:	4812      	ldr	r0, [pc, #72]	@ (800395c <MX_GPIO_Init+0xd4>)
 8003914:	f002 fbb8 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800391c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800391e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003928:	f107 0314 	add.w	r3, r7, #20
 800392c:	4619      	mov	r1, r3
 800392e:	480c      	ldr	r0, [pc, #48]	@ (8003960 <MX_GPIO_Init+0xd8>)
 8003930:	f002 fa26 	bl	8005d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003934:	2320      	movs	r3, #32
 8003936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003938:	2301      	movs	r3, #1
 800393a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003940:	2300      	movs	r3, #0
 8003942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4619      	mov	r1, r3
 800394a:	4804      	ldr	r0, [pc, #16]	@ (800395c <MX_GPIO_Init+0xd4>)
 800394c:	f002 fa18 	bl	8005d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003950:	bf00      	nop
 8003952:	3728      	adds	r7, #40	@ 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	40020000 	.word	0x40020000
 8003960:	40020800 	.word	0x40020800

08003964 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
	//int DataIdx;

	HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	b29a      	uxth	r2, r3
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4804      	ldr	r0, [pc, #16]	@ (800398c <_write+0x28>)
 800397c:	f004 fca5 	bl	80082ca <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		ITM_SendChar(*ptr++);
	}
	*/
	return len;
 8003980:	687b      	ldr	r3, [r7, #4]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000450 	.word	0x20000450

08003990 <DMA_TransmitData>:

void DMA_TransmitData()
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0

  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_7);
 8003994:	2107      	movs	r1, #7
 8003996:	4808      	ldr	r0, [pc, #32]	@ (80039b8 <DMA_TransmitData+0x28>)
 8003998:	f7fe fd76 	bl	8002488 <LL_DMA_DisableStream>

  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_7, sizeof(data_to_pc));
 800399c:	222e      	movs	r2, #46	@ 0x2e
 800399e:	2107      	movs	r1, #7
 80039a0:	4805      	ldr	r0, [pc, #20]	@ (80039b8 <DMA_TransmitData+0x28>)
 80039a2:	f7fe fe8d 	bl	80026c0 <LL_DMA_SetDataLength>

  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_7);
 80039a6:	2107      	movs	r1, #7
 80039a8:	4803      	ldr	r0, [pc, #12]	@ (80039b8 <DMA_TransmitData+0x28>)
 80039aa:	f7fe fd4d 	bl	8002448 <LL_DMA_EnableStream>

  LL_USART_EnableDMAReq_TX(USART1);
 80039ae:	4803      	ldr	r0, [pc, #12]	@ (80039bc <DMA_TransmitData+0x2c>)
 80039b0:	f7fe fcd2 	bl	8002358 <LL_USART_EnableDMAReq_TX>
}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40026400 	.word	0x40026400
 80039bc:	40011000 	.word	0x40011000

080039c0 <ESC_Calibration>:


void ESC_Calibration(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
	  TIM3->CCR1 = 100;
 80039c4:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <ESC_Calibration+0x48>)
 80039c6:	2264      	movs	r2, #100	@ 0x64
 80039c8:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 100;
 80039ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <ESC_Calibration+0x48>)
 80039cc:	2264      	movs	r2, #100	@ 0x64
 80039ce:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM3->CCR3 = 100;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003a08 <ESC_Calibration+0x48>)
 80039d2:	2264      	movs	r2, #100	@ 0x64
 80039d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM3->CCR4 = 100;
 80039d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <ESC_Calibration+0x48>)
 80039d8:	2264      	movs	r2, #100	@ 0x64
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(3000);
 80039dc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80039e0:	f001 f8a4 	bl	8004b2c <HAL_Delay>
	  TIM3->CCR1 = 50;
 80039e4:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <ESC_Calibration+0x48>)
 80039e6:	2232      	movs	r2, #50	@ 0x32
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 50;
 80039ea:	4b07      	ldr	r3, [pc, #28]	@ (8003a08 <ESC_Calibration+0x48>)
 80039ec:	2232      	movs	r2, #50	@ 0x32
 80039ee:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM3->CCR3 = 50;
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <ESC_Calibration+0x48>)
 80039f2:	2232      	movs	r2, #50	@ 0x32
 80039f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM3->CCR4 = 50;
 80039f6:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <ESC_Calibration+0x48>)
 80039f8:	2232      	movs	r2, #50	@ 0x32
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay (2000);
 80039fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a00:	f001 f894 	bl	8004b2c <HAL_Delay>
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40000400 	.word	0x40000400

08003a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a10:	b672      	cpsid	i
}
 8003a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <Error_Handler+0x8>

08003a18 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a24:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a28:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	649a      	str	r2, [r3, #72]	@ 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003a70:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003c70 <Double_Roll_Pitch_PID_Calculation+0x258>
 8003a74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003a88:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003c74 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8003a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	dd03      	ble.n	8003a9e <Double_Roll_Pitch_PID_Calculation+0x86>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a77      	ldr	r2, [pc, #476]	@ (8003c78 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a9c:	e00c      	b.n	8003ab8 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003aa4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8003c7c <Double_Roll_Pitch_PID_Calculation+0x264>
 8003aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab0:	d502      	bpl.n	8003ab8 <Double_Roll_Pitch_PID_Calculation+0xa0>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a72      	ldr	r2, [pc, #456]	@ (8003c80 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 8003ace:	edd7 7a00 	vldr	s15, [r7]
 8003ad2:	eef1 7a67 	vneg.f32	s15, s15
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003ae2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003c84 <Double_Roll_Pitch_PID_Calculation+0x26c>
 8003ae6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003af0:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8003c88 <Double_Roll_Pitch_PID_Calculation+0x270>
 8003af4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8003b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	/****************************************************************************************/

	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	ed93 7a07 	vldr	s14, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b7e:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8003c70 <Double_Roll_Pitch_PID_Calculation+0x258>
 8003b82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003b96:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003c74 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8003b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	dd03      	ble.n	8003bac <Double_Roll_Pitch_PID_Calculation+0x194>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	@ (8003c78 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54
 8003baa:	e00c      	b.n	8003bc6 <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003bb2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003c7c <Double_Roll_Pitch_PID_Calculation+0x264>
 8003bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	d502      	bpl.n	8003bc6 <Double_Roll_Pitch_PID_Calculation+0x1ae>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c80 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8003bc4:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	ed93 7a07 	vldr	s14, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	ed93 7a04 	vldr	s14, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bec:	eeb1 7a67 	vneg.f32	s14, s15
 8003bf0:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8003c70 <Double_Roll_Pitch_PID_Calculation+0x258>
 8003bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003c0c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003c10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c1a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003c1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
#endif

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/****************************************************************************************/
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	3a83126f 	.word	0x3a83126f
 8003c74:	43fa0000 	.word	0x43fa0000
 8003c78:	43fa0000 	.word	0x43fa0000
 8003c7c:	c3fa0000 	.word	0xc3fa0000
 8003c80:	c3fa0000 	.word	0xc3fa0000
 8003c84:	3ecccccd 	.word	0x3ecccccd
 8003c88:	3f19999a 	.word	0x3f19999a

08003c8c <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c98:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c9c:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003cc8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003db0 <Single_Yaw_Heading_PID_Calculation+0x124>
 8003ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd4:	dd0a      	ble.n	8003cec <Single_Yaw_Heading_PID_Calculation+0x60>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003cdc:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003db4 <Single_Yaw_Heading_PID_Calculation+0x128>
 8003ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	edc3 7a06 	vstr	s15, [r3, #24]
 8003cea:	e013      	b.n	8003d14 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	edd3 7a06 	vldr	s15, [r3, #24]
 8003cf2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003db8 <Single_Yaw_Heading_PID_Calculation+0x12c>
 8003cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	d509      	bpl.n	8003d14 <Single_Yaw_Heading_PID_Calculation+0x88>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d06:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003db4 <Single_Yaw_Heading_PID_Calculation+0x128>
 8003d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	edc3 7a06 	vstr	s15, [r3, #24]

	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	ed93 7a06 	vldr	s14, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d36:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003dbc <Single_Yaw_Heading_PID_Calculation+0x130>
 8003d3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 8003d5e:	edd7 7a00 	vldr	s15, [r7]
 8003d62:	eef1 7a67 	vneg.f32	s15, s15
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/***************************************************************/
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	43340000 	.word	0x43340000
 8003db4:	43b40000 	.word	0x43b40000
 8003db8:	c3340000 	.word	0xc3340000
 8003dbc:	3a83126f 	.word	0x3a83126f

08003dc0 <parseData>:
#include <string.h>

RC_t rc;
IMU imu;

void parseData(unsigned char *receivedData) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b090      	sub	sp, #64	@ 0x40
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	float values[MAX_VALUES];

	char *token;
	int i = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38

	  // Use strtok to split the string based on commas
	  token = strtok(receivedData, ",");
 8003dcc:	49b5      	ldr	r1, [pc, #724]	@ (80040a4 <parseData+0x2e4>)
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f007 fb52 	bl	800b478 <strtok>
 8003dd4:	63f8      	str	r0, [r7, #60]	@ 0x3c

	  // Loop until there are no more tokens
	  while (token != NULL) {
 8003dd6:	e018      	b.n	8003e0a <parseData+0x4a>
	    // Convert the token string to an integer using atoi
	    values[i] = atoi(token);
 8003dd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003dda:	f006 fad9 	bl	800a390 <atoi>
 8003dde:	ee07 0a90 	vmov	s15, r0
 8003de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	3340      	adds	r3, #64	@ 0x40
 8003dec:	443b      	add	r3, r7
 8003dee:	3b34      	subs	r3, #52	@ 0x34
 8003df0:	edc3 7a00 	vstr	s15, [r3]
	     // printf("Error parsing value: %s\n", token);
	      //parse_error_flag = 1;
	      //return ; // Exit with error code
	   // }

	    i++;
 8003df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df6:	3301      	adds	r3, #1
 8003df8:	63bb      	str	r3, [r7, #56]	@ 0x38
	    token = strtok(NULL, ",");
 8003dfa:	49aa      	ldr	r1, [pc, #680]	@ (80040a4 <parseData+0x2e4>)
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f007 fb3b 	bl	800b478 <strtok>
 8003e02:	63f8      	str	r0, [r7, #60]	@ 0x3c


	    //Ensure we don't exceed the expected number of values
	    if (i == MAX_VALUES) {
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	2b0b      	cmp	r3, #11
 8003e08:	d003      	beq.n	8003e12 <parseData+0x52>
	  while (token != NULL) {
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e3      	bne.n	8003dd8 <parseData+0x18>
 8003e10:	e000      	b.n	8003e14 <parseData+0x54>
	    	//printf("Warning: More values than expected in the string\n");
	      break;
 8003e12:	bf00      	nop
	   // printf("Warning: Fewer values than expected in the string\n");
	    //parse_error_flag =1;
	  //}

		// Now you can access individual values using the values array
		if (values[1] == RC_CMD){
 8003e14:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e20:	d134      	bne.n	8003e8c <parseData+0xcc>
			rc.LH = values[3];
 8003e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e2a:	ee17 2a90 	vmov	r2, s15
 8003e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80040a8 <parseData+0x2e8>)
 8003e30:	60da      	str	r2, [r3, #12]
			rc.LV = values[6];
 8003e32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e3a:	ee17 2a90 	vmov	r2, s15
 8003e3e:	4b9a      	ldr	r3, [pc, #616]	@ (80040a8 <parseData+0x2e8>)
 8003e40:	609a      	str	r2, [r3, #8]
			rc.RH = values[5];
 8003e42:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e4a:	ee17 2a90 	vmov	r2, s15
 8003e4e:	4b96      	ldr	r3, [pc, #600]	@ (80040a8 <parseData+0x2e8>)
 8003e50:	601a      	str	r2, [r3, #0]
			rc.RV = values[4];
 8003e52:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e5a:	ee17 2a90 	vmov	r2, s15
 8003e5e:	4b92      	ldr	r3, [pc, #584]	@ (80040a8 <parseData+0x2e8>)
 8003e60:	605a      	str	r2, [r3, #4]
			rc.SwL = values[7];
 8003e62:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e6a:	edc7 7a00 	vstr	s15, [r7]
 8003e6e:	783b      	ldrb	r3, [r7, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b8d      	ldr	r3, [pc, #564]	@ (80040a8 <parseData+0x2e8>)
 8003e74:	741a      	strb	r2, [r3, #16]
			rc.SwR = values[8];
 8003e76:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7e:	edc7 7a00 	vstr	s15, [r7]
 8003e82:	783b      	ldrb	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b88      	ldr	r3, [pc, #544]	@ (80040a8 <parseData+0x2e8>)
 8003e88:	745a      	strb	r2, [r3, #17]
		  imu.LACCx = values[8];
		  imu.LACCy = values[9];
		  imu.LACCz = values[10];

	  }
}
 8003e8a:	e16e      	b.n	800416a <parseData+0x3aa>
		else if(values[1] == PC_CMD)
 8003e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e94:	eef4 7a47 	vcmp.f32	s15, s14
 8003e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9c:	f040 8114 	bne.w	80040c8 <parseData+0x308>
			if (values[2] == YAW_ID)
 8003ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ea4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003ea8:	eef4 7a47 	vcmp.f32	s15, s14
 8003eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb0:	d136      	bne.n	8003f20 <parseData+0x160>
				yaw_heading.kp = values[3]/1000.0;
 8003eb2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003eb6:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80040ac <parseData+0x2ec>
 8003eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80040b0 <parseData+0x2f0>)
 8003ec0:	edc3 7a00 	vstr	s15, [r3]
				yaw_heading.ki = values[4]/1000.0;
 8003ec4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ec8:	eddf 6a78 	vldr	s13, [pc, #480]	@ 80040ac <parseData+0x2ec>
 8003ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed0:	4b77      	ldr	r3, [pc, #476]	@ (80040b0 <parseData+0x2f0>)
 8003ed2:	edc3 7a01 	vstr	s15, [r3, #4]
				yaw_heading.kd = values[5]/1000.0;
 8003ed6:	ed97 7a08 	vldr	s14, [r7, #32]
 8003eda:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80040ac <parseData+0x2ec>
 8003ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee2:	4b73      	ldr	r3, [pc, #460]	@ (80040b0 <parseData+0x2f0>)
 8003ee4:	edc3 7a02 	vstr	s15, [r3, #8]
				yaw_rate.kp = values[6]/1000.0;
 8003ee8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003eec:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040ac <parseData+0x2ec>
 8003ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80040b4 <parseData+0x2f4>)
 8003ef6:	edc3 7a00 	vstr	s15, [r3]
				yaw_rate.ki = values[7]/1000.0;
 8003efa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003efe:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80040ac <parseData+0x2ec>
 8003f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f06:	4b6b      	ldr	r3, [pc, #428]	@ (80040b4 <parseData+0x2f4>)
 8003f08:	edc3 7a01 	vstr	s15, [r3, #4]
				yaw_rate.kd = values[8]/1000.0;
 8003f0c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f10:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80040ac <parseData+0x2ec>
 8003f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f18:	4b66      	ldr	r3, [pc, #408]	@ (80040b4 <parseData+0x2f4>)
 8003f1a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003f1e:	e124      	b.n	800416a <parseData+0x3aa>
			else if (values[2] == ROLL_ID)
 8003f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f24:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003f28:	eef4 7a47 	vcmp.f32	s15, s14
 8003f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f30:	d136      	bne.n	8003fa0 <parseData+0x1e0>
				roll.in.kp = values[3]/1000.0;
 8003f32:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f36:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80040ac <parseData+0x2ec>
 8003f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f3e:	4b5e      	ldr	r3, [pc, #376]	@ (80040b8 <parseData+0x2f8>)
 8003f40:	edc3 7a00 	vstr	s15, [r3]
				roll.in.ki = values[4]/1000.0;
 8003f44:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f48:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80040ac <parseData+0x2ec>
 8003f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f50:	4b59      	ldr	r3, [pc, #356]	@ (80040b8 <parseData+0x2f8>)
 8003f52:	edc3 7a01 	vstr	s15, [r3, #4]
				roll.in.kd = values[5]/1000.0;
 8003f56:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f5a:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80040ac <parseData+0x2ec>
 8003f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f62:	4b55      	ldr	r3, [pc, #340]	@ (80040b8 <parseData+0x2f8>)
 8003f64:	edc3 7a02 	vstr	s15, [r3, #8]
				roll.out.kp = values[6]/1000.0;
 8003f68:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003f6c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040ac <parseData+0x2ec>
 8003f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f74:	4b50      	ldr	r3, [pc, #320]	@ (80040b8 <parseData+0x2f8>)
 8003f76:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
				roll.out.ki = values[7]/1000.0;
 8003f7a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f7e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80040ac <parseData+0x2ec>
 8003f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f86:	4b4c      	ldr	r3, [pc, #304]	@ (80040b8 <parseData+0x2f8>)
 8003f88:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				roll.out.kd = values[8]/1000.0;
 8003f8c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f90:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80040ac <parseData+0x2ec>
 8003f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f98:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <parseData+0x2f8>)
 8003f9a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 8003f9e:	e0e4      	b.n	800416a <parseData+0x3aa>
			else if (values[2] == PITCH_ID)
 8003fa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fa8:	eef4 7a47 	vcmp.f32	s15, s14
 8003fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb0:	d136      	bne.n	8004020 <parseData+0x260>
				pitch.in.kp = values[3]/1000.0;
 8003fb2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040ac <parseData+0x2ec>
 8003fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80040bc <parseData+0x2fc>)
 8003fc0:	edc3 7a00 	vstr	s15, [r3]
				pitch.in.ki = values[4]/1000.0;
 8003fc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fc8:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80040ac <parseData+0x2ec>
 8003fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80040bc <parseData+0x2fc>)
 8003fd2:	edc3 7a01 	vstr	s15, [r3, #4]
				pitch.in.kd = values[5]/1000.0;
 8003fd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8003fda:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80040ac <parseData+0x2ec>
 8003fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fe2:	4b36      	ldr	r3, [pc, #216]	@ (80040bc <parseData+0x2fc>)
 8003fe4:	edc3 7a02 	vstr	s15, [r3, #8]
				pitch.out.kp = values[6]/1000.0;
 8003fe8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003fec:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80040ac <parseData+0x2ec>
 8003ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ff4:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <parseData+0x2fc>)
 8003ff6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
				pitch.out.ki = values[7]/1000.0;
 8003ffa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003ffe:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80040ac <parseData+0x2ec>
 8004002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004006:	4b2d      	ldr	r3, [pc, #180]	@ (80040bc <parseData+0x2fc>)
 8004008:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				pitch.out.kd = values[8]/1000.0;
 800400c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004010:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80040ac <parseData+0x2ec>
 8004014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004018:	4b28      	ldr	r3, [pc, #160]	@ (80040bc <parseData+0x2fc>)
 800401a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 800401e:	e0a4      	b.n	800416a <parseData+0x3aa>
			else if (values[2] == ALT_ID)
 8004020:	edd7 7a05 	vldr	s15, [r7, #20]
 8004024:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004028:	eef4 7a47 	vcmp.f32	s15, s14
 800402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004030:	f040 809b 	bne.w	800416a <parseData+0x3aa>
				altitude_heading.kp = values[3]/1000.0;
 8004034:	ed97 7a06 	vldr	s14, [r7, #24]
 8004038:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80040ac <parseData+0x2ec>
 800403c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004040:	4b1f      	ldr	r3, [pc, #124]	@ (80040c0 <parseData+0x300>)
 8004042:	edc3 7a00 	vstr	s15, [r3]
				altitude_heading.ki = values[4]/1000.0;
 8004046:	ed97 7a07 	vldr	s14, [r7, #28]
 800404a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80040ac <parseData+0x2ec>
 800404e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004052:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <parseData+0x300>)
 8004054:	edc3 7a01 	vstr	s15, [r3, #4]
				altitude_heading.kd = values[5]/1000.0;
 8004058:	ed97 7a08 	vldr	s14, [r7, #32]
 800405c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80040ac <parseData+0x2ec>
 8004060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004064:	4b16      	ldr	r3, [pc, #88]	@ (80040c0 <parseData+0x300>)
 8004066:	edc3 7a02 	vstr	s15, [r3, #8]
				altitude_rate.kp = values[6]/1000.0;
 800406a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800406e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80040ac <parseData+0x2ec>
 8004072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <parseData+0x304>)
 8004078:	edc3 7a00 	vstr	s15, [r3]
				altitude_rate.ki = values[7]/1000.0;
 800407c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004080:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80040ac <parseData+0x2ec>
 8004084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004088:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <parseData+0x304>)
 800408a:	edc3 7a01 	vstr	s15, [r3, #4]
				altitude_rate.kd = values[8]/1000.0;
 800408e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004092:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80040ac <parseData+0x2ec>
 8004096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800409a:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <parseData+0x304>)
 800409c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80040a0:	e063      	b.n	800416a <parseData+0x3aa>
 80040a2:	bf00      	nop
 80040a4:	0800fd5c 	.word	0x0800fd5c
 80040a8:	20000758 	.word	0x20000758
 80040ac:	447a0000 	.word	0x447a0000
 80040b0:	200006e8 	.word	0x200006e8
 80040b4:	20000720 	.word	0x20000720
 80040b8:	20000598 	.word	0x20000598
 80040bc:	20000608 	.word	0x20000608
 80040c0:	20000678 	.word	0x20000678
 80040c4:	200006b0 	.word	0x200006b0
	  else if(values[1] == PC_ORR)
 80040c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80040cc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80040d0:	eef4 7a47 	vcmp.f32	s15, s14
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	d147      	bne.n	800416a <parseData+0x3aa>
		  imu.OrrX = values[5];
 80040da:	edd7 7a08 	vldr	s15, [r7, #32]
 80040de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e2:	ee17 2a90 	vmov	r2, s15
 80040e6:	4b23      	ldr	r3, [pc, #140]	@ (8004174 <parseData+0x3b4>)
 80040e8:	601a      	str	r2, [r3, #0]
		  imu.OrrY = values[6];
 80040ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040f2:	ee17 2a90 	vmov	r2, s15
 80040f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004174 <parseData+0x3b4>)
 80040f8:	605a      	str	r2, [r3, #4]
		  imu.OrrZ = values[7];
 80040fa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004102:	ee17 2a90 	vmov	r2, s15
 8004106:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <parseData+0x3b4>)
 8004108:	609a      	str	r2, [r3, #8]
		  imu.GyroZ = values[4];
 800410a:	edd7 7a07 	vldr	s15, [r7, #28]
 800410e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004112:	ee17 2a90 	vmov	r2, s15
 8004116:	4b17      	ldr	r3, [pc, #92]	@ (8004174 <parseData+0x3b4>)
 8004118:	60da      	str	r2, [r3, #12]
		  imu.GyroY = values[3];
 800411a:	edd7 7a06 	vldr	s15, [r7, #24]
 800411e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004122:	ee17 2a90 	vmov	r2, s15
 8004126:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <parseData+0x3b4>)
 8004128:	611a      	str	r2, [r3, #16]
		  imu.GyroX = values[2];
 800412a:	edd7 7a05 	vldr	s15, [r7, #20]
 800412e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004132:	ee17 2a90 	vmov	r2, s15
 8004136:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <parseData+0x3b4>)
 8004138:	615a      	str	r2, [r3, #20]
		  imu.LACCx = values[8];
 800413a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800413e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004142:	ee17 2a90 	vmov	r2, s15
 8004146:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <parseData+0x3b4>)
 8004148:	619a      	str	r2, [r3, #24]
		  imu.LACCy = values[9];
 800414a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800414e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004152:	ee17 2a90 	vmov	r2, s15
 8004156:	4b07      	ldr	r3, [pc, #28]	@ (8004174 <parseData+0x3b4>)
 8004158:	61da      	str	r2, [r3, #28]
		  imu.LACCz = values[10];
 800415a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800415e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004162:	ee17 2a90 	vmov	r2, s15
 8004166:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <parseData+0x3b4>)
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	3740      	adds	r7, #64	@ 0x40
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	2000076c 	.word	0x2000076c

08004178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <HAL_MspInit+0x4c>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	4a0f      	ldr	r2, [pc, #60]	@ (80041c4 <HAL_MspInit+0x4c>)
 8004188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800418c:	6453      	str	r3, [r2, #68]	@ 0x44
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <HAL_MspInit+0x4c>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <HAL_MspInit+0x4c>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	4a08      	ldr	r2, [pc, #32]	@ (80041c4 <HAL_MspInit+0x4c>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <HAL_MspInit+0x4c>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80041b6:	2007      	movs	r0, #7
 80041b8:	f001 f99e 	bl	80054f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800

080041c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	@ 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2e      	ldr	r2, [pc, #184]	@ (80042a0 <HAL_ADC_MspInit+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d156      	bne.n	8004298 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	4b2d      	ldr	r3, [pc, #180]	@ (80042a4 <HAL_ADC_MspInit+0xdc>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <HAL_ADC_MspInit+0xdc>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041fa:	4b2a      	ldr	r3, [pc, #168]	@ (80042a4 <HAL_ADC_MspInit+0xdc>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	4b26      	ldr	r3, [pc, #152]	@ (80042a4 <HAL_ADC_MspInit+0xdc>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	4a25      	ldr	r2, [pc, #148]	@ (80042a4 <HAL_ADC_MspInit+0xdc>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	6313      	str	r3, [r2, #48]	@ 0x30
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <HAL_ADC_MspInit+0xdc>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004222:	2301      	movs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004226:	2303      	movs	r3, #3
 8004228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	4619      	mov	r1, r3
 8004234:	481c      	ldr	r0, [pc, #112]	@ (80042a8 <HAL_ADC_MspInit+0xe0>)
 8004236:	f001 fda3 	bl	8005d80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800423a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 800423c:	4a1c      	ldr	r2, [pc, #112]	@ (80042b0 <HAL_ADC_MspInit+0xe8>)
 800423e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004240:	4b1a      	ldr	r3, [pc, #104]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004246:	4b19      	ldr	r3, [pc, #100]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004248:	2200      	movs	r2, #0
 800424a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800424c:	4b17      	ldr	r3, [pc, #92]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 800424e:	2200      	movs	r2, #0
 8004250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004252:	4b16      	ldr	r3, [pc, #88]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004254:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004258:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800425a:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 800425c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004260:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004262:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004264:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 800426c:	2200      	movs	r2, #0
 800426e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004270:	4b0e      	ldr	r3, [pc, #56]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004272:	2200      	movs	r2, #0
 8004274:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800427c:	480b      	ldr	r0, [pc, #44]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 800427e:	f001 f97d 	bl	800557c <HAL_DMA_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8004288:	f7ff fbc0 	bl	8003a0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a07      	ldr	r2, [pc, #28]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
 8004292:	4a06      	ldr	r2, [pc, #24]	@ (80042ac <HAL_ADC_MspInit+0xe4>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004298:	bf00      	nop
 800429a:	3728      	adds	r7, #40	@ 0x28
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40012000 	.word	0x40012000
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40020800 	.word	0x40020800
 80042ac:	20000300 	.word	0x20000300
 80042b0:	40026410 	.word	0x40026410

080042b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	@ 0x30
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a42      	ldr	r2, [pc, #264]	@ (80043dc <HAL_I2C_MspInit+0x128>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d12d      	bne.n	8004332 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	4a40      	ldr	r2, [pc, #256]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e6:	4b3e      	ldr	r3, [pc, #248]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80042f2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80042f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f8:	2312      	movs	r3, #18
 80042fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004300:	2303      	movs	r3, #3
 8004302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004304:	2304      	movs	r3, #4
 8004306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004308:	f107 031c 	add.w	r3, r7, #28
 800430c:	4619      	mov	r1, r3
 800430e:	4835      	ldr	r0, [pc, #212]	@ (80043e4 <HAL_I2C_MspInit+0x130>)
 8004310:	f001 fd36 	bl	8005d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	4b31      	ldr	r3, [pc, #196]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	4a30      	ldr	r2, [pc, #192]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 800431e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004322:	6413      	str	r3, [r2, #64]	@ 0x40
 8004324:	4b2e      	ldr	r3, [pc, #184]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004330:	e050      	b.n	80043d4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2c      	ldr	r2, [pc, #176]	@ (80043e8 <HAL_I2C_MspInit+0x134>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d14b      	bne.n	80043d4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	4a26      	ldr	r2, [pc, #152]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6313      	str	r3, [r2, #48]	@ 0x30
 800434c:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6313      	str	r3, [r2, #48]	@ 0x30
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800437a:	2312      	movs	r3, #18
 800437c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004382:	2303      	movs	r3, #3
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004386:	2304      	movs	r3, #4
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800438a:	f107 031c 	add.w	r3, r7, #28
 800438e:	4619      	mov	r1, r3
 8004390:	4816      	ldr	r0, [pc, #88]	@ (80043ec <HAL_I2C_MspInit+0x138>)
 8004392:	f001 fcf5 	bl	8005d80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800439a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800439c:	2312      	movs	r3, #18
 800439e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a4:	2303      	movs	r3, #3
 80043a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043a8:	2304      	movs	r3, #4
 80043aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ac:	f107 031c 	add.w	r3, r7, #28
 80043b0:	4619      	mov	r1, r3
 80043b2:	480f      	ldr	r0, [pc, #60]	@ (80043f0 <HAL_I2C_MspInit+0x13c>)
 80043b4:	f001 fce4 	bl	8005d80 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	4a07      	ldr	r2, [pc, #28]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 80043c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <HAL_I2C_MspInit+0x12c>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
}
 80043d4:	bf00      	nop
 80043d6:	3730      	adds	r7, #48	@ 0x30
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40005400 	.word	0x40005400
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40020400 	.word	0x40020400
 80043e8:	40005c00 	.word	0x40005c00
 80043ec:	40020800 	.word	0x40020800
 80043f0:	40020000 	.word	0x40020000

080043f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0b      	ldr	r2, [pc, #44]	@ (8004430 <HAL_TIM_PWM_MspInit+0x3c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10d      	bne.n	8004422 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <HAL_TIM_PWM_MspInit+0x40>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	4a09      	ldr	r2, [pc, #36]	@ (8004434 <HAL_TIM_PWM_MspInit+0x40>)
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	6413      	str	r3, [r2, #64]	@ 0x40
 8004416:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <HAL_TIM_PWM_MspInit+0x40>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40000400 	.word	0x40000400
 8004434:	40023800 	.word	0x40023800

08004438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a12      	ldr	r2, [pc, #72]	@ (80044a0 <HAL_TIM_MspPostInit+0x68>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d11d      	bne.n	8004496 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <HAL_TIM_MspPostInit+0x6c>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	4a10      	ldr	r2, [pc, #64]	@ (80044a4 <HAL_TIM_MspPostInit+0x6c>)
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	6313      	str	r3, [r2, #48]	@ 0x30
 800446a:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <HAL_TIM_MspPostInit+0x6c>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004476:	2333      	movs	r3, #51	@ 0x33
 8004478:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004486:	2302      	movs	r3, #2
 8004488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4619      	mov	r1, r3
 8004490:	4805      	ldr	r0, [pc, #20]	@ (80044a8 <HAL_TIM_MspPostInit+0x70>)
 8004492:	f001 fc75 	bl	8005d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40020400 	.word	0x40020400

080044ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	@ 0x30
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b4:	f107 031c 	add.w	r3, r7, #28
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a36      	ldr	r2, [pc, #216]	@ (80045a4 <HAL_UART_MspInit+0xf8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d12c      	bne.n	8004528 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	4b35      	ldr	r3, [pc, #212]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	4a34      	ldr	r2, [pc, #208]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 80044d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044de:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	4b2e      	ldr	r3, [pc, #184]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	4a2d      	ldr	r2, [pc, #180]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044fa:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004506:	230c      	movs	r3, #12
 8004508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004516:	2307      	movs	r3, #7
 8004518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451a:	f107 031c 	add.w	r3, r7, #28
 800451e:	4619      	mov	r1, r3
 8004520:	4822      	ldr	r0, [pc, #136]	@ (80045ac <HAL_UART_MspInit+0x100>)
 8004522:	f001 fc2d 	bl	8005d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004526:	e039      	b.n	800459c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a20      	ldr	r2, [pc, #128]	@ (80045b0 <HAL_UART_MspInit+0x104>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d134      	bne.n	800459c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	4a1b      	ldr	r2, [pc, #108]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	6453      	str	r3, [r2, #68]	@ 0x44
 8004542:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	4a14      	ldr	r2, [pc, #80]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6313      	str	r3, [r2, #48]	@ 0x30
 800455e:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_UART_MspInit+0xfc>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800456a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800456e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800457c:	2308      	movs	r3, #8
 800457e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	4619      	mov	r1, r3
 8004586:	4809      	ldr	r0, [pc, #36]	@ (80045ac <HAL_UART_MspInit+0x100>)
 8004588:	f001 fbfa 	bl	8005d80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800458c:	2200      	movs	r2, #0
 800458e:	2100      	movs	r1, #0
 8004590:	2047      	movs	r0, #71	@ 0x47
 8004592:	f000 ffbc 	bl	800550e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004596:	2047      	movs	r0, #71	@ 0x47
 8004598:	f000 ffd5 	bl	8005546 <HAL_NVIC_EnableIRQ>
}
 800459c:	bf00      	nop
 800459e:	3730      	adds	r7, #48	@ 0x30
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40004400 	.word	0x40004400
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40011400 	.word	0x40011400

080045b4 <LL_TIM_ClearFlag_UPDATE>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f06f 0201 	mvn.w	r2, #1
 80045c2:	611a      	str	r2, [r3, #16]
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_USART_IsActiveFlag_RXNE>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_USART_ClearFlag_RXNE>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f06f 0220 	mvn.w	r2, #32
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	b2db      	uxtb	r3, r3
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <LL_DMA_IsActiveFlag_TC7>:
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
} 
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_DMA_ClearFlag_TC7>:
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004688:	60da      	str	r2, [r3, #12]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <NMI_Handler+0x4>

0800469e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046a2:	bf00      	nop
 80046a4:	e7fd      	b.n	80046a2 <HardFault_Handler+0x4>

080046a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046a6:	b480      	push	{r7}
 80046a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046aa:	bf00      	nop
 80046ac:	e7fd      	b.n	80046aa <MemManage_Handler+0x4>

080046ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046ae:	b480      	push	{r7}
 80046b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <BusFault_Handler+0x4>

080046b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <UsageFault_Handler+0x4>

080046be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046ec:	f000 f9fe 	bl	8004aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	static unsigned char tim10_1ms_count = 0;
	static unsigned char tim10_20ms_count = 0;
	static unsigned char tim10_100ms_count = 0;
	static unsigned char tim10_1000ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM10))
 80046f8:	4820      	ldr	r0, [pc, #128]	@ (800477c <TIM1_UP_TIM10_IRQHandler+0x88>)
 80046fa:	f7ff ff69 	bl	80045d0 <LL_TIM_IsActiveFlag_UPDATE>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d038      	beq.n	8004776 <TIM1_UP_TIM10_IRQHandler+0x82>
	{
		LL_TIM_ClearFlag_UPDATE(TIM10);
 8004704:	481d      	ldr	r0, [pc, #116]	@ (800477c <TIM1_UP_TIM10_IRQHandler+0x88>)
 8004706:	f7ff ff55 	bl	80045b4 <LL_TIM_ClearFlag_UPDATE>

		tim10_1ms_count++;
 800470a:	4b1d      	ldr	r3, [pc, #116]	@ (8004780 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8004714:	701a      	strb	r2, [r3, #0]
		if(tim10_1ms_count == 1)
 8004716:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <TIM1_UP_TIM10_IRQHandler+0x36>
		{
			tim10_1ms_count = 0;
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
			tim10_1ms_flag = 1;
 8004724:	4b17      	ldr	r3, [pc, #92]	@ (8004784 <TIM1_UP_TIM10_IRQHandler+0x90>)
 8004726:	2201      	movs	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
		}

		tim10_20ms_count++;
 800472a:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <TIM1_UP_TIM10_IRQHandler+0x94>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b15      	ldr	r3, [pc, #84]	@ (8004788 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8004734:	701a      	strb	r2, [r3, #0]
		if(tim10_20ms_count == 20)
 8004736:	4b14      	ldr	r3, [pc, #80]	@ (8004788 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b14      	cmp	r3, #20
 800473c:	d105      	bne.n	800474a <TIM1_UP_TIM10_IRQHandler+0x56>
		{
			tim10_20ms_count = 0;
 800473e:	4b12      	ldr	r3, [pc, #72]	@ (8004788 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
			tim10_20ms_flag = 1;
 8004744:	4b11      	ldr	r3, [pc, #68]	@ (800478c <TIM1_UP_TIM10_IRQHandler+0x98>)
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
		}


		tim10_100ms_count++;
 800474a:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	3301      	adds	r3, #1
 8004750:	b2da      	uxtb	r2, r3
 8004752:	4b0f      	ldr	r3, [pc, #60]	@ (8004790 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8004754:	701a      	strb	r2, [r3, #0]
		if(tim10_100ms_count == 100)
 8004756:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b64      	cmp	r3, #100	@ 0x64
 800475c:	d105      	bne.n	800476a <TIM1_UP_TIM10_IRQHandler+0x76>
		{
			tim10_100ms_count = 0;
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
			tim10_100ms_flag = 1;
 8004764:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <TIM1_UP_TIM10_IRQHandler+0xa0>)
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
		}

		tim10_1000ms_count++;
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <TIM1_UP_TIM10_IRQHandler+0xa4>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	3301      	adds	r3, #1
 8004770:	b2da      	uxtb	r2, r3
 8004772:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <TIM1_UP_TIM10_IRQHandler+0xa4>)
 8004774:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40014400 	.word	0x40014400
 8004780:	200007cc 	.word	0x200007cc
 8004784:	200007ca 	.word	0x200007ca
 8004788:	200007cd 	.word	0x200007cd
 800478c:	200007c9 	.word	0x200007c9
 8004790:	200007ce 	.word	0x200007ce
 8004794:	200007cb 	.word	0x200007cb
 8004798:	200007cf 	.word	0x200007cf

0800479c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	static unsigned char cnt = 0;
		if(LL_USART_IsActiveFlag_RXNE(USART1))
 80047a0:	481e      	ldr	r0, [pc, #120]	@ (800481c <USART1_IRQHandler+0x80>)
 80047a2:	f7ff ff28 	bl	80045f6 <LL_USART_IsActiveFlag_RXNE>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d034      	beq.n	8004816 <USART1_IRQHandler+0x7a>
		{
			LL_USART_ClearFlag_RXNE(USART1);
 80047ac:	481b      	ldr	r0, [pc, #108]	@ (800481c <USART1_IRQHandler+0x80>)
 80047ae:	f7ff ff35 	bl	800461c <LL_USART_ClearFlag_RXNE>
			USART1_rx_data = LL_USART_ReceiveData8(USART1);
 80047b2:	481a      	ldr	r0, [pc, #104]	@ (800481c <USART1_IRQHandler+0x80>)
 80047b4:	f7ff ff40 	bl	8004638 <LL_USART_ReceiveData8>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	4b18      	ldr	r3, [pc, #96]	@ (8004820 <USART1_IRQHandler+0x84>)
 80047be:	701a      	strb	r2, [r3, #0]
			USART1_rx_flag = 1;
 80047c0:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <USART1_IRQHandler+0x88>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]

			switch(cnt)
 80047c6:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <USART1_IRQHandler+0x8c>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b33      	cmp	r3, #51	@ 0x33
 80047cc:	d10d      	bne.n	80047ea <USART1_IRQHandler+0x4e>
			{
			case 51:
				_rx_buf[cnt] = USART1_rx_data;
 80047ce:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <USART1_IRQHandler+0x8c>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <USART1_IRQHandler+0x84>)
 80047d6:	7819      	ldrb	r1, [r3, #0]
 80047d8:	4b14      	ldr	r3, [pc, #80]	@ (800482c <USART1_IRQHandler+0x90>)
 80047da:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 80047dc:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <USART1_IRQHandler+0x8c>)
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
				_rx_cplt_flag = 1;
 80047e2:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <USART1_IRQHandler+0x94>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
				break;
 80047e8:	e015      	b.n	8004816 <USART1_IRQHandler+0x7a>
			default:
				_rx_buf[cnt] = USART1_rx_data;
 80047ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <USART1_IRQHandler+0x8c>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <USART1_IRQHandler+0x84>)
 80047f2:	7819      	ldrb	r1, [r3, #0]
 80047f4:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <USART1_IRQHandler+0x90>)
 80047f6:	5499      	strb	r1, [r3, r2]
				if(_rx_buf[0] == '#'){
 80047f8:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <USART1_IRQHandler+0x90>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b23      	cmp	r3, #35	@ 0x23
 80047fe:	d106      	bne.n	800480e <USART1_IRQHandler+0x72>
					cnt++;
 8004800:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <USART1_IRQHandler+0x8c>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <USART1_IRQHandler+0x8c>)
 800480a:	701a      	strb	r2, [r3, #0]
				}
				else
					{cnt = 0;

					}
				break;
 800480c:	e002      	b.n	8004814 <USART1_IRQHandler+0x78>
					{cnt = 0;
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <USART1_IRQHandler+0x8c>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
				break;
 8004814:	bf00      	nop

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40011000 	.word	0x40011000
 8004820:	20000791 	.word	0x20000791
 8004824:	20000790 	.word	0x20000790
 8004828:	200007d0 	.word	0x200007d0
 800482c:	20000794 	.word	0x20000794
 8004830:	200007c8 	.word	0x200007c8

08004834 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004838:	4802      	ldr	r0, [pc, #8]	@ (8004844 <DMA2_Stream0_IRQHandler+0x10>)
 800483a:	f001 f837 	bl	80058ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000300 	.word	0x20000300

08004848 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */
	if( LL_DMA_IsActiveFlag_TC7(DMA2) == 1){
 800484c:	4805      	ldr	r0, [pc, #20]	@ (8004864 <DMA2_Stream7_IRQHandler+0x1c>)
 800484e:	f7ff ff00 	bl	8004652 <LL_DMA_IsActiveFlag_TC7>
 8004852:	4603      	mov	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <DMA2_Stream7_IRQHandler+0x16>
	    LL_DMA_ClearFlag_TC7(DMA2);
 8004858:	4802      	ldr	r0, [pc, #8]	@ (8004864 <DMA2_Stream7_IRQHandler+0x1c>)
 800485a:	f7ff ff0e 	bl	800467a <LL_DMA_ClearFlag_TC7>
  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40026400 	.word	0x40026400

08004868 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800486c:	4802      	ldr	r0, [pc, #8]	@ (8004878 <USART6_IRQHandler+0x10>)
 800486e:	f003 fdef 	bl	8008450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000494 	.word	0x20000494

0800487c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return 1;
 8004880:	2301      	movs	r3, #1
}
 8004882:	4618      	mov	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <_kill>:

int _kill(int pid, int sig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004896:	f006 fe95 	bl	800b5c4 <__errno>
 800489a:	4603      	mov	r3, r0
 800489c:	2216      	movs	r2, #22
 800489e:	601a      	str	r2, [r3, #0]
  return -1;
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <_exit>:

void _exit (int status)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048b4:	f04f 31ff 	mov.w	r1, #4294967295
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe7 	bl	800488c <_kill>
  while (1) {}    /* Make sure we hang here */
 80048be:	bf00      	nop
 80048c0:	e7fd      	b.n	80048be <_exit+0x12>

080048c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e00a      	b.n	80048ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048d4:	f3af 8000 	nop.w
 80048d8:	4601      	mov	r1, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	60ba      	str	r2, [r7, #8]
 80048e0:	b2ca      	uxtb	r2, r1
 80048e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	3301      	adds	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	dbf0      	blt.n	80048d4 <_read+0x12>
  }

  return len;
 80048f2:	687b      	ldr	r3, [r7, #4]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004924:	605a      	str	r2, [r3, #4]
  return 0;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <_isatty>:

int _isatty(int file)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800493c:	2301      	movs	r3, #1
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800496c:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <_sbrk+0x5c>)
 800496e:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <_sbrk+0x60>)
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004978:	4b13      	ldr	r3, [pc, #76]	@ (80049c8 <_sbrk+0x64>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004980:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <_sbrk+0x64>)
 8004982:	4a12      	ldr	r2, [pc, #72]	@ (80049cc <_sbrk+0x68>)
 8004984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004986:	4b10      	ldr	r3, [pc, #64]	@ (80049c8 <_sbrk+0x64>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d207      	bcs.n	80049a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004994:	f006 fe16 	bl	800b5c4 <__errno>
 8004998:	4603      	mov	r3, r0
 800499a:	220c      	movs	r2, #12
 800499c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	e009      	b.n	80049b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <_sbrk+0x64>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049aa:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <_sbrk+0x64>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	4a05      	ldr	r2, [pc, #20]	@ (80049c8 <_sbrk+0x64>)
 80049b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20018000 	.word	0x20018000
 80049c4:	00000400 	.word	0x00000400
 80049c8:	200007d4 	.word	0x200007d4
 80049cc:	20000928 	.word	0x20000928

080049d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <SystemInit+0x20>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049da:	4a05      	ldr	r2, [pc, #20]	@ (80049f0 <SystemInit+0x20>)
 80049dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80049f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049f8:	480d      	ldr	r0, [pc, #52]	@ (8004a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049fa:	490e      	ldr	r1, [pc, #56]	@ (8004a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a00:	e002      	b.n	8004a08 <LoopCopyDataInit>

08004a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a06:	3304      	adds	r3, #4

08004a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a0c:	d3f9      	bcc.n	8004a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a10:	4c0b      	ldr	r4, [pc, #44]	@ (8004a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a14:	e001      	b.n	8004a1a <LoopFillZerobss>

08004a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a18:	3204      	adds	r2, #4

08004a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a1c:	d3fb      	bcc.n	8004a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a1e:	f7ff ffd7 	bl	80049d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a22:	f006 fdd5 	bl	800b5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a26:	f7fd ff99 	bl	800295c <main>
  bx  lr    
 8004a2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a34:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004a38:	0801026c 	.word	0x0801026c
  ldr r2, =_sbss
 8004a3c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004a40:	20000928 	.word	0x20000928

08004a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a44:	e7fe      	b.n	8004a44 <ADC_IRQHandler>
	...

08004a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <HAL_Init+0x40>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0d      	ldr	r2, [pc, #52]	@ (8004a88 <HAL_Init+0x40>)
 8004a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_Init+0x40>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a88 <HAL_Init+0x40>)
 8004a5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a64:	4b08      	ldr	r3, [pc, #32]	@ (8004a88 <HAL_Init+0x40>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a07      	ldr	r2, [pc, #28]	@ (8004a88 <HAL_Init+0x40>)
 8004a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a70:	2003      	movs	r0, #3
 8004a72:	f000 fd41 	bl	80054f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a76:	2000      	movs	r0, #0
 8004a78:	f000 f808 	bl	8004a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a7c:	f7ff fb7c 	bl	8004178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40023c00 	.word	0x40023c00

08004a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a94:	4b12      	ldr	r3, [pc, #72]	@ (8004ae0 <HAL_InitTick+0x54>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <HAL_InitTick+0x58>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fd59 	bl	8005562 <HAL_SYSTICK_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00e      	b.n	8004ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d80a      	bhi.n	8004ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	f000 fd21 	bl	800550e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004acc:	4a06      	ldr	r2, [pc, #24]	@ (8004ae8 <HAL_InitTick+0x5c>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e000      	b.n	8004ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000008 	.word	0x20000008
 8004ae4:	20000010 	.word	0x20000010
 8004ae8:	2000000c 	.word	0x2000000c

08004aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_IncTick+0x20>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_IncTick+0x24>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4413      	add	r3, r2
 8004afc:	4a04      	ldr	r2, [pc, #16]	@ (8004b10 <HAL_IncTick+0x24>)
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000010 	.word	0x20000010
 8004b10:	200007d8 	.word	0x200007d8

08004b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return uwTick;
 8004b18:	4b03      	ldr	r3, [pc, #12]	@ (8004b28 <HAL_GetTick+0x14>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	200007d8 	.word	0x200007d8

08004b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b34:	f7ff ffee 	bl	8004b14 <HAL_GetTick>
 8004b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d005      	beq.n	8004b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b46:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <HAL_Delay+0x44>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b52:	bf00      	nop
 8004b54:	f7ff ffde 	bl	8004b14 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d8f7      	bhi.n	8004b54 <HAL_Delay+0x28>
  {
  }
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000010 	.word	0x20000010

08004b74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e033      	b.n	8004bf2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fb18 	bl	80041c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d118      	bne.n	8004be4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004bba:	f023 0302 	bic.w	r3, r3, #2
 8004bbe:	f043 0202 	orr.w	r2, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa48 	bl	800505c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004be2:	e001      	b.n	8004be8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_ADC_Start_DMA+0x1e>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ce      	b.n	8004db8 <HAL_ADC_Start_DMA+0x1bc>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d018      	beq.n	8004c62 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c40:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc0 <HAL_ADC_Start_DMA+0x1c4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc4 <HAL_ADC_Start_DMA+0x1c8>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	0c9a      	lsrs	r2, r3, #18
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c54:	e002      	b.n	8004c5c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f9      	bne.n	8004c56 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c70:	d107      	bne.n	8004c82 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	f040 8086 	bne.w	8004d9e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cbc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd0:	d106      	bne.n	8004ce0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f023 0206 	bic.w	r2, r3, #6
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
 8004cde:	e002      	b.n	8004ce6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cee:	4b36      	ldr	r3, [pc, #216]	@ (8004dc8 <HAL_ADC_Start_DMA+0x1cc>)
 8004cf0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	4a35      	ldr	r2, [pc, #212]	@ (8004dcc <HAL_ADC_Start_DMA+0x1d0>)
 8004cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	4a34      	ldr	r2, [pc, #208]	@ (8004dd0 <HAL_ADC_Start_DMA+0x1d4>)
 8004d00:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	4a33      	ldr	r2, [pc, #204]	@ (8004dd4 <HAL_ADC_Start_DMA+0x1d8>)
 8004d08:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004d12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004d22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	334c      	adds	r3, #76	@ 0x4c
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f000 fcc8 	bl	80056d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10f      	bne.n	8004d74 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d129      	bne.n	8004db6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	e020      	b.n	8004db6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a17      	ldr	r2, [pc, #92]	@ (8004dd8 <HAL_ADC_Start_DMA+0x1dc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d11b      	bne.n	8004db6 <HAL_ADC_Start_DMA+0x1ba>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d114      	bne.n	8004db6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	e00b      	b.n	8004db6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f043 0210 	orr.w	r2, r3, #16
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000008 	.word	0x20000008
 8004dc4:	431bde83 	.word	0x431bde83
 8004dc8:	40012300 	.word	0x40012300
 8004dcc:	08005255 	.word	0x08005255
 8004dd0:	0800530f 	.word	0x0800530f
 8004dd4:	0800532b 	.word	0x0800532b
 8004dd8:	40012000 	.word	0x40012000

08004ddc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x1c>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e105      	b.n	8005040 <HAL_ADC_ConfigChannel+0x228>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b09      	cmp	r3, #9
 8004e42:	d925      	bls.n	8004e90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68d9      	ldr	r1, [r3, #12]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	3b1e      	subs	r3, #30
 8004e5a:	2207      	movs	r2, #7
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43da      	mvns	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	400a      	ands	r2, r1
 8004e68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68d9      	ldr	r1, [r3, #12]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4403      	add	r3, r0
 8004e82:	3b1e      	subs	r3, #30
 8004e84:	409a      	lsls	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	e022      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6919      	ldr	r1, [r3, #16]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6919      	ldr	r1, [r3, #16]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4403      	add	r3, r0
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d824      	bhi.n	8004f28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	3b05      	subs	r3, #5
 8004ef0:	221f      	movs	r2, #31
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	400a      	ands	r2, r1
 8004efe:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	3b05      	subs	r3, #5
 8004f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f26:	e04c      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d824      	bhi.n	8004f7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	3b23      	subs	r3, #35	@ 0x23
 8004f42:	221f      	movs	r2, #31
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43da      	mvns	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	400a      	ands	r2, r1
 8004f50:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4618      	mov	r0, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	3b23      	subs	r3, #35	@ 0x23
 8004f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f78:	e023      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	3b41      	subs	r3, #65	@ 0x41
 8004f8c:	221f      	movs	r2, #31
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43da      	mvns	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	400a      	ands	r2, r1
 8004f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4618      	mov	r0, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3b41      	subs	r3, #65	@ 0x41
 8004fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fc2:	4b22      	ldr	r3, [pc, #136]	@ (800504c <HAL_ADC_ConfigChannel+0x234>)
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <HAL_ADC_ConfigChannel+0x238>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x1cc>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b12      	cmp	r3, #18
 8004fd6:	d105      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <HAL_ADC_ConfigChannel+0x238>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d123      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x21e>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b10      	cmp	r3, #16
 8004ff4:	d003      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0x1e6>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b11      	cmp	r3, #17
 8004ffc:	d11b      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b10      	cmp	r3, #16
 8005010:	d111      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005012:	4b10      	ldr	r3, [pc, #64]	@ (8005054 <HAL_ADC_ConfigChannel+0x23c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a10      	ldr	r2, [pc, #64]	@ (8005058 <HAL_ADC_ConfigChannel+0x240>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	0c9a      	lsrs	r2, r3, #18
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005028:	e002      	b.n	8005030 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3b01      	subs	r3, #1
 800502e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f9      	bne.n	800502a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40012300 	.word	0x40012300
 8005050:	40012000 	.word	0x40012000
 8005054:	20000008 	.word	0x20000008
 8005058:	431bde83 	.word	0x431bde83

0800505c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005064:	4b79      	ldr	r3, [pc, #484]	@ (800524c <ADC_Init+0x1f0>)
 8005066:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	431a      	orrs	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6859      	ldr	r1, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	021a      	lsls	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80050b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6899      	ldr	r1, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	4a58      	ldr	r2, [pc, #352]	@ (8005250 <ADC_Init+0x1f4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d022      	beq.n	800513a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6899      	ldr	r1, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	e00f      	b.n	800515a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005158:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0202 	bic.w	r2, r2, #2
 8005168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6899      	ldr	r1, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	7e1b      	ldrb	r3, [r3, #24]
 8005174:	005a      	lsls	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01b      	beq.n	80051c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005196:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80051a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	3b01      	subs	r3, #1
 80051b4:	035a      	lsls	r2, r3, #13
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	e007      	b.n	80051d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80051de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	051a      	lsls	r2, r3, #20
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6899      	ldr	r1, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005212:	025a      	lsls	r2, r3, #9
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6899      	ldr	r1, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	029a      	lsls	r2, r3, #10
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40012300 	.word	0x40012300
 8005250:	0f000001 	.word	0x0f000001

08005254 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800526a:	2b00      	cmp	r3, #0
 800526c:	d13c      	bne.n	80052e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d12b      	bne.n	80052e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800528c:	2b00      	cmp	r3, #0
 800528e:	d127      	bne.n	80052e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005296:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d119      	bne.n	80052e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0220 	bic.w	r2, r2, #32
 80052ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	f043 0201 	orr.w	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff fd7b 	bl	8004ddc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052e6:	e00e      	b.n	8005306 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fd85 	bl	8004e04 <HAL_ADC_ErrorCallback>
}
 80052fa:	e004      	b.n	8005306 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fd67 	bl	8004df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2240      	movs	r2, #64	@ 0x40
 800533c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005342:	f043 0204 	orr.w	r2, r3, #4
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7ff fd5a 	bl	8004e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <__NVIC_SetPriorityGrouping>:
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005368:	4b0c      	ldr	r3, [pc, #48]	@ (800539c <__NVIC_SetPriorityGrouping+0x44>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005374:	4013      	ands	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800538a:	4a04      	ldr	r2, [pc, #16]	@ (800539c <__NVIC_SetPriorityGrouping+0x44>)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	60d3      	str	r3, [r2, #12]
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <__NVIC_GetPriorityGrouping>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a4:	4b04      	ldr	r3, [pc, #16]	@ (80053b8 <__NVIC_GetPriorityGrouping+0x18>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 0307 	and.w	r3, r3, #7
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <__NVIC_EnableIRQ>:
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	db0b      	blt.n	80053e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	f003 021f 	and.w	r2, r3, #31
 80053d4:	4907      	ldr	r1, [pc, #28]	@ (80053f4 <__NVIC_EnableIRQ+0x38>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	2001      	movs	r0, #1
 80053de:	fa00 f202 	lsl.w	r2, r0, r2
 80053e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	e000e100 	.word	0xe000e100

080053f8 <__NVIC_SetPriority>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	6039      	str	r1, [r7, #0]
 8005402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005408:	2b00      	cmp	r3, #0
 800540a:	db0a      	blt.n	8005422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	490c      	ldr	r1, [pc, #48]	@ (8005444 <__NVIC_SetPriority+0x4c>)
 8005412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005416:	0112      	lsls	r2, r2, #4
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	440b      	add	r3, r1
 800541c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005420:	e00a      	b.n	8005438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4908      	ldr	r1, [pc, #32]	@ (8005448 <__NVIC_SetPriority+0x50>)
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	3b04      	subs	r3, #4
 8005430:	0112      	lsls	r2, r2, #4
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	440b      	add	r3, r1
 8005436:	761a      	strb	r2, [r3, #24]
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	e000e100 	.word	0xe000e100
 8005448:	e000ed00 	.word	0xe000ed00

0800544c <NVIC_EncodePriority>:
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	@ 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f1c3 0307 	rsb	r3, r3, #7
 8005466:	2b04      	cmp	r3, #4
 8005468:	bf28      	it	cs
 800546a:	2304      	movcs	r3, #4
 800546c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3304      	adds	r3, #4
 8005472:	2b06      	cmp	r3, #6
 8005474:	d902      	bls.n	800547c <NVIC_EncodePriority+0x30>
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3b03      	subs	r3, #3
 800547a:	e000      	b.n	800547e <NVIC_EncodePriority+0x32>
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005480:	f04f 32ff 	mov.w	r2, #4294967295
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43da      	mvns	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	401a      	ands	r2, r3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005494:	f04f 31ff 	mov.w	r1, #4294967295
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	43d9      	mvns	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a4:	4313      	orrs	r3, r2
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3724      	adds	r7, #36	@ 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3b01      	subs	r3, #1
 80054c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054c4:	d301      	bcc.n	80054ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054c6:	2301      	movs	r3, #1
 80054c8:	e00f      	b.n	80054ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ca:	4a0a      	ldr	r2, [pc, #40]	@ (80054f4 <SysTick_Config+0x40>)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054d2:	210f      	movs	r1, #15
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	f7ff ff8e 	bl	80053f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054dc:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <SysTick_Config+0x40>)
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054e2:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <SysTick_Config+0x40>)
 80054e4:	2207      	movs	r2, #7
 80054e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	e000e010 	.word	0xe000e010

080054f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff ff29 	bl	8005358 <__NVIC_SetPriorityGrouping>
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	4603      	mov	r3, r0
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005520:	f7ff ff3e 	bl	80053a0 <__NVIC_GetPriorityGrouping>
 8005524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f7ff ff8e 	bl	800544c <NVIC_EncodePriority>
 8005530:	4602      	mov	r2, r0
 8005532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff5d 	bl	80053f8 <__NVIC_SetPriority>
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	4603      	mov	r3, r0
 800554e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff31 	bl	80053bc <__NVIC_EnableIRQ>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ffa2 	bl	80054b4 <SysTick_Config>
 8005570:	4603      	mov	r3, r0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005588:	f7ff fac4 	bl	8004b14 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e099      	b.n	80056cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b8:	e00f      	b.n	80055da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ba:	f7ff faab 	bl	8004b14 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b05      	cmp	r3, #5
 80055c6:	d908      	bls.n	80055da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2203      	movs	r2, #3
 80055d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e078      	b.n	80056cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e8      	bne.n	80055ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4b38      	ldr	r3, [pc, #224]	@ (80056d4 <HAL_DMA_Init+0x158>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	2b04      	cmp	r3, #4
 8005632:	d107      	bne.n	8005644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	4313      	orrs	r3, r2
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0307 	bic.w	r3, r3, #7
 800565a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	2b04      	cmp	r3, #4
 800566c:	d117      	bne.n	800569e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fb01 	bl	8005c88 <DMA_CheckFifoParam>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	@ 0x40
 8005690:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800569a:	2301      	movs	r3, #1
 800569c:	e016      	b.n	80056cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fab8 	bl	8005c1c <DMA_CalcBaseAndBitshift>
 80056ac:	4603      	mov	r3, r0
 80056ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b4:	223f      	movs	r2, #63	@ 0x3f
 80056b6:	409a      	lsls	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	f010803f 	.word	0xf010803f

080056d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_DMA_Start_IT+0x26>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e040      	b.n	8005780 <HAL_DMA_Start_IT+0xa8>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d12f      	bne.n	8005772 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fa4a 	bl	8005bc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005730:	223f      	movs	r2, #63	@ 0x3f
 8005732:	409a      	lsls	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0216 	orr.w	r2, r2, #22
 8005746:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e005      	b.n	800577e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800577a:	2302      	movs	r3, #2
 800577c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005794:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005796:	f7ff f9bd 	bl	8004b14 <HAL_GetTick>
 800579a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d008      	beq.n	80057ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2280      	movs	r2, #128	@ 0x80
 80057ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e052      	b.n	8005860 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0216 	bic.w	r2, r2, #22
 80057c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <HAL_DMA_Abort+0x62>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0208 	bic.w	r2, r2, #8
 80057f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800580a:	e013      	b.n	8005834 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800580c:	f7ff f982 	bl	8004b14 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b05      	cmp	r3, #5
 8005818:	d90c      	bls.n	8005834 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2203      	movs	r2, #3
 8005824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e015      	b.n	8005860 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e4      	bne.n	800580c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005846:	223f      	movs	r2, #63	@ 0x3f
 8005848:	409a      	lsls	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d004      	beq.n	8005886 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2280      	movs	r2, #128	@ 0x80
 8005880:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e00c      	b.n	80058a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2205      	movs	r2, #5
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058b8:	4b8e      	ldr	r3, [pc, #568]	@ (8005af4 <HAL_DMA_IRQHandler+0x248>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a8e      	ldr	r2, [pc, #568]	@ (8005af8 <HAL_DMA_IRQHandler+0x24c>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	0a9b      	lsrs	r3, r3, #10
 80058c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	2208      	movs	r2, #8
 80058d8:	409a      	lsls	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01a      	beq.n	8005918 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005904:	2208      	movs	r2, #8
 8005906:	409a      	lsls	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	2201      	movs	r2, #1
 800591e:	409a      	lsls	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d012      	beq.n	800594e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593a:	2201      	movs	r2, #1
 800593c:	409a      	lsls	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005946:	f043 0202 	orr.w	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005952:	2204      	movs	r2, #4
 8005954:	409a      	lsls	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d012      	beq.n	8005984 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005970:	2204      	movs	r2, #4
 8005972:	409a      	lsls	r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597c:	f043 0204 	orr.w	r2, r3, #4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005988:	2210      	movs	r2, #16
 800598a:	409a      	lsls	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d043      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d03c      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a6:	2210      	movs	r2, #16
 80059a8:	409a      	lsls	r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d018      	beq.n	80059ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d024      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
 80059da:	e01f      	b.n	8005a1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01b      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
 80059ec:	e016      	b.n	8005a1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d107      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0208 	bic.w	r2, r2, #8
 8005a0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a20:	2220      	movs	r2, #32
 8005a22:	409a      	lsls	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 808f 	beq.w	8005b4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8087 	beq.w	8005b4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	2220      	movs	r2, #32
 8005a44:	409a      	lsls	r2, r3
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b05      	cmp	r3, #5
 8005a54:	d136      	bne.n	8005ac4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0216 	bic.w	r2, r2, #22
 8005a64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <HAL_DMA_IRQHandler+0x1da>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0208 	bic.w	r2, r2, #8
 8005a94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9a:	223f      	movs	r2, #63	@ 0x3f
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d07e      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	4798      	blx	r3
        }
        return;
 8005ac2:	e079      	b.n	8005bb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01d      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d031      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
 8005af0:	e02c      	b.n	8005b4c <HAL_DMA_IRQHandler+0x2a0>
 8005af2:	bf00      	nop
 8005af4:	20000008 	.word	0x20000008
 8005af8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d023      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
 8005b0c:	e01e      	b.n	8005b4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10f      	bne.n	8005b3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0210 	bic.w	r2, r2, #16
 8005b2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d032      	beq.n	8005bba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d022      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2205      	movs	r2, #5
 8005b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d307      	bcc.n	8005b94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f2      	bne.n	8005b78 <HAL_DMA_IRQHandler+0x2cc>
 8005b92:	e000      	b.n	8005b96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
 8005bb6:	e000      	b.n	8005bba <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bb8:	bf00      	nop
    }
  }
}
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b40      	cmp	r3, #64	@ 0x40
 8005bec:	d108      	bne.n	8005c00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005bfe:	e007      	b.n	8005c10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]
}
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	3b10      	subs	r3, #16
 8005c2c:	4a14      	ldr	r2, [pc, #80]	@ (8005c80 <DMA_CalcBaseAndBitshift+0x64>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c36:	4a13      	ldr	r2, [pc, #76]	@ (8005c84 <DMA_CalcBaseAndBitshift+0x68>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d909      	bls.n	8005c5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	1d1a      	adds	r2, r3, #4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c5c:	e007      	b.n	8005c6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	aaaaaaab 	.word	0xaaaaaaab
 8005c84:	0800fd9c 	.word	0x0800fd9c

08005c88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11f      	bne.n	8005ce2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d856      	bhi.n	8005d56 <DMA_CheckFifoParam+0xce>
 8005ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <DMA_CheckFifoParam+0x28>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005cd3 	.word	0x08005cd3
 8005cb8:	08005cc1 	.word	0x08005cc1
 8005cbc:	08005d57 	.word	0x08005d57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d046      	beq.n	8005d5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd0:	e043      	b.n	8005d5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cda:	d140      	bne.n	8005d5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce0:	e03d      	b.n	8005d5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cea:	d121      	bne.n	8005d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d837      	bhi.n	8005d62 <DMA_CheckFifoParam+0xda>
 8005cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf8 <DMA_CheckFifoParam+0x70>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d0f 	.word	0x08005d0f
 8005d00:	08005d09 	.word	0x08005d09
 8005d04:	08005d21 	.word	0x08005d21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0c:	e030      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d025      	beq.n	8005d66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d1e:	e022      	b.n	8005d66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d28:	d11f      	bne.n	8005d6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d2e:	e01c      	b.n	8005d6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d903      	bls.n	8005d3e <DMA_CheckFifoParam+0xb6>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d003      	beq.n	8005d44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d3c:	e018      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
      break;
 8005d42:	e015      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00e      	beq.n	8005d6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
      break;
 8005d54:	e00b      	b.n	8005d6e <DMA_CheckFifoParam+0xe6>
      break;
 8005d56:	bf00      	nop
 8005d58:	e00a      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e008      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e006      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      break;
 8005d62:	bf00      	nop
 8005d64:	e004      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      break;
 8005d66:	bf00      	nop
 8005d68:	e002      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <DMA_CheckFifoParam+0xe8>
      break;
 8005d6e:	bf00      	nop
    }
  } 
  
  return status; 
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop

08005d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b089      	sub	sp, #36	@ 0x24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e159      	b.n	8006050 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4013      	ands	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	f040 8148 	bne.w	800604a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d005      	beq.n	8005dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d130      	bne.n	8005e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	2203      	movs	r2, #3
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e08:	2201      	movs	r2, #1
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4013      	ands	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	f003 0201 	and.w	r2, r3, #1
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d017      	beq.n	8005e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4013      	ands	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d123      	bne.n	8005ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	08da      	lsrs	r2, r3, #3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3208      	adds	r2, #8
 8005e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	220f      	movs	r2, #15
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	08da      	lsrs	r2, r3, #3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3208      	adds	r2, #8
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	2203      	movs	r2, #3
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0203 	and.w	r2, r3, #3
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80a2 	beq.w	800604a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	4b57      	ldr	r3, [pc, #348]	@ (8006068 <HAL_GPIO_Init+0x2e8>)
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	4a56      	ldr	r2, [pc, #344]	@ (8006068 <HAL_GPIO_Init+0x2e8>)
 8005f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f16:	4b54      	ldr	r3, [pc, #336]	@ (8006068 <HAL_GPIO_Init+0x2e8>)
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f22:	4a52      	ldr	r2, [pc, #328]	@ (800606c <HAL_GPIO_Init+0x2ec>)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	3302      	adds	r3, #2
 8005f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	220f      	movs	r2, #15
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a49      	ldr	r2, [pc, #292]	@ (8006070 <HAL_GPIO_Init+0x2f0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d019      	beq.n	8005f82 <HAL_GPIO_Init+0x202>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a48      	ldr	r2, [pc, #288]	@ (8006074 <HAL_GPIO_Init+0x2f4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <HAL_GPIO_Init+0x1fe>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a47      	ldr	r2, [pc, #284]	@ (8006078 <HAL_GPIO_Init+0x2f8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00d      	beq.n	8005f7a <HAL_GPIO_Init+0x1fa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a46      	ldr	r2, [pc, #280]	@ (800607c <HAL_GPIO_Init+0x2fc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <HAL_GPIO_Init+0x1f6>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a45      	ldr	r2, [pc, #276]	@ (8006080 <HAL_GPIO_Init+0x300>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d101      	bne.n	8005f72 <HAL_GPIO_Init+0x1f2>
 8005f6e:	2304      	movs	r3, #4
 8005f70:	e008      	b.n	8005f84 <HAL_GPIO_Init+0x204>
 8005f72:	2307      	movs	r3, #7
 8005f74:	e006      	b.n	8005f84 <HAL_GPIO_Init+0x204>
 8005f76:	2303      	movs	r3, #3
 8005f78:	e004      	b.n	8005f84 <HAL_GPIO_Init+0x204>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e002      	b.n	8005f84 <HAL_GPIO_Init+0x204>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <HAL_GPIO_Init+0x204>
 8005f82:	2300      	movs	r3, #0
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	f002 0203 	and.w	r2, r2, #3
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	4093      	lsls	r3, r2
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f94:	4935      	ldr	r1, [pc, #212]	@ (800606c <HAL_GPIO_Init+0x2ec>)
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	089b      	lsrs	r3, r3, #2
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fa2:	4b38      	ldr	r3, [pc, #224]	@ (8006084 <HAL_GPIO_Init+0x304>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8006084 <HAL_GPIO_Init+0x304>)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8006084 <HAL_GPIO_Init+0x304>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ff0:	4a24      	ldr	r2, [pc, #144]	@ (8006084 <HAL_GPIO_Init+0x304>)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ff6:	4b23      	ldr	r3, [pc, #140]	@ (8006084 <HAL_GPIO_Init+0x304>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	43db      	mvns	r3, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4013      	ands	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800601a:	4a1a      	ldr	r2, [pc, #104]	@ (8006084 <HAL_GPIO_Init+0x304>)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006020:	4b18      	ldr	r3, [pc, #96]	@ (8006084 <HAL_GPIO_Init+0x304>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	43db      	mvns	r3, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4013      	ands	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006044:	4a0f      	ldr	r2, [pc, #60]	@ (8006084 <HAL_GPIO_Init+0x304>)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3301      	adds	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b0f      	cmp	r3, #15
 8006054:	f67f aea2 	bls.w	8005d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	3724      	adds	r7, #36	@ 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40023800 	.word	0x40023800
 800606c:	40013800 	.word	0x40013800
 8006070:	40020000 	.word	0x40020000
 8006074:	40020400 	.word	0x40020400
 8006078:	40020800 	.word	0x40020800
 800607c:	40020c00 	.word	0x40020c00
 8006080:	40021000 	.word	0x40021000
 8006084:	40013c00 	.word	0x40013c00

08006088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
 8006094:	4613      	mov	r3, r2
 8006096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006098:	787b      	ldrb	r3, [r7, #1]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060a4:	e003      	b.n	80060ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060a6:	887b      	ldrh	r3, [r7, #2]
 80060a8:	041a      	lsls	r2, r3, #16
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	619a      	str	r2, [r3, #24]
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e12b      	b.n	8006326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fe f8e6 	bl	80042b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2224      	movs	r2, #36	@ 0x24
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800610e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800611e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006120:	f001 fbfc 	bl	800791c <HAL_RCC_GetPCLK1Freq>
 8006124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4a81      	ldr	r2, [pc, #516]	@ (8006330 <HAL_I2C_Init+0x274>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d807      	bhi.n	8006140 <HAL_I2C_Init+0x84>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4a80      	ldr	r2, [pc, #512]	@ (8006334 <HAL_I2C_Init+0x278>)
 8006134:	4293      	cmp	r3, r2
 8006136:	bf94      	ite	ls
 8006138:	2301      	movls	r3, #1
 800613a:	2300      	movhi	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	e006      	b.n	800614e <HAL_I2C_Init+0x92>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a7d      	ldr	r2, [pc, #500]	@ (8006338 <HAL_I2C_Init+0x27c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	bf94      	ite	ls
 8006148:	2301      	movls	r3, #1
 800614a:	2300      	movhi	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e0e7      	b.n	8006326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a78      	ldr	r2, [pc, #480]	@ (800633c <HAL_I2C_Init+0x280>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	0c9b      	lsrs	r3, r3, #18
 8006160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4a6a      	ldr	r2, [pc, #424]	@ (8006330 <HAL_I2C_Init+0x274>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d802      	bhi.n	8006190 <HAL_I2C_Init+0xd4>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	3301      	adds	r3, #1
 800618e:	e009      	b.n	80061a4 <HAL_I2C_Init+0xe8>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	4a69      	ldr	r2, [pc, #420]	@ (8006340 <HAL_I2C_Init+0x284>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	099b      	lsrs	r3, r3, #6
 80061a2:	3301      	adds	r3, #1
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	430b      	orrs	r3, r1
 80061aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80061b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	495c      	ldr	r1, [pc, #368]	@ (8006330 <HAL_I2C_Init+0x274>)
 80061c0:	428b      	cmp	r3, r1
 80061c2:	d819      	bhi.n	80061f8 <HAL_I2C_Init+0x13c>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	1e59      	subs	r1, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80061d2:	1c59      	adds	r1, r3, #1
 80061d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061d8:	400b      	ands	r3, r1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_I2C_Init+0x138>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1e59      	subs	r1, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ec:	3301      	adds	r3, #1
 80061ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f2:	e051      	b.n	8006298 <HAL_I2C_Init+0x1dc>
 80061f4:	2304      	movs	r3, #4
 80061f6:	e04f      	b.n	8006298 <HAL_I2C_Init+0x1dc>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d111      	bne.n	8006224 <HAL_I2C_Init+0x168>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	1e58      	subs	r0, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6859      	ldr	r1, [r3, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	440b      	add	r3, r1
 800620e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006212:	3301      	adds	r3, #1
 8006214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e012      	b.n	800624a <HAL_I2C_Init+0x18e>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1e58      	subs	r0, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6859      	ldr	r1, [r3, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	0099      	lsls	r1, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	fbb0 f3f3 	udiv	r3, r0, r3
 800623a:	3301      	adds	r3, #1
 800623c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006240:	2b00      	cmp	r3, #0
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_I2C_Init+0x196>
 800624e:	2301      	movs	r3, #1
 8006250:	e022      	b.n	8006298 <HAL_I2C_Init+0x1dc>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10e      	bne.n	8006278 <HAL_I2C_Init+0x1bc>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1e58      	subs	r0, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6859      	ldr	r1, [r3, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	440b      	add	r3, r1
 8006268:	fbb0 f3f3 	udiv	r3, r0, r3
 800626c:	3301      	adds	r3, #1
 800626e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006276:	e00f      	b.n	8006298 <HAL_I2C_Init+0x1dc>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1e58      	subs	r0, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	0099      	lsls	r1, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	fbb0 f3f3 	udiv	r3, r0, r3
 800628e:	3301      	adds	r3, #1
 8006290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	6809      	ldr	r1, [r1, #0]
 800629c:	4313      	orrs	r3, r2
 800629e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69da      	ldr	r2, [r3, #28]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80062c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6911      	ldr	r1, [r2, #16]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68d2      	ldr	r2, [r2, #12]
 80062d2:	4311      	orrs	r1, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	430b      	orrs	r3, r1
 80062da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	000186a0 	.word	0x000186a0
 8006334:	001e847f 	.word	0x001e847f
 8006338:	003d08ff 	.word	0x003d08ff
 800633c:	431bde83 	.word	0x431bde83
 8006340:	10624dd3 	.word	0x10624dd3

08006344 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	4608      	mov	r0, r1
 800634e:	4611      	mov	r1, r2
 8006350:	461a      	mov	r2, r3
 8006352:	4603      	mov	r3, r0
 8006354:	817b      	strh	r3, [r7, #10]
 8006356:	460b      	mov	r3, r1
 8006358:	813b      	strh	r3, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800635e:	f7fe fbd9 	bl	8004b14 <HAL_GetTick>
 8006362:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b20      	cmp	r3, #32
 800636e:	f040 80d9 	bne.w	8006524 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	2319      	movs	r3, #25
 8006378:	2201      	movs	r2, #1
 800637a:	496d      	ldr	r1, [pc, #436]	@ (8006530 <HAL_I2C_Mem_Write+0x1ec>)
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fc7f 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
 800638a:	e0cc      	b.n	8006526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_I2C_Mem_Write+0x56>
 8006396:	2302      	movs	r3, #2
 8006398:	e0c5      	b.n	8006526 <HAL_I2C_Mem_Write+0x1e2>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d007      	beq.n	80063c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2221      	movs	r2, #33	@ 0x21
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2240      	movs	r2, #64	@ 0x40
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4a4d      	ldr	r2, [pc, #308]	@ (8006534 <HAL_I2C_Mem_Write+0x1f0>)
 8006400:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006402:	88f8      	ldrh	r0, [r7, #6]
 8006404:	893a      	ldrh	r2, [r7, #8]
 8006406:	8979      	ldrh	r1, [r7, #10]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	4603      	mov	r3, r0
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fab6 	bl	8006984 <I2C_RequestMemoryWrite>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d052      	beq.n	80064c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e081      	b.n	8006526 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fd00 	bl	8006e2c <I2C_WaitOnTXEFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00d      	beq.n	800644e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	2b04      	cmp	r3, #4
 8006438:	d107      	bne.n	800644a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e06b      	b.n	8006526 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d11b      	bne.n	80064c4 <HAL_I2C_Mem_Write+0x180>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	d017      	beq.n	80064c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1aa      	bne.n	8006422 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fcec 	bl	8006eae <I2C_WaitOnBTFFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00d      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d107      	bne.n	80064f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e016      	b.n	8006526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e000      	b.n	8006526 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	00100002 	.word	0x00100002
 8006534:	ffff0000 	.word	0xffff0000

08006538 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	@ 0x30
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4603      	mov	r3, r0
 8006548:	817b      	strh	r3, [r7, #10]
 800654a:	460b      	mov	r3, r1
 800654c:	813b      	strh	r3, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006552:	f7fe fadf 	bl	8004b14 <HAL_GetTick>
 8006556:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b20      	cmp	r3, #32
 8006562:	f040 8208 	bne.w	8006976 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	2319      	movs	r3, #25
 800656c:	2201      	movs	r2, #1
 800656e:	497b      	ldr	r1, [pc, #492]	@ (800675c <HAL_I2C_Mem_Read+0x224>)
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fb85 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800657c:	2302      	movs	r3, #2
 800657e:	e1fb      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_I2C_Mem_Read+0x56>
 800658a:	2302      	movs	r3, #2
 800658c:	e1f4      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d007      	beq.n	80065b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0201 	orr.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2222      	movs	r2, #34	@ 0x22
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2240      	movs	r2, #64	@ 0x40
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80065e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006760 <HAL_I2C_Mem_Read+0x228>)
 80065f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065f6:	88f8      	ldrh	r0, [r7, #6]
 80065f8:	893a      	ldrh	r2, [r7, #8]
 80065fa:	8979      	ldrh	r1, [r7, #10]
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4603      	mov	r3, r0
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 fa52 	bl	8006ab0 <I2C_RequestMemoryRead>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e1b0      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d113      	bne.n	8006646 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800661e:	2300      	movs	r3, #0
 8006620:	623b      	str	r3, [r7, #32]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	623b      	str	r3, [r7, #32]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	623b      	str	r3, [r7, #32]
 8006632:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e184      	b.n	8006950 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664a:	2b01      	cmp	r3, #1
 800664c:	d11b      	bne.n	8006686 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e164      	b.n	8006950 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668a:	2b02      	cmp	r3, #2
 800668c:	d11b      	bne.n	80066c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ae:	2300      	movs	r3, #0
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	e144      	b.n	8006950 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066dc:	e138      	b.n	8006950 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	f200 80f1 	bhi.w	80068ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d123      	bne.n	8006738 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fc1b 	bl	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e139      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006736:	e10b      	b.n	8006950 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673c:	2b02      	cmp	r3, #2
 800673e:	d14e      	bne.n	80067de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	2200      	movs	r2, #0
 8006748:	4906      	ldr	r1, [pc, #24]	@ (8006764 <HAL_I2C_Mem_Read+0x22c>)
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fa98 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e10e      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
 800675a:	bf00      	nop
 800675c:	00100002 	.word	0x00100002
 8006760:	ffff0000 	.word	0xffff0000
 8006764:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067dc:	e0b8      	b.n	8006950 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e4:	2200      	movs	r2, #0
 80067e6:	4966      	ldr	r1, [pc, #408]	@ (8006980 <HAL_I2C_Mem_Read+0x448>)
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fa49 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0bf      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	2200      	movs	r2, #0
 8006842:	494f      	ldr	r1, [pc, #316]	@ (8006980 <HAL_I2C_Mem_Read+0x448>)
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fa1b 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e091      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068c8:	e042      	b.n	8006950 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fb2e 	bl	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e04c      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b04      	cmp	r3, #4
 800691c:	d118      	bne.n	8006950 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	f47f aec2 	bne.w	80066de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e000      	b.n	8006978 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
  }
}
 8006978:	4618      	mov	r0, r3
 800697a:	3728      	adds	r7, #40	@ 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	00010004 	.word	0x00010004

08006984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	461a      	mov	r2, r3
 8006992:	4603      	mov	r3, r0
 8006994:	817b      	strh	r3, [r7, #10]
 8006996:	460b      	mov	r3, r1
 8006998:	813b      	strh	r3, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f960 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00d      	beq.n	80069e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d4:	d103      	bne.n	80069de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e05f      	b.n	8006aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069e2:	897b      	ldrh	r3, [r7, #10]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	492d      	ldr	r1, [pc, #180]	@ (8006aac <I2C_RequestMemoryWrite+0x128>)
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f998 	bl	8006d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e04c      	b.n	8006aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a20:	6a39      	ldr	r1, [r7, #32]
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fa02 	bl	8006e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d107      	bne.n	8006a46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e02b      	b.n	8006aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d105      	bne.n	8006a5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a50:	893b      	ldrh	r3, [r7, #8]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	611a      	str	r2, [r3, #16]
 8006a5a:	e021      	b.n	8006aa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a5c:	893b      	ldrh	r3, [r7, #8]
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a6c:	6a39      	ldr	r1, [r7, #32]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f9dc 	bl	8006e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00d      	beq.n	8006a96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d107      	bne.n	8006a92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e005      	b.n	8006aa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a96:	893b      	ldrh	r3, [r7, #8]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	00010002 	.word	0x00010002

08006ab0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	817b      	strh	r3, [r7, #10]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	813b      	strh	r3, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f8c2 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b10:	d103      	bne.n	8006b1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e0aa      	b.n	8006c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b1e:	897b      	ldrh	r3, [r7, #10]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	6a3a      	ldr	r2, [r7, #32]
 8006b32:	4952      	ldr	r1, [pc, #328]	@ (8006c7c <I2C_RequestMemoryRead+0x1cc>)
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f8fa 	bl	8006d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e097      	b.n	8006c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b5c:	6a39      	ldr	r1, [r7, #32]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f964 	bl	8006e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d107      	bne.n	8006b82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e076      	b.n	8006c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b8c:	893b      	ldrh	r3, [r7, #8]
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	611a      	str	r2, [r3, #16]
 8006b96:	e021      	b.n	8006bdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b98:	893b      	ldrh	r3, [r7, #8]
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba8:	6a39      	ldr	r1, [r7, #32]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f93e 	bl	8006e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00d      	beq.n	8006bd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d107      	bne.n	8006bce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e050      	b.n	8006c74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd2:	893b      	ldrh	r3, [r7, #8]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bde:	6a39      	ldr	r1, [r7, #32]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f923 	bl	8006e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d107      	bne.n	8006c04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e035      	b.n	8006c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f82b 	bl	8006c80 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c3e:	d103      	bne.n	8006c48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e013      	b.n	8006c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c4c:	897b      	ldrh	r3, [r7, #10]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	4906      	ldr	r1, [pc, #24]	@ (8006c7c <I2C_RequestMemoryRead+0x1cc>)
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f863 	bl	8006d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	00010002 	.word	0x00010002

08006c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c90:	e025      	b.n	8006cde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d021      	beq.n	8006cde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9a:	f7fd ff3b 	bl	8004b14 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d116      	bne.n	8006cde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cca:	f043 0220 	orr.w	r2, r3, #32
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e023      	b.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d10d      	bne.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	43da      	mvns	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2301      	moveq	r3, #1
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	e00c      	b.n	8006d1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	43da      	mvns	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf0c      	ite	eq
 8006d16:	2301      	moveq	r3, #1
 8006d18:	2300      	movne	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d0b6      	beq.n	8006c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d3c:	e051      	b.n	8006de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d4c:	d123      	bne.n	8006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	f043 0204 	orr.w	r2, r3, #4
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e046      	b.n	8006e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d021      	beq.n	8006de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9e:	f7fd feb9 	bl	8004b14 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d116      	bne.n	8006de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dce:	f043 0220 	orr.w	r2, r3, #32
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e020      	b.n	8006e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d10c      	bne.n	8006e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	43da      	mvns	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4013      	ands	r3, r2
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bf14      	ite	ne
 8006dfe:	2301      	movne	r3, #1
 8006e00:	2300      	moveq	r3, #0
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	e00b      	b.n	8006e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	43da      	mvns	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4013      	ands	r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bf14      	ite	ne
 8006e18:	2301      	movne	r3, #1
 8006e1a:	2300      	moveq	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d18d      	bne.n	8006d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e38:	e02d      	b.n	8006e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f8ce 	bl	8006fdc <I2C_IsAcknowledgeFailed>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e02d      	b.n	8006ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d021      	beq.n	8006e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e52:	f7fd fe5f 	bl	8004b14 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d302      	bcc.n	8006e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d116      	bne.n	8006e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e007      	b.n	8006ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea0:	2b80      	cmp	r3, #128	@ 0x80
 8006ea2:	d1ca      	bne.n	8006e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006eba:	e02d      	b.n	8006f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f88d 	bl	8006fdc <I2C_IsAcknowledgeFailed>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e02d      	b.n	8006f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d021      	beq.n	8006f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed4:	f7fd fe1e 	bl	8004b14 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d116      	bne.n	8006f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f04:	f043 0220 	orr.w	r2, r3, #32
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e007      	b.n	8006f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d1ca      	bne.n	8006ebc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f3c:	e042      	b.n	8006fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d119      	bne.n	8006f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0210 	mvn.w	r2, #16
 8006f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e029      	b.n	8006fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f80:	f7fd fdc8 	bl	8004b14 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d302      	bcc.n	8006f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d116      	bne.n	8006fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb0:	f043 0220 	orr.w	r2, r3, #32
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e007      	b.n	8006fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fce:	2b40      	cmp	r3, #64	@ 0x40
 8006fd0:	d1b5      	bne.n	8006f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff2:	d11b      	bne.n	800702c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ffc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007018:	f043 0204 	orr.w	r2, r3, #4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e267      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d075      	beq.n	8007146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800705a:	4b88      	ldr	r3, [pc, #544]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b04      	cmp	r3, #4
 8007064:	d00c      	beq.n	8007080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007066:	4b85      	ldr	r3, [pc, #532]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800706e:	2b08      	cmp	r3, #8
 8007070:	d112      	bne.n	8007098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007072:	4b82      	ldr	r3, [pc, #520]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800707a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800707e:	d10b      	bne.n	8007098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007080:	4b7e      	ldr	r3, [pc, #504]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d05b      	beq.n	8007144 <HAL_RCC_OscConfig+0x108>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d157      	bne.n	8007144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e242      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a0:	d106      	bne.n	80070b0 <HAL_RCC_OscConfig+0x74>
 80070a2:	4b76      	ldr	r3, [pc, #472]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a75      	ldr	r2, [pc, #468]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	e01d      	b.n	80070ec <HAL_RCC_OscConfig+0xb0>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070b8:	d10c      	bne.n	80070d4 <HAL_RCC_OscConfig+0x98>
 80070ba:	4b70      	ldr	r3, [pc, #448]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a6f      	ldr	r2, [pc, #444]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	4b6d      	ldr	r3, [pc, #436]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a6c      	ldr	r2, [pc, #432]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	e00b      	b.n	80070ec <HAL_RCC_OscConfig+0xb0>
 80070d4:	4b69      	ldr	r3, [pc, #420]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a68      	ldr	r2, [pc, #416]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4b66      	ldr	r3, [pc, #408]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a65      	ldr	r2, [pc, #404]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80070e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d013      	beq.n	800711c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f4:	f7fd fd0e 	bl	8004b14 <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070fc:	f7fd fd0a 	bl	8004b14 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b64      	cmp	r3, #100	@ 0x64
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e207      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800710e:	4b5b      	ldr	r3, [pc, #364]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f0      	beq.n	80070fc <HAL_RCC_OscConfig+0xc0>
 800711a:	e014      	b.n	8007146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fd fcfa 	bl	8004b14 <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007124:	f7fd fcf6 	bl	8004b14 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b64      	cmp	r3, #100	@ 0x64
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e1f3      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007136:	4b51      	ldr	r3, [pc, #324]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0xe8>
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d063      	beq.n	800721a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007152:	4b4a      	ldr	r3, [pc, #296]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 030c 	and.w	r3, r3, #12
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800715e:	4b47      	ldr	r3, [pc, #284]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007166:	2b08      	cmp	r3, #8
 8007168:	d11c      	bne.n	80071a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800716a:	4b44      	ldr	r3, [pc, #272]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d116      	bne.n	80071a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007176:	4b41      	ldr	r3, [pc, #260]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <HAL_RCC_OscConfig+0x152>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d001      	beq.n	800718e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e1c7      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718e:	4b3b      	ldr	r3, [pc, #236]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4937      	ldr	r1, [pc, #220]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071a2:	e03a      	b.n	800721a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d020      	beq.n	80071ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071ac:	4b34      	ldr	r3, [pc, #208]	@ (8007280 <HAL_RCC_OscConfig+0x244>)
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b2:	f7fd fcaf 	bl	8004b14 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071ba:	f7fd fcab 	bl	8004b14 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e1a8      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071cc:	4b2b      	ldr	r3, [pc, #172]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d8:	4b28      	ldr	r3, [pc, #160]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	4925      	ldr	r1, [pc, #148]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	600b      	str	r3, [r1, #0]
 80071ec:	e015      	b.n	800721a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ee:	4b24      	ldr	r3, [pc, #144]	@ (8007280 <HAL_RCC_OscConfig+0x244>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f4:	f7fd fc8e 	bl	8004b14 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071fc:	f7fd fc8a 	bl	8004b14 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e187      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800720e:	4b1b      	ldr	r3, [pc, #108]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d036      	beq.n	8007294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d016      	beq.n	800725c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800722e:	4b15      	ldr	r3, [pc, #84]	@ (8007284 <HAL_RCC_OscConfig+0x248>)
 8007230:	2201      	movs	r2, #1
 8007232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007234:	f7fd fc6e 	bl	8004b14 <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800723c:	f7fd fc6a 	bl	8004b14 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e167      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800724e:	4b0b      	ldr	r3, [pc, #44]	@ (800727c <HAL_RCC_OscConfig+0x240>)
 8007250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f0      	beq.n	800723c <HAL_RCC_OscConfig+0x200>
 800725a:	e01b      	b.n	8007294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800725c:	4b09      	ldr	r3, [pc, #36]	@ (8007284 <HAL_RCC_OscConfig+0x248>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007262:	f7fd fc57 	bl	8004b14 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007268:	e00e      	b.n	8007288 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800726a:	f7fd fc53 	bl	8004b14 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d907      	bls.n	8007288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e150      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
 800727c:	40023800 	.word	0x40023800
 8007280:	42470000 	.word	0x42470000
 8007284:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007288:	4b88      	ldr	r3, [pc, #544]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 800728a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1ea      	bne.n	800726a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8097 	beq.w	80073d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072a6:	4b81      	ldr	r3, [pc, #516]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10f      	bne.n	80072d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072b2:	2300      	movs	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	4b7d      	ldr	r3, [pc, #500]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ba:	4a7c      	ldr	r2, [pc, #496]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80072bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80072c2:	4b7a      	ldr	r3, [pc, #488]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d2:	4b77      	ldr	r3, [pc, #476]	@ (80074b0 <HAL_RCC_OscConfig+0x474>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d118      	bne.n	8007310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072de:	4b74      	ldr	r3, [pc, #464]	@ (80074b0 <HAL_RCC_OscConfig+0x474>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a73      	ldr	r2, [pc, #460]	@ (80074b0 <HAL_RCC_OscConfig+0x474>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ea:	f7fd fc13 	bl	8004b14 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072f2:	f7fd fc0f 	bl	8004b14 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e10c      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007304:	4b6a      	ldr	r3, [pc, #424]	@ (80074b0 <HAL_RCC_OscConfig+0x474>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d106      	bne.n	8007326 <HAL_RCC_OscConfig+0x2ea>
 8007318:	4b64      	ldr	r3, [pc, #400]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 800731a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731c:	4a63      	ldr	r2, [pc, #396]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	6713      	str	r3, [r2, #112]	@ 0x70
 8007324:	e01c      	b.n	8007360 <HAL_RCC_OscConfig+0x324>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b05      	cmp	r3, #5
 800732c:	d10c      	bne.n	8007348 <HAL_RCC_OscConfig+0x30c>
 800732e:	4b5f      	ldr	r3, [pc, #380]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007332:	4a5e      	ldr	r2, [pc, #376]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007334:	f043 0304 	orr.w	r3, r3, #4
 8007338:	6713      	str	r3, [r2, #112]	@ 0x70
 800733a:	4b5c      	ldr	r3, [pc, #368]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 800733c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800733e:	4a5b      	ldr	r2, [pc, #364]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007340:	f043 0301 	orr.w	r3, r3, #1
 8007344:	6713      	str	r3, [r2, #112]	@ 0x70
 8007346:	e00b      	b.n	8007360 <HAL_RCC_OscConfig+0x324>
 8007348:	4b58      	ldr	r3, [pc, #352]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 800734a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734c:	4a57      	ldr	r2, [pc, #348]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 800734e:	f023 0301 	bic.w	r3, r3, #1
 8007352:	6713      	str	r3, [r2, #112]	@ 0x70
 8007354:	4b55      	ldr	r3, [pc, #340]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007358:	4a54      	ldr	r2, [pc, #336]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 800735a:	f023 0304 	bic.w	r3, r3, #4
 800735e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d015      	beq.n	8007394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fd fbd4 	bl	8004b14 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800736e:	e00a      	b.n	8007386 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007370:	f7fd fbd0 	bl	8004b14 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e0cb      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007386:	4b49      	ldr	r3, [pc, #292]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0ee      	beq.n	8007370 <HAL_RCC_OscConfig+0x334>
 8007392:	e014      	b.n	80073be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007394:	f7fd fbbe 	bl	8004b14 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800739a:	e00a      	b.n	80073b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739c:	f7fd fbba 	bl	8004b14 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e0b5      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073b2:	4b3e      	ldr	r3, [pc, #248]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1ee      	bne.n	800739c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d105      	bne.n	80073d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c4:	4b39      	ldr	r3, [pc, #228]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80073c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c8:	4a38      	ldr	r2, [pc, #224]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80073ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80a1 	beq.w	800751c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073da:	4b34      	ldr	r3, [pc, #208]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 030c 	and.w	r3, r3, #12
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d05c      	beq.n	80074a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d141      	bne.n	8007472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ee:	4b31      	ldr	r3, [pc, #196]	@ (80074b4 <HAL_RCC_OscConfig+0x478>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f4:	f7fd fb8e 	bl	8004b14 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073fc:	f7fd fb8a 	bl	8004b14 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e087      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800740e:	4b27      	ldr	r3, [pc, #156]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f0      	bne.n	80073fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69da      	ldr	r2, [r3, #28]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	019b      	lsls	r3, r3, #6
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	3b01      	subs	r3, #1
 8007434:	041b      	lsls	r3, r3, #16
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	061b      	lsls	r3, r3, #24
 800743e:	491b      	ldr	r1, [pc, #108]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007440:	4313      	orrs	r3, r2
 8007442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007444:	4b1b      	ldr	r3, [pc, #108]	@ (80074b4 <HAL_RCC_OscConfig+0x478>)
 8007446:	2201      	movs	r2, #1
 8007448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744a:	f7fd fb63 	bl	8004b14 <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007452:	f7fd fb5f 	bl	8004b14 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e05c      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007464:	4b11      	ldr	r3, [pc, #68]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f0      	beq.n	8007452 <HAL_RCC_OscConfig+0x416>
 8007470:	e054      	b.n	800751c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007472:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <HAL_RCC_OscConfig+0x478>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007478:	f7fd fb4c 	bl	8004b14 <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007480:	f7fd fb48 	bl	8004b14 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e045      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007492:	4b06      	ldr	r3, [pc, #24]	@ (80074ac <HAL_RCC_OscConfig+0x470>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f0      	bne.n	8007480 <HAL_RCC_OscConfig+0x444>
 800749e:	e03d      	b.n	800751c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d107      	bne.n	80074b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e038      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
 80074ac:	40023800 	.word	0x40023800
 80074b0:	40007000 	.word	0x40007000
 80074b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007528 <HAL_RCC_OscConfig+0x4ec>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d028      	beq.n	8007518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d121      	bne.n	8007518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074de:	429a      	cmp	r2, r3
 80074e0:	d11a      	bne.n	8007518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80074e8:	4013      	ands	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d111      	bne.n	8007518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	3b01      	subs	r3, #1
 8007502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007504:	429a      	cmp	r2, r3
 8007506:	d107      	bne.n	8007518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007514:	429a      	cmp	r2, r3
 8007516:	d001      	beq.n	800751c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40023800 	.word	0x40023800

0800752c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0cc      	b.n	80076da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007540:	4b68      	ldr	r3, [pc, #416]	@ (80076e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d90c      	bls.n	8007568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b65      	ldr	r3, [pc, #404]	@ (80076e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	4b63      	ldr	r3, [pc, #396]	@ (80076e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0b8      	b.n	80076da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d020      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007580:	4b59      	ldr	r3, [pc, #356]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4a58      	ldr	r2, [pc, #352]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800758a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007598:	4b53      	ldr	r3, [pc, #332]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4a52      	ldr	r2, [pc, #328]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075a4:	4b50      	ldr	r3, [pc, #320]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	494d      	ldr	r1, [pc, #308]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d044      	beq.n	800764c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d107      	bne.n	80075da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ca:	4b47      	ldr	r3, [pc, #284]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d119      	bne.n	800760a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e07f      	b.n	80076da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d003      	beq.n	80075ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d107      	bne.n	80075fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ea:	4b3f      	ldr	r3, [pc, #252]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e06f      	b.n	80076da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075fa:	4b3b      	ldr	r3, [pc, #236]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e067      	b.n	80076da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800760a:	4b37      	ldr	r3, [pc, #220]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f023 0203 	bic.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	4934      	ldr	r1, [pc, #208]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	4313      	orrs	r3, r2
 800761a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800761c:	f7fd fa7a 	bl	8004b14 <HAL_GetTick>
 8007620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007622:	e00a      	b.n	800763a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007624:	f7fd fa76 	bl	8004b14 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e04f      	b.n	80076da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800763a:	4b2b      	ldr	r3, [pc, #172]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 020c 	and.w	r2, r3, #12
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	429a      	cmp	r2, r3
 800764a:	d1eb      	bne.n	8007624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800764c:	4b25      	ldr	r3, [pc, #148]	@ (80076e4 <HAL_RCC_ClockConfig+0x1b8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d20c      	bcs.n	8007674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800765a:	4b22      	ldr	r3, [pc, #136]	@ (80076e4 <HAL_RCC_ClockConfig+0x1b8>)
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007662:	4b20      	ldr	r3, [pc, #128]	@ (80076e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d001      	beq.n	8007674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e032      	b.n	80076da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d008      	beq.n	8007692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007680:	4b19      	ldr	r3, [pc, #100]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	4916      	ldr	r1, [pc, #88]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	4313      	orrs	r3, r2
 8007690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800769e:	4b12      	ldr	r3, [pc, #72]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	490e      	ldr	r1, [pc, #56]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076b2:	f000 f821 	bl	80076f8 <HAL_RCC_GetSysClockFreq>
 80076b6:	4602      	mov	r2, r0
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <HAL_RCC_ClockConfig+0x1bc>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	091b      	lsrs	r3, r3, #4
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	490a      	ldr	r1, [pc, #40]	@ (80076ec <HAL_RCC_ClockConfig+0x1c0>)
 80076c4:	5ccb      	ldrb	r3, [r1, r3]
 80076c6:	fa22 f303 	lsr.w	r3, r2, r3
 80076ca:	4a09      	ldr	r2, [pc, #36]	@ (80076f0 <HAL_RCC_ClockConfig+0x1c4>)
 80076cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076ce:	4b09      	ldr	r3, [pc, #36]	@ (80076f4 <HAL_RCC_ClockConfig+0x1c8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd f9da 	bl	8004a8c <HAL_InitTick>

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40023c00 	.word	0x40023c00
 80076e8:	40023800 	.word	0x40023800
 80076ec:	0800fd84 	.word	0x0800fd84
 80076f0:	20000008 	.word	0x20000008
 80076f4:	2000000c 	.word	0x2000000c

080076f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076fc:	b094      	sub	sp, #80	@ 0x50
 80076fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	647b      	str	r3, [r7, #68]	@ 0x44
 8007704:	2300      	movs	r3, #0
 8007706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007708:	2300      	movs	r3, #0
 800770a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007710:	4b79      	ldr	r3, [pc, #484]	@ (80078f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 030c 	and.w	r3, r3, #12
 8007718:	2b08      	cmp	r3, #8
 800771a:	d00d      	beq.n	8007738 <HAL_RCC_GetSysClockFreq+0x40>
 800771c:	2b08      	cmp	r3, #8
 800771e:	f200 80e1 	bhi.w	80078e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <HAL_RCC_GetSysClockFreq+0x34>
 8007726:	2b04      	cmp	r3, #4
 8007728:	d003      	beq.n	8007732 <HAL_RCC_GetSysClockFreq+0x3a>
 800772a:	e0db      	b.n	80078e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800772c:	4b73      	ldr	r3, [pc, #460]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x204>)
 800772e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007730:	e0db      	b.n	80078ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007732:	4b73      	ldr	r3, [pc, #460]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x208>)
 8007734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007736:	e0d8      	b.n	80078ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007738:	4b6f      	ldr	r3, [pc, #444]	@ (80078f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007740:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007742:	4b6d      	ldr	r3, [pc, #436]	@ (80078f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d063      	beq.n	8007816 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800774e:	4b6a      	ldr	r3, [pc, #424]	@ (80078f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	099b      	lsrs	r3, r3, #6
 8007754:	2200      	movs	r2, #0
 8007756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007758:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007760:	633b      	str	r3, [r7, #48]	@ 0x30
 8007762:	2300      	movs	r3, #0
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
 8007766:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	f04f 0000 	mov.w	r0, #0
 8007772:	f04f 0100 	mov.w	r1, #0
 8007776:	0159      	lsls	r1, r3, #5
 8007778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800777c:	0150      	lsls	r0, r2, #5
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4621      	mov	r1, r4
 8007784:	1a51      	subs	r1, r2, r1
 8007786:	6139      	str	r1, [r7, #16]
 8007788:	4629      	mov	r1, r5
 800778a:	eb63 0301 	sbc.w	r3, r3, r1
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f04f 0300 	mov.w	r3, #0
 8007798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800779c:	4659      	mov	r1, fp
 800779e:	018b      	lsls	r3, r1, #6
 80077a0:	4651      	mov	r1, sl
 80077a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077a6:	4651      	mov	r1, sl
 80077a8:	018a      	lsls	r2, r1, #6
 80077aa:	4651      	mov	r1, sl
 80077ac:	ebb2 0801 	subs.w	r8, r2, r1
 80077b0:	4659      	mov	r1, fp
 80077b2:	eb63 0901 	sbc.w	r9, r3, r1
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077ca:	4690      	mov	r8, r2
 80077cc:	4699      	mov	r9, r3
 80077ce:	4623      	mov	r3, r4
 80077d0:	eb18 0303 	adds.w	r3, r8, r3
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	462b      	mov	r3, r5
 80077d8:	eb49 0303 	adc.w	r3, r9, r3
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	f04f 0300 	mov.w	r3, #0
 80077e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077ea:	4629      	mov	r1, r5
 80077ec:	024b      	lsls	r3, r1, #9
 80077ee:	4621      	mov	r1, r4
 80077f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077f4:	4621      	mov	r1, r4
 80077f6:	024a      	lsls	r2, r1, #9
 80077f8:	4610      	mov	r0, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077fe:	2200      	movs	r2, #0
 8007800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007802:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007808:	f7f9 fa96 	bl	8000d38 <__aeabi_uldivmod>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4613      	mov	r3, r2
 8007812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007814:	e058      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007816:	4b38      	ldr	r3, [pc, #224]	@ (80078f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	099b      	lsrs	r3, r3, #6
 800781c:	2200      	movs	r2, #0
 800781e:	4618      	mov	r0, r3
 8007820:	4611      	mov	r1, r2
 8007822:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007826:	623b      	str	r3, [r7, #32]
 8007828:	2300      	movs	r3, #0
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
 800782c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	f04f 0000 	mov.w	r0, #0
 8007838:	f04f 0100 	mov.w	r1, #0
 800783c:	0159      	lsls	r1, r3, #5
 800783e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007842:	0150      	lsls	r0, r2, #5
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4641      	mov	r1, r8
 800784a:	ebb2 0a01 	subs.w	sl, r2, r1
 800784e:	4649      	mov	r1, r9
 8007850:	eb63 0b01 	sbc.w	fp, r3, r1
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007868:	ebb2 040a 	subs.w	r4, r2, sl
 800786c:	eb63 050b 	sbc.w	r5, r3, fp
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	00eb      	lsls	r3, r5, #3
 800787a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800787e:	00e2      	lsls	r2, r4, #3
 8007880:	4614      	mov	r4, r2
 8007882:	461d      	mov	r5, r3
 8007884:	4643      	mov	r3, r8
 8007886:	18e3      	adds	r3, r4, r3
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	464b      	mov	r3, r9
 800788c:	eb45 0303 	adc.w	r3, r5, r3
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800789e:	4629      	mov	r1, r5
 80078a0:	028b      	lsls	r3, r1, #10
 80078a2:	4621      	mov	r1, r4
 80078a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078a8:	4621      	mov	r1, r4
 80078aa:	028a      	lsls	r2, r1, #10
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078b2:	2200      	movs	r2, #0
 80078b4:	61bb      	str	r3, [r7, #24]
 80078b6:	61fa      	str	r2, [r7, #28]
 80078b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078bc:	f7f9 fa3c 	bl	8000d38 <__aeabi_uldivmod>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4613      	mov	r3, r2
 80078c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078c8:	4b0b      	ldr	r3, [pc, #44]	@ (80078f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	0c1b      	lsrs	r3, r3, #16
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	3301      	adds	r3, #1
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80078d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078e2:	e002      	b.n	80078ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078e4:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x204>)
 80078e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3750      	adds	r7, #80	@ 0x50
 80078f0:	46bd      	mov	sp, r7
 80078f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f6:	bf00      	nop
 80078f8:	40023800 	.word	0x40023800
 80078fc:	00f42400 	.word	0x00f42400
 8007900:	007a1200 	.word	0x007a1200

08007904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007908:	4b03      	ldr	r3, [pc, #12]	@ (8007918 <HAL_RCC_GetHCLKFreq+0x14>)
 800790a:	681b      	ldr	r3, [r3, #0]
}
 800790c:	4618      	mov	r0, r3
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20000008 	.word	0x20000008

0800791c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007920:	f7ff fff0 	bl	8007904 <HAL_RCC_GetHCLKFreq>
 8007924:	4602      	mov	r2, r0
 8007926:	4b05      	ldr	r3, [pc, #20]	@ (800793c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	0a9b      	lsrs	r3, r3, #10
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	4903      	ldr	r1, [pc, #12]	@ (8007940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007932:	5ccb      	ldrb	r3, [r1, r3]
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40023800 	.word	0x40023800
 8007940:	0800fd94 	.word	0x0800fd94

08007944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007948:	f7ff ffdc 	bl	8007904 <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0b5b      	lsrs	r3, r3, #13
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4903      	ldr	r1, [pc, #12]	@ (8007968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40023800 	.word	0x40023800
 8007968:	0800fd94 	.word	0x0800fd94

0800796c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e041      	b.n	8007a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7fc fd2e 	bl	80043f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	4619      	mov	r1, r3
 80079aa:	4610      	mov	r0, r2
 80079ac:	f000 f9a0 	bl	8007cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <HAL_TIM_PWM_Start+0x24>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	bf14      	ite	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	2300      	moveq	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	e022      	b.n	8007a76 <HAL_TIM_PWM_Start+0x6a>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d109      	bne.n	8007a4a <HAL_TIM_PWM_Start+0x3e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	bf14      	ite	ne
 8007a42:	2301      	movne	r3, #1
 8007a44:	2300      	moveq	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	e015      	b.n	8007a76 <HAL_TIM_PWM_Start+0x6a>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d109      	bne.n	8007a64 <HAL_TIM_PWM_Start+0x58>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	bf14      	ite	ne
 8007a5c:	2301      	movne	r3, #1
 8007a5e:	2300      	moveq	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	e008      	b.n	8007a76 <HAL_TIM_PWM_Start+0x6a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	bf14      	ite	ne
 8007a70:	2301      	movne	r3, #1
 8007a72:	2300      	moveq	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e068      	b.n	8007b50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_PWM_Start+0x82>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a8c:	e013      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xaa>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d104      	bne.n	8007a9e <HAL_TIM_PWM_Start+0x92>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a9c:	e00b      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xaa>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_PWM_Start+0xa2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aac:	e003      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xaa>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2201      	movs	r2, #1
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fb22 	bl	8008108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a23      	ldr	r2, [pc, #140]	@ (8007b58 <HAL_TIM_PWM_Start+0x14c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d107      	bne.n	8007ade <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007adc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b58 <HAL_TIM_PWM_Start+0x14c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d018      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x10e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af0:	d013      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x10e>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a19      	ldr	r2, [pc, #100]	@ (8007b5c <HAL_TIM_PWM_Start+0x150>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00e      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x10e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a17      	ldr	r2, [pc, #92]	@ (8007b60 <HAL_TIM_PWM_Start+0x154>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x10e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a16      	ldr	r2, [pc, #88]	@ (8007b64 <HAL_TIM_PWM_Start+0x158>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x10e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a14      	ldr	r2, [pc, #80]	@ (8007b68 <HAL_TIM_PWM_Start+0x15c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d111      	bne.n	8007b3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b06      	cmp	r3, #6
 8007b2a:	d010      	beq.n	8007b4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0201 	orr.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3c:	e007      	b.n	8007b4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40014000 	.word	0x40014000

08007b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e0ae      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b0c      	cmp	r3, #12
 8007b96:	f200 809f 	bhi.w	8007cd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bd5 	.word	0x08007bd5
 8007ba4:	08007cd9 	.word	0x08007cd9
 8007ba8:	08007cd9 	.word	0x08007cd9
 8007bac:	08007cd9 	.word	0x08007cd9
 8007bb0:	08007c15 	.word	0x08007c15
 8007bb4:	08007cd9 	.word	0x08007cd9
 8007bb8:	08007cd9 	.word	0x08007cd9
 8007bbc:	08007cd9 	.word	0x08007cd9
 8007bc0:	08007c57 	.word	0x08007c57
 8007bc4:	08007cd9 	.word	0x08007cd9
 8007bc8:	08007cd9 	.word	0x08007cd9
 8007bcc:	08007cd9 	.word	0x08007cd9
 8007bd0:	08007c97 	.word	0x08007c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f908 	bl	8007df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0208 	orr.w	r2, r2, #8
 8007bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0204 	bic.w	r2, r2, #4
 8007bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6999      	ldr	r1, [r3, #24]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	619a      	str	r2, [r3, #24]
      break;
 8007c12:	e064      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f94e 	bl	8007ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6999      	ldr	r1, [r3, #24]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	021a      	lsls	r2, r3, #8
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	619a      	str	r2, [r3, #24]
      break;
 8007c54:	e043      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 f999 	bl	8007f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0208 	orr.w	r2, r2, #8
 8007c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0204 	bic.w	r2, r2, #4
 8007c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69d9      	ldr	r1, [r3, #28]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	61da      	str	r2, [r3, #28]
      break;
 8007c94:	e023      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 f9e3 	bl	8008068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69da      	ldr	r2, [r3, #28]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69da      	ldr	r2, [r3, #28]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69d9      	ldr	r1, [r3, #28]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	021a      	lsls	r2, r3, #8
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	61da      	str	r2, [r3, #28]
      break;
 8007cd6:	e002      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a34      	ldr	r2, [pc, #208]	@ (8007dd4 <TIM_Base_SetConfig+0xe4>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00f      	beq.n	8007d28 <TIM_Base_SetConfig+0x38>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0e:	d00b      	beq.n	8007d28 <TIM_Base_SetConfig+0x38>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a31      	ldr	r2, [pc, #196]	@ (8007dd8 <TIM_Base_SetConfig+0xe8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_Base_SetConfig+0x38>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a30      	ldr	r2, [pc, #192]	@ (8007ddc <TIM_Base_SetConfig+0xec>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_Base_SetConfig+0x38>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a2f      	ldr	r2, [pc, #188]	@ (8007de0 <TIM_Base_SetConfig+0xf0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d108      	bne.n	8007d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a25      	ldr	r2, [pc, #148]	@ (8007dd4 <TIM_Base_SetConfig+0xe4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d01b      	beq.n	8007d7a <TIM_Base_SetConfig+0x8a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d48:	d017      	beq.n	8007d7a <TIM_Base_SetConfig+0x8a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a22      	ldr	r2, [pc, #136]	@ (8007dd8 <TIM_Base_SetConfig+0xe8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <TIM_Base_SetConfig+0x8a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a21      	ldr	r2, [pc, #132]	@ (8007ddc <TIM_Base_SetConfig+0xec>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00f      	beq.n	8007d7a <TIM_Base_SetConfig+0x8a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a20      	ldr	r2, [pc, #128]	@ (8007de0 <TIM_Base_SetConfig+0xf0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00b      	beq.n	8007d7a <TIM_Base_SetConfig+0x8a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a1f      	ldr	r2, [pc, #124]	@ (8007de4 <TIM_Base_SetConfig+0xf4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d007      	beq.n	8007d7a <TIM_Base_SetConfig+0x8a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007de8 <TIM_Base_SetConfig+0xf8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_Base_SetConfig+0x8a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a1d      	ldr	r2, [pc, #116]	@ (8007dec <TIM_Base_SetConfig+0xfc>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d108      	bne.n	8007d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a08      	ldr	r2, [pc, #32]	@ (8007dd4 <TIM_Base_SetConfig+0xe4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d103      	bne.n	8007dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	615a      	str	r2, [r3, #20]
}
 8007dc6:	bf00      	nop
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40000400 	.word	0x40000400
 8007ddc:	40000800 	.word	0x40000800
 8007de0:	40000c00 	.word	0x40000c00
 8007de4:	40014000 	.word	0x40014000
 8007de8:	40014400 	.word	0x40014400
 8007dec:	40014800 	.word	0x40014800

08007df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f023 0201 	bic.w	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f023 0302 	bic.w	r3, r3, #2
 8007e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb8 <TIM_OC1_SetConfig+0xc8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d10c      	bne.n	8007e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0308 	bic.w	r3, r3, #8
 8007e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f023 0304 	bic.w	r3, r3, #4
 8007e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a13      	ldr	r2, [pc, #76]	@ (8007eb8 <TIM_OC1_SetConfig+0xc8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d111      	bne.n	8007e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	621a      	str	r2, [r3, #32]
}
 8007eac:	bf00      	nop
 8007eae:	371c      	adds	r7, #28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	40010000 	.word	0x40010000

08007ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f023 0210 	bic.w	r2, r3, #16
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f023 0320 	bic.w	r3, r3, #32
 8007f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a1e      	ldr	r2, [pc, #120]	@ (8007f90 <TIM_OC2_SetConfig+0xd4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d10d      	bne.n	8007f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <TIM_OC2_SetConfig+0xd4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d113      	bne.n	8007f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	621a      	str	r2, [r3, #32]
}
 8007f82:	bf00      	nop
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40010000 	.word	0x40010000

08007f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a1d      	ldr	r2, [pc, #116]	@ (8008064 <TIM_OC3_SetConfig+0xd0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10d      	bne.n	800800e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800800c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a14      	ldr	r2, [pc, #80]	@ (8008064 <TIM_OC3_SetConfig+0xd0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d113      	bne.n	800803e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800801c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	621a      	str	r2, [r3, #32]
}
 8008058:	bf00      	nop
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	40010000 	.word	0x40010000

08008068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800809e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	031b      	lsls	r3, r3, #12
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a10      	ldr	r2, [pc, #64]	@ (8008104 <TIM_OC4_SetConfig+0x9c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d109      	bne.n	80080dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	019b      	lsls	r3, r3, #6
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40010000 	.word	0x40010000

08008108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 031f 	and.w	r3, r3, #31
 800811a:	2201      	movs	r2, #1
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a1a      	ldr	r2, [r3, #32]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	43db      	mvns	r3, r3
 800812a:	401a      	ands	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a1a      	ldr	r2, [r3, #32]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f003 031f 	and.w	r3, r3, #31
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	fa01 f303 	lsl.w	r3, r1, r3
 8008140:	431a      	orrs	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008168:	2302      	movs	r3, #2
 800816a:	e050      	b.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a1c      	ldr	r2, [pc, #112]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d018      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b8:	d013      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a18      	ldr	r2, [pc, #96]	@ (8008220 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00e      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a16      	ldr	r2, [pc, #88]	@ (8008224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d009      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a15      	ldr	r2, [pc, #84]	@ (8008228 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d004      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a13      	ldr	r2, [pc, #76]	@ (800822c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d10c      	bne.n	80081fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	40010000 	.word	0x40010000
 8008220:	40000400 	.word	0x40000400
 8008224:	40000800 	.word	0x40000800
 8008228:	40000c00 	.word	0x40000c00
 800822c:	40014000 	.word	0x40014000

08008230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e03f      	b.n	80082c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fc f928 	bl	80044ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2224      	movs	r2, #36	@ 0x24
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fddf 	bl	8008e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	691a      	ldr	r2, [r3, #16]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b08a      	sub	sp, #40	@ 0x28
 80082ce:	af02      	add	r7, sp, #8
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d17c      	bne.n	80083e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <HAL_UART_Transmit+0x2c>
 80082f0:	88fb      	ldrh	r3, [r7, #6]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e075      	b.n	80083e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_UART_Transmit+0x3e>
 8008304:	2302      	movs	r3, #2
 8008306:	e06e      	b.n	80083e6 <HAL_UART_Transmit+0x11c>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2221      	movs	r2, #33	@ 0x21
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800831e:	f7fc fbf9 	bl	8004b14 <HAL_GetTick>
 8008322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	88fa      	ldrh	r2, [r7, #6]
 800832e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008338:	d108      	bne.n	800834c <HAL_UART_Transmit+0x82>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d104      	bne.n	800834c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	61bb      	str	r3, [r7, #24]
 800834a:	e003      	b.n	8008354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800835c:	e02a      	b.n	80083b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2200      	movs	r2, #0
 8008366:	2180      	movs	r1, #128	@ 0x80
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fb1f 	bl	80089ac <UART_WaitOnFlagUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e036      	b.n	80083e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800838c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	3302      	adds	r3, #2
 8008392:	61bb      	str	r3, [r7, #24]
 8008394:	e007      	b.n	80083a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	3301      	adds	r3, #1
 80083a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1cf      	bne.n	800835e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2200      	movs	r2, #0
 80083c6:	2140      	movs	r1, #64	@ 0x40
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 faef 	bl	80089ac <UART_WaitOnFlagUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e006      	b.n	80083e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2220      	movs	r2, #32
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	e000      	b.n	80083e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083e4:	2302      	movs	r3, #2
  }
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3720      	adds	r7, #32
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	4613      	mov	r3, r2
 80083fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b20      	cmp	r3, #32
 8008406:	d11d      	bne.n	8008444 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <HAL_UART_Receive_IT+0x26>
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e016      	b.n	8008446 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_UART_Receive_IT+0x38>
 8008422:	2302      	movs	r3, #2
 8008424:	e00f      	b.n	8008446 <HAL_UART_Receive_IT+0x58>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	461a      	mov	r2, r3
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fb24 	bl	8008a88 <UART_Start_Receive_IT>
 8008440:	4603      	mov	r3, r0
 8008442:	e000      	b.n	8008446 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008444:	2302      	movs	r3, #2
  }
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b0ba      	sub	sp, #232	@ 0xe8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008476:	2300      	movs	r3, #0
 8008478:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800847c:	2300      	movs	r3, #0
 800847e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800848e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10f      	bne.n	80084b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <HAL_UART_IRQHandler+0x66>
 80084a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fc07 	bl	8008cc2 <UART_Receive_IT>
      return;
 80084b4:	e256      	b.n	8008964 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80de 	beq.w	800867c <HAL_UART_IRQHandler+0x22c>
 80084c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d106      	bne.n	80084da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80d1 	beq.w	800867c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <HAL_UART_IRQHandler+0xae>
 80084e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d005      	beq.n	80084fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	f043 0201 	orr.w	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00b      	beq.n	8008522 <HAL_UART_IRQHandler+0xd2>
 800850a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00b      	beq.n	8008546 <HAL_UART_IRQHandler+0xf6>
 800852e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	f043 0204 	orr.w	r2, r3, #4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d011      	beq.n	8008576 <HAL_UART_IRQHandler+0x126>
 8008552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b00      	cmp	r3, #0
 800855c:	d105      	bne.n	800856a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800855e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856e:	f043 0208 	orr.w	r2, r3, #8
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 81ed 	beq.w	800895a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d008      	beq.n	800859e <HAL_UART_IRQHandler+0x14e>
 800858c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fb92 	bl	8008cc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a8:	2b40      	cmp	r3, #64	@ 0x40
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <HAL_UART_IRQHandler+0x17a>
 80085c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d04f      	beq.n	800866a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa9a 	bl	8008b04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085da:	2b40      	cmp	r3, #64	@ 0x40
 80085dc:	d141      	bne.n	8008662 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3314      	adds	r3, #20
 80085e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80085f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800860a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800860e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1d9      	bne.n	80085de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862e:	2b00      	cmp	r3, #0
 8008630:	d013      	beq.n	800865a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008636:	4a7d      	ldr	r2, [pc, #500]	@ (800882c <HAL_UART_IRQHandler+0x3dc>)
 8008638:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863e:	4618      	mov	r0, r3
 8008640:	f7fd f912 	bl	8005868 <HAL_DMA_Abort_IT>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d016      	beq.n	8008678 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008658:	e00e      	b.n	8008678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f990 	bl	8008980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008660:	e00a      	b.n	8008678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f98c 	bl	8008980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008668:	e006      	b.n	8008678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f988 	bl	8008980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008676:	e170      	b.n	800895a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008678:	bf00      	nop
    return;
 800867a:	e16e      	b.n	800895a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008680:	2b01      	cmp	r3, #1
 8008682:	f040 814a 	bne.w	800891a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868a:	f003 0310 	and.w	r3, r3, #16
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 8143 	beq.w	800891a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 813c 	beq.w	800891a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086a2:	2300      	movs	r3, #0
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60bb      	str	r3, [r7, #8]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	60bb      	str	r3, [r7, #8]
 80086b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c2:	2b40      	cmp	r3, #64	@ 0x40
 80086c4:	f040 80b4 	bne.w	8008830 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 8140 	beq.w	800895e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80086e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086e6:	429a      	cmp	r2, r3
 80086e8:	f080 8139 	bcs.w	800895e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fe:	f000 8088 	beq.w	8008812 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800871c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	330c      	adds	r3, #12
 800872a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800872e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008732:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800873a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1d9      	bne.n	8008702 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3314      	adds	r3, #20
 8008754:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800875e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3314      	adds	r3, #20
 800876e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008772:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008776:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800877a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e1      	bne.n	800874e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3314      	adds	r3, #20
 8008790:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800879a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800879c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3314      	adds	r3, #20
 80087aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e3      	bne.n	800878a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	330c      	adds	r3, #12
 80087d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087e2:	f023 0310 	bic.w	r3, r3, #16
 80087e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	330c      	adds	r3, #12
 80087f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80087f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80087f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e3      	bne.n	80087d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	4618      	mov	r0, r3
 800880e:	f7fc ffbb 	bl	8005788 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800881a:	b29b      	uxth	r3, r3
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	b29b      	uxth	r3, r3
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f8b6 	bl	8008994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008828:	e099      	b.n	800895e <HAL_UART_IRQHandler+0x50e>
 800882a:	bf00      	nop
 800882c:	08008bcb 	.word	0x08008bcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008838:	b29b      	uxth	r3, r3
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 808b 	beq.w	8008962 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800884c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 8086 	beq.w	8008962 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	330c      	adds	r3, #12
 800885c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800886c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800887a:	647a      	str	r2, [r7, #68]	@ 0x44
 800887c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e3      	bne.n	8008856 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3314      	adds	r3, #20
 8008894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	623b      	str	r3, [r7, #32]
   return(result);
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3314      	adds	r3, #20
 80088ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80088b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80088b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e3      	bne.n	800888e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	330c      	adds	r3, #12
 80088f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80088f8:	61fa      	str	r2, [r7, #28]
 80088fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	69b9      	ldr	r1, [r7, #24]
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	617b      	str	r3, [r7, #20]
   return(result);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e3      	bne.n	80088d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800890c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f83e 	bl	8008994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008918:	e023      	b.n	8008962 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800891a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800891e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <HAL_UART_IRQHandler+0x4ea>
 8008926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800892a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f95d 	bl	8008bf2 <UART_Transmit_IT>
    return;
 8008938:	e014      	b.n	8008964 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00e      	beq.n	8008964 <HAL_UART_IRQHandler+0x514>
 8008946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800894a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d008      	beq.n	8008964 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f99d 	bl	8008c92 <UART_EndTransmit_IT>
    return;
 8008958:	e004      	b.n	8008964 <HAL_UART_IRQHandler+0x514>
    return;
 800895a:	bf00      	nop
 800895c:	e002      	b.n	8008964 <HAL_UART_IRQHandler+0x514>
      return;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <HAL_UART_IRQHandler+0x514>
      return;
 8008962:	bf00      	nop
  }
}
 8008964:	37e8      	adds	r7, #232	@ 0xe8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop

0800896c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b090      	sub	sp, #64	@ 0x40
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	4613      	mov	r3, r2
 80089ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089bc:	e050      	b.n	8008a60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d04c      	beq.n	8008a60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <UART_WaitOnFlagUntilTimeout+0x30>
 80089cc:	f7fc f8a2 	bl	8004b14 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d8:	429a      	cmp	r2, r3
 80089da:	d241      	bcs.n	8008a60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	330c      	adds	r3, #12
 80089e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e6:	e853 3f00 	ldrex	r3, [r3]
 80089ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80089fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e5      	bne.n	80089dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3314      	adds	r3, #20
 8008a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f023 0301 	bic.w	r3, r3, #1
 8008a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3314      	adds	r3, #20
 8008a2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a30:	623a      	str	r2, [r7, #32]
 8008a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	69f9      	ldr	r1, [r7, #28]
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e5      	bne.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e00f      	b.n	8008a80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	4013      	ands	r3, r2
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	bf0c      	ite	eq
 8008a70:	2301      	moveq	r3, #1
 8008a72:	2300      	movne	r3, #0
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d09f      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3740      	adds	r7, #64	@ 0x40
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	88fa      	ldrh	r2, [r7, #6]
 8008aa0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2222      	movs	r2, #34	@ 0x22
 8008ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d007      	beq.n	8008ad6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ad4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695a      	ldr	r2, [r3, #20]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0201 	orr.w	r2, r2, #1
 8008ae4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0220 	orr.w	r2, r2, #32
 8008af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b095      	sub	sp, #84	@ 0x54
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	330c      	adds	r3, #12
 8008b12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	330c      	adds	r3, #12
 8008b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e5      	bne.n	8008b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3314      	adds	r3, #20
 8008b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f023 0301 	bic.w	r3, r3, #1
 8008b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3314      	adds	r3, #20
 8008b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e5      	bne.n	8008b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d119      	bne.n	8008bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	330c      	adds	r3, #12
 8008b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f023 0310 	bic.w	r3, r3, #16
 8008b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	330c      	adds	r3, #12
 8008b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b9c:	61ba      	str	r2, [r7, #24]
 8008b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	6979      	ldr	r1, [r7, #20]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e5      	bne.n	8008b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008bbe:	bf00      	nop
 8008bc0:	3754      	adds	r7, #84	@ 0x54
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fecb 	bl	8008980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b21      	cmp	r3, #33	@ 0x21
 8008c04:	d13e      	bne.n	8008c84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c0e:	d114      	bne.n	8008c3a <UART_Transmit_IT+0x48>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d110      	bne.n	8008c3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	1c9a      	adds	r2, r3, #2
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	621a      	str	r2, [r3, #32]
 8008c38:	e008      	b.n	8008c4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	1c59      	adds	r1, r3, #1
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6211      	str	r1, [r2, #32]
 8008c44:	781a      	ldrb	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10f      	bne.n	8008c80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68da      	ldr	r2, [r3, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	e000      	b.n	8008c86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c84:	2302      	movs	r3, #2
  }
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ca8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff fe5a 	bl	800896c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b08c      	sub	sp, #48	@ 0x30
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b22      	cmp	r3, #34	@ 0x22
 8008cd4:	f040 80ab 	bne.w	8008e2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce0:	d117      	bne.n	8008d12 <UART_Receive_IT+0x50>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d113      	bne.n	8008d12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0a:	1c9a      	adds	r2, r3, #2
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d10:	e026      	b.n	8008d60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d24:	d007      	beq.n	8008d36 <UART_Receive_IT+0x74>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <UART_Receive_IT+0x82>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e008      	b.n	8008d56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	3b01      	subs	r3, #1
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d15a      	bne.n	8008e2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 0220 	bic.w	r2, r2, #32
 8008d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	695a      	ldr	r2, [r3, #20]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0201 	bic.w	r2, r2, #1
 8008da2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d135      	bne.n	8008e20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f023 0310 	bic.w	r3, r3, #16
 8008dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	330c      	adds	r3, #12
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dda:	623a      	str	r2, [r7, #32]
 8008ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	69f9      	ldr	r1, [r7, #28]
 8008de0:	6a3a      	ldr	r2, [r7, #32]
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e5      	bne.n	8008dba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b10      	cmp	r3, #16
 8008dfa:	d10a      	bne.n	8008e12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff fdbb 	bl	8008994 <HAL_UARTEx_RxEventCallback>
 8008e1e:	e002      	b.n	8008e26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7f9 fd11 	bl	8002848 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	e002      	b.n	8008e30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e000      	b.n	8008e30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e2e:	2302      	movs	r3, #2
  }
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3730      	adds	r7, #48	@ 0x30
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e3c:	b0c0      	sub	sp, #256	@ 0x100
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e54:	68d9      	ldr	r1, [r3, #12]
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	ea40 0301 	orr.w	r3, r0, r1
 8008e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e90:	f021 010c 	bic.w	r1, r1, #12
 8008e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb2:	6999      	ldr	r1, [r3, #24]
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	ea40 0301 	orr.w	r3, r0, r1
 8008ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	4b8f      	ldr	r3, [pc, #572]	@ (8009104 <UART_SetConfig+0x2cc>)
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d005      	beq.n	8008ed8 <UART_SetConfig+0xa0>
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8009108 <UART_SetConfig+0x2d0>)
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d104      	bne.n	8008ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ed8:	f7fe fd34 	bl	8007944 <HAL_RCC_GetPCLK2Freq>
 8008edc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ee0:	e003      	b.n	8008eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ee2:	f7fe fd1b 	bl	800791c <HAL_RCC_GetPCLK1Freq>
 8008ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ef4:	f040 810c 	bne.w	8009110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	1891      	adds	r1, r2, r2
 8008f10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008f12:	415b      	adcs	r3, r3
 8008f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	eb12 0801 	adds.w	r8, r2, r1
 8008f20:	4629      	mov	r1, r5
 8008f22:	eb43 0901 	adc.w	r9, r3, r1
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	4699      	mov	r9, r3
 8008f3e:	4623      	mov	r3, r4
 8008f40:	eb18 0303 	adds.w	r3, r8, r3
 8008f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f48:	462b      	mov	r3, r5
 8008f4a:	eb49 0303 	adc.w	r3, r9, r3
 8008f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f66:	460b      	mov	r3, r1
 8008f68:	18db      	adds	r3, r3, r3
 8008f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	eb42 0303 	adc.w	r3, r2, r3
 8008f72:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f7c:	f7f7 fedc 	bl	8000d38 <__aeabi_uldivmod>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4b61      	ldr	r3, [pc, #388]	@ (800910c <UART_SetConfig+0x2d4>)
 8008f86:	fba3 2302 	umull	r2, r3, r3, r2
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	011c      	lsls	r4, r3, #4
 8008f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	1891      	adds	r1, r2, r2
 8008fa6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008fa8:	415b      	adcs	r3, r3
 8008faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fd0:	4692      	mov	sl, r2
 8008fd2:	469b      	mov	fp, r3
 8008fd4:	4643      	mov	r3, r8
 8008fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8008fda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8008fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	18db      	adds	r3, r3, r3
 8009000:	643b      	str	r3, [r7, #64]	@ 0x40
 8009002:	4613      	mov	r3, r2
 8009004:	eb42 0303 	adc.w	r3, r2, r3
 8009008:	647b      	str	r3, [r7, #68]	@ 0x44
 800900a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800900e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009012:	f7f7 fe91 	bl	8000d38 <__aeabi_uldivmod>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4611      	mov	r1, r2
 800901c:	4b3b      	ldr	r3, [pc, #236]	@ (800910c <UART_SetConfig+0x2d4>)
 800901e:	fba3 2301 	umull	r2, r3, r3, r1
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	2264      	movs	r2, #100	@ 0x64
 8009026:	fb02 f303 	mul.w	r3, r2, r3
 800902a:	1acb      	subs	r3, r1, r3
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009032:	4b36      	ldr	r3, [pc, #216]	@ (800910c <UART_SetConfig+0x2d4>)
 8009034:	fba3 2302 	umull	r2, r3, r3, r2
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009040:	441c      	add	r4, r3
 8009042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009046:	2200      	movs	r2, #0
 8009048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800904c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	1891      	adds	r1, r2, r2
 800905a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800905c:	415b      	adcs	r3, r3
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009064:	4641      	mov	r1, r8
 8009066:	1851      	adds	r1, r2, r1
 8009068:	6339      	str	r1, [r7, #48]	@ 0x30
 800906a:	4649      	mov	r1, r9
 800906c:	414b      	adcs	r3, r1
 800906e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009070:	f04f 0200 	mov.w	r2, #0
 8009074:	f04f 0300 	mov.w	r3, #0
 8009078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800907c:	4659      	mov	r1, fp
 800907e:	00cb      	lsls	r3, r1, #3
 8009080:	4651      	mov	r1, sl
 8009082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009086:	4651      	mov	r1, sl
 8009088:	00ca      	lsls	r2, r1, #3
 800908a:	4610      	mov	r0, r2
 800908c:	4619      	mov	r1, r3
 800908e:	4603      	mov	r3, r0
 8009090:	4642      	mov	r2, r8
 8009092:	189b      	adds	r3, r3, r2
 8009094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009098:	464b      	mov	r3, r9
 800909a:	460a      	mov	r2, r1
 800909c:	eb42 0303 	adc.w	r3, r2, r3
 80090a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80090b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090b8:	460b      	mov	r3, r1
 80090ba:	18db      	adds	r3, r3, r3
 80090bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090be:	4613      	mov	r3, r2
 80090c0:	eb42 0303 	adc.w	r3, r2, r3
 80090c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80090ce:	f7f7 fe33 	bl	8000d38 <__aeabi_uldivmod>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4b0d      	ldr	r3, [pc, #52]	@ (800910c <UART_SetConfig+0x2d4>)
 80090d8:	fba3 1302 	umull	r1, r3, r3, r2
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	2164      	movs	r1, #100	@ 0x64
 80090e0:	fb01 f303 	mul.w	r3, r1, r3
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	3332      	adds	r3, #50	@ 0x32
 80090ea:	4a08      	ldr	r2, [pc, #32]	@ (800910c <UART_SetConfig+0x2d4>)
 80090ec:	fba2 2303 	umull	r2, r3, r2, r3
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	f003 0207 	and.w	r2, r3, #7
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4422      	add	r2, r4
 80090fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009100:	e106      	b.n	8009310 <UART_SetConfig+0x4d8>
 8009102:	bf00      	nop
 8009104:	40011000 	.word	0x40011000
 8009108:	40011400 	.word	0x40011400
 800910c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009114:	2200      	movs	r2, #0
 8009116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800911a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800911e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009122:	4642      	mov	r2, r8
 8009124:	464b      	mov	r3, r9
 8009126:	1891      	adds	r1, r2, r2
 8009128:	6239      	str	r1, [r7, #32]
 800912a:	415b      	adcs	r3, r3
 800912c:	627b      	str	r3, [r7, #36]	@ 0x24
 800912e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009132:	4641      	mov	r1, r8
 8009134:	1854      	adds	r4, r2, r1
 8009136:	4649      	mov	r1, r9
 8009138:	eb43 0501 	adc.w	r5, r3, r1
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	00eb      	lsls	r3, r5, #3
 8009146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800914a:	00e2      	lsls	r2, r4, #3
 800914c:	4614      	mov	r4, r2
 800914e:	461d      	mov	r5, r3
 8009150:	4643      	mov	r3, r8
 8009152:	18e3      	adds	r3, r4, r3
 8009154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009158:	464b      	mov	r3, r9
 800915a:	eb45 0303 	adc.w	r3, r5, r3
 800915e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800916e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009172:	f04f 0200 	mov.w	r2, #0
 8009176:	f04f 0300 	mov.w	r3, #0
 800917a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800917e:	4629      	mov	r1, r5
 8009180:	008b      	lsls	r3, r1, #2
 8009182:	4621      	mov	r1, r4
 8009184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009188:	4621      	mov	r1, r4
 800918a:	008a      	lsls	r2, r1, #2
 800918c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009190:	f7f7 fdd2 	bl	8000d38 <__aeabi_uldivmod>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4b60      	ldr	r3, [pc, #384]	@ (800931c <UART_SetConfig+0x4e4>)
 800919a:	fba3 2302 	umull	r2, r3, r3, r2
 800919e:	095b      	lsrs	r3, r3, #5
 80091a0:	011c      	lsls	r4, r3, #4
 80091a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80091b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80091b4:	4642      	mov	r2, r8
 80091b6:	464b      	mov	r3, r9
 80091b8:	1891      	adds	r1, r2, r2
 80091ba:	61b9      	str	r1, [r7, #24]
 80091bc:	415b      	adcs	r3, r3
 80091be:	61fb      	str	r3, [r7, #28]
 80091c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091c4:	4641      	mov	r1, r8
 80091c6:	1851      	adds	r1, r2, r1
 80091c8:	6139      	str	r1, [r7, #16]
 80091ca:	4649      	mov	r1, r9
 80091cc:	414b      	adcs	r3, r1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091dc:	4659      	mov	r1, fp
 80091de:	00cb      	lsls	r3, r1, #3
 80091e0:	4651      	mov	r1, sl
 80091e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e6:	4651      	mov	r1, sl
 80091e8:	00ca      	lsls	r2, r1, #3
 80091ea:	4610      	mov	r0, r2
 80091ec:	4619      	mov	r1, r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	4642      	mov	r2, r8
 80091f2:	189b      	adds	r3, r3, r2
 80091f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091f8:	464b      	mov	r3, r9
 80091fa:	460a      	mov	r2, r1
 80091fc:	eb42 0303 	adc.w	r3, r2, r3
 8009200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800920e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	f04f 0300 	mov.w	r3, #0
 8009218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800921c:	4649      	mov	r1, r9
 800921e:	008b      	lsls	r3, r1, #2
 8009220:	4641      	mov	r1, r8
 8009222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009226:	4641      	mov	r1, r8
 8009228:	008a      	lsls	r2, r1, #2
 800922a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800922e:	f7f7 fd83 	bl	8000d38 <__aeabi_uldivmod>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4611      	mov	r1, r2
 8009238:	4b38      	ldr	r3, [pc, #224]	@ (800931c <UART_SetConfig+0x4e4>)
 800923a:	fba3 2301 	umull	r2, r3, r3, r1
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	2264      	movs	r2, #100	@ 0x64
 8009242:	fb02 f303 	mul.w	r3, r2, r3
 8009246:	1acb      	subs	r3, r1, r3
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	3332      	adds	r3, #50	@ 0x32
 800924c:	4a33      	ldr	r2, [pc, #204]	@ (800931c <UART_SetConfig+0x4e4>)
 800924e:	fba2 2303 	umull	r2, r3, r2, r3
 8009252:	095b      	lsrs	r3, r3, #5
 8009254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009258:	441c      	add	r4, r3
 800925a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800925e:	2200      	movs	r2, #0
 8009260:	673b      	str	r3, [r7, #112]	@ 0x70
 8009262:	677a      	str	r2, [r7, #116]	@ 0x74
 8009264:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009268:	4642      	mov	r2, r8
 800926a:	464b      	mov	r3, r9
 800926c:	1891      	adds	r1, r2, r2
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	415b      	adcs	r3, r3
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009278:	4641      	mov	r1, r8
 800927a:	1851      	adds	r1, r2, r1
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	4649      	mov	r1, r9
 8009280:	414b      	adcs	r3, r1
 8009282:	607b      	str	r3, [r7, #4]
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	f04f 0300 	mov.w	r3, #0
 800928c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009290:	4659      	mov	r1, fp
 8009292:	00cb      	lsls	r3, r1, #3
 8009294:	4651      	mov	r1, sl
 8009296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800929a:	4651      	mov	r1, sl
 800929c:	00ca      	lsls	r2, r1, #3
 800929e:	4610      	mov	r0, r2
 80092a0:	4619      	mov	r1, r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	4642      	mov	r2, r8
 80092a6:	189b      	adds	r3, r3, r2
 80092a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092aa:	464b      	mov	r3, r9
 80092ac:	460a      	mov	r2, r1
 80092ae:	eb42 0303 	adc.w	r3, r2, r3
 80092b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80092be:	667a      	str	r2, [r7, #100]	@ 0x64
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	f04f 0300 	mov.w	r3, #0
 80092c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80092cc:	4649      	mov	r1, r9
 80092ce:	008b      	lsls	r3, r1, #2
 80092d0:	4641      	mov	r1, r8
 80092d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092d6:	4641      	mov	r1, r8
 80092d8:	008a      	lsls	r2, r1, #2
 80092da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80092de:	f7f7 fd2b 	bl	8000d38 <__aeabi_uldivmod>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4b0d      	ldr	r3, [pc, #52]	@ (800931c <UART_SetConfig+0x4e4>)
 80092e8:	fba3 1302 	umull	r1, r3, r3, r2
 80092ec:	095b      	lsrs	r3, r3, #5
 80092ee:	2164      	movs	r1, #100	@ 0x64
 80092f0:	fb01 f303 	mul.w	r3, r1, r3
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	011b      	lsls	r3, r3, #4
 80092f8:	3332      	adds	r3, #50	@ 0x32
 80092fa:	4a08      	ldr	r2, [pc, #32]	@ (800931c <UART_SetConfig+0x4e4>)
 80092fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009300:	095b      	lsrs	r3, r3, #5
 8009302:	f003 020f 	and.w	r2, r3, #15
 8009306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4422      	add	r2, r4
 800930e:	609a      	str	r2, [r3, #8]
}
 8009310:	bf00      	nop
 8009312:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009316:	46bd      	mov	sp, r7
 8009318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800931c:	51eb851f 	.word	0x51eb851f

08009320 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009320:	b480      	push	{r7}
 8009322:	b089      	sub	sp, #36	@ 0x24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	fa93 f3a3 	rbit	r3, r3
 800933a:	613b      	str	r3, [r7, #16]
  return result;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	fab3 f383 	clz	r3, r3
 8009342:	b2db      	uxtb	r3, r3
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	2103      	movs	r1, #3
 8009348:	fa01 f303 	lsl.w	r3, r1, r3
 800934c:	43db      	mvns	r3, r3
 800934e:	401a      	ands	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	fa93 f3a3 	rbit	r3, r3
 800935a:	61bb      	str	r3, [r7, #24]
  return result;
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	fab3 f383 	clz	r3, r3
 8009362:	b2db      	uxtb	r3, r3
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	fa01 f303 	lsl.w	r3, r1, r3
 800936c:	431a      	orrs	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	3724      	adds	r7, #36	@ 0x24
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	43db      	mvns	r3, r3
 8009392:	401a      	ands	r2, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	fb01 f303 	mul.w	r3, r1, r3
 800939c:	431a      	orrs	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	605a      	str	r2, [r3, #4]
}
 80093a2:	bf00      	nop
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b089      	sub	sp, #36	@ 0x24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	fa93 f3a3 	rbit	r3, r3
 80093c8:	613b      	str	r3, [r7, #16]
  return result;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	fab3 f383 	clz	r3, r3
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	2103      	movs	r1, #3
 80093d6:	fa01 f303 	lsl.w	r3, r1, r3
 80093da:	43db      	mvns	r3, r3
 80093dc:	401a      	ands	r2, r3
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	fa93 f3a3 	rbit	r3, r3
 80093e8:	61bb      	str	r3, [r7, #24]
  return result;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	fab3 f383 	clz	r3, r3
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	fa01 f303 	lsl.w	r3, r1, r3
 80093fa:	431a      	orrs	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009400:	bf00      	nop
 8009402:	3724      	adds	r7, #36	@ 0x24
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800940c:	b480      	push	{r7}
 800940e:	b089      	sub	sp, #36	@ 0x24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	fa93 f3a3 	rbit	r3, r3
 8009426:	613b      	str	r3, [r7, #16]
  return result;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	fab3 f383 	clz	r3, r3
 800942e:	b2db      	uxtb	r3, r3
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	2103      	movs	r1, #3
 8009434:	fa01 f303 	lsl.w	r3, r1, r3
 8009438:	43db      	mvns	r3, r3
 800943a:	401a      	ands	r2, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	fa93 f3a3 	rbit	r3, r3
 8009446:	61bb      	str	r3, [r7, #24]
  return result;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	fab3 f383 	clz	r3, r3
 800944e:	b2db      	uxtb	r3, r3
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	fa01 f303 	lsl.w	r3, r1, r3
 8009458:	431a      	orrs	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	60da      	str	r2, [r3, #12]
}
 800945e:	bf00      	nop
 8009460:	3724      	adds	r7, #36	@ 0x24
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800946a:	b480      	push	{r7}
 800946c:	b089      	sub	sp, #36	@ 0x24
 800946e:	af00      	add	r7, sp, #0
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a1a      	ldr	r2, [r3, #32]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	fa93 f3a3 	rbit	r3, r3
 8009484:	613b      	str	r3, [r7, #16]
  return result;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	fab3 f383 	clz	r3, r3
 800948c:	b2db      	uxtb	r3, r3
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	210f      	movs	r1, #15
 8009492:	fa01 f303 	lsl.w	r3, r1, r3
 8009496:	43db      	mvns	r3, r3
 8009498:	401a      	ands	r2, r3
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	fa93 f3a3 	rbit	r3, r3
 80094a4:	61bb      	str	r3, [r7, #24]
  return result;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	fab3 f383 	clz	r3, r3
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	fa01 f303 	lsl.w	r3, r1, r3
 80094b6:	431a      	orrs	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80094bc:	bf00      	nop
 80094be:	3724      	adds	r7, #36	@ 0x24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b089      	sub	sp, #36	@ 0x24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	fa93 f3a3 	rbit	r3, r3
 80094e4:	613b      	str	r3, [r7, #16]
  return result;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	fab3 f383 	clz	r3, r3
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	210f      	movs	r1, #15
 80094f2:	fa01 f303 	lsl.w	r3, r1, r3
 80094f6:	43db      	mvns	r3, r3
 80094f8:	401a      	ands	r2, r3
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	0a1b      	lsrs	r3, r3, #8
 80094fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	fa93 f3a3 	rbit	r3, r3
 8009506:	61bb      	str	r3, [r7, #24]
  return result;
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	fab3 f383 	clz	r3, r3
 800950e:	b2db      	uxtb	r3, r3
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	fa01 f303 	lsl.w	r3, r1, r3
 8009518:	431a      	orrs	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800951e:	bf00      	nop
 8009520:	3724      	adds	r7, #36	@ 0x24
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b088      	sub	sp, #32
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8009538:	2300      	movs	r3, #0
 800953a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	fa93 f3a3 	rbit	r3, r3
 8009548:	613b      	str	r3, [r7, #16]
  return result;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	fab3 f383 	clz	r3, r3
 8009550:	b2db      	uxtb	r3, r3
 8009552:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009554:	e050      	b.n	80095f8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	2101      	movs	r1, #1
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	fa01 f303 	lsl.w	r3, r1, r3
 8009562:	4013      	ands	r3, r2
 8009564:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d042      	beq.n	80095f2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d003      	beq.n	800957c <LL_GPIO_Init+0x52>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d10d      	bne.n	8009598 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	461a      	mov	r2, r3
 8009582:	69b9      	ldr	r1, [r7, #24]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ff12 	bl	80093ae <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	461a      	mov	r2, r3
 8009590:	69b9      	ldr	r1, [r7, #24]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff fef3 	bl	800937e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	461a      	mov	r2, r3
 800959e:	69b9      	ldr	r1, [r7, #24]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff ff33 	bl	800940c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d11a      	bne.n	80095e4 <LL_GPIO_Init+0xba>
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	fa93 f3a3 	rbit	r3, r3
 80095b8:	60bb      	str	r3, [r7, #8]
  return result;
 80095ba:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80095bc:	fab3 f383 	clz	r3, r3
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b07      	cmp	r3, #7
 80095c4:	d807      	bhi.n	80095d6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	461a      	mov	r2, r3
 80095cc:	69b9      	ldr	r1, [r7, #24]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ff4b 	bl	800946a <LL_GPIO_SetAFPin_0_7>
 80095d4:	e006      	b.n	80095e4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	461a      	mov	r2, r3
 80095dc:	69b9      	ldr	r1, [r7, #24]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7ff ff72 	bl	80094c8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	461a      	mov	r2, r3
 80095ea:	69b9      	ldr	r1, [r7, #24]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fe97 	bl	8009320 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	3301      	adds	r3, #1
 80095f6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1a7      	bne.n	8009556 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <LL_RCC_GetSysClkSource+0x18>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 030c 	and.w	r3, r3, #12
}
 800961c:	4618      	mov	r0, r3
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40023800 	.word	0x40023800

0800962c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009630:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <LL_RCC_GetAHBPrescaler+0x18>)
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009638:	4618      	mov	r0, r3
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	40023800 	.word	0x40023800

08009648 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009648:	b480      	push	{r7}
 800964a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800964c:	4b04      	ldr	r3, [pc, #16]	@ (8009660 <LL_RCC_GetAPB1Prescaler+0x18>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8009654:	4618      	mov	r0, r3
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	40023800 	.word	0x40023800

08009664 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8009664:	b480      	push	{r7}
 8009666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009668:	4b04      	ldr	r3, [pc, #16]	@ (800967c <LL_RCC_GetAPB2Prescaler+0x18>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8009670:	4618      	mov	r0, r3
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	40023800 	.word	0x40023800

08009680 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009680:	b480      	push	{r7}
 8009682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009684:	4b04      	ldr	r3, [pc, #16]	@ (8009698 <LL_RCC_PLL_GetMainSource+0x18>)
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800968c:	4618      	mov	r0, r3
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	40023800 	.word	0x40023800

0800969c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80096a0:	4b04      	ldr	r3, [pc, #16]	@ (80096b4 <LL_RCC_PLL_GetN+0x18>)
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	099b      	lsrs	r3, r3, #6
 80096a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	40023800 	.word	0x40023800

080096b8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80096bc:	4b04      	ldr	r3, [pc, #16]	@ (80096d0 <LL_RCC_PLL_GetP+0x18>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40023800 	.word	0x40023800

080096d4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80096d8:	4b04      	ldr	r3, [pc, #16]	@ (80096ec <LL_RCC_PLL_GetDivider+0x18>)
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40023800 	.word	0x40023800

080096f0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80096f8:	f000 f820 	bl	800973c <RCC_GetSystemClockFreq>
 80096fc:	4602      	mov	r2, r0
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f840 	bl	800978c <RCC_GetHCLKClockFreq>
 800970c:	4602      	mov	r2, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f84e 	bl	80097b8 <RCC_GetPCLK1ClockFreq>
 800971c:	4602      	mov	r2, r0
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f85a 	bl	80097e0 <RCC_GetPCLK2ClockFreq>
 800972c:	4602      	mov	r2, r0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60da      	str	r2, [r3, #12]
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009746:	f7ff ff63 	bl	8009610 <LL_RCC_GetSysClkSource>
 800974a:	4603      	mov	r3, r0
 800974c:	2b08      	cmp	r3, #8
 800974e:	d00c      	beq.n	800976a <RCC_GetSystemClockFreq+0x2e>
 8009750:	2b08      	cmp	r3, #8
 8009752:	d80f      	bhi.n	8009774 <RCC_GetSystemClockFreq+0x38>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <RCC_GetSystemClockFreq+0x22>
 8009758:	2b04      	cmp	r3, #4
 800975a:	d003      	beq.n	8009764 <RCC_GetSystemClockFreq+0x28>
 800975c:	e00a      	b.n	8009774 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800975e:	4b09      	ldr	r3, [pc, #36]	@ (8009784 <RCC_GetSystemClockFreq+0x48>)
 8009760:	607b      	str	r3, [r7, #4]
      break;
 8009762:	e00a      	b.n	800977a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009764:	4b08      	ldr	r3, [pc, #32]	@ (8009788 <RCC_GetSystemClockFreq+0x4c>)
 8009766:	607b      	str	r3, [r7, #4]
      break;
 8009768:	e007      	b.n	800977a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800976a:	2008      	movs	r0, #8
 800976c:	f000 f84c 	bl	8009808 <RCC_PLL_GetFreqDomain_SYS>
 8009770:	6078      	str	r0, [r7, #4]
      break;
 8009772:	e002      	b.n	800977a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8009774:	4b03      	ldr	r3, [pc, #12]	@ (8009784 <RCC_GetSystemClockFreq+0x48>)
 8009776:	607b      	str	r3, [r7, #4]
      break;
 8009778:	bf00      	nop
  }

  return frequency;
 800977a:	687b      	ldr	r3, [r7, #4]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	00f42400 	.word	0x00f42400
 8009788:	007a1200 	.word	0x007a1200

0800978c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009794:	f7ff ff4a 	bl	800962c <LL_RCC_GetAHBPrescaler>
 8009798:	4603      	mov	r3, r0
 800979a:	091b      	lsrs	r3, r3, #4
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	4a04      	ldr	r2, [pc, #16]	@ (80097b4 <RCC_GetHCLKClockFreq+0x28>)
 80097a2:	5cd3      	ldrb	r3, [r2, r3]
 80097a4:	461a      	mov	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	40d3      	lsrs	r3, r2
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	0800fd84 	.word	0x0800fd84

080097b8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80097c0:	f7ff ff42 	bl	8009648 <LL_RCC_GetAPB1Prescaler>
 80097c4:	4603      	mov	r3, r0
 80097c6:	0a9b      	lsrs	r3, r3, #10
 80097c8:	4a04      	ldr	r2, [pc, #16]	@ (80097dc <RCC_GetPCLK1ClockFreq+0x24>)
 80097ca:	5cd3      	ldrb	r3, [r2, r3]
 80097cc:	461a      	mov	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	40d3      	lsrs	r3, r2
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	0800fd94 	.word	0x0800fd94

080097e0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80097e8:	f7ff ff3c 	bl	8009664 <LL_RCC_GetAPB2Prescaler>
 80097ec:	4603      	mov	r3, r0
 80097ee:	0b5b      	lsrs	r3, r3, #13
 80097f0:	4a04      	ldr	r2, [pc, #16]	@ (8009804 <RCC_GetPCLK2ClockFreq+0x24>)
 80097f2:	5cd3      	ldrb	r3, [r2, r3]
 80097f4:	461a      	mov	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	40d3      	lsrs	r3, r2
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	0800fd94 	.word	0x0800fd94

08009808 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8009808:	b590      	push	{r4, r7, lr}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	2300      	movs	r3, #0
 800981a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800981c:	f7ff ff30 	bl	8009680 <LL_RCC_PLL_GetMainSource>
 8009820:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800982e:	d003      	beq.n	8009838 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8009830:	e005      	b.n	800983e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009832:	4b12      	ldr	r3, [pc, #72]	@ (800987c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8009834:	617b      	str	r3, [r7, #20]
      break;
 8009836:	e005      	b.n	8009844 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009838:	4b11      	ldr	r3, [pc, #68]	@ (8009880 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800983a:	617b      	str	r3, [r7, #20]
      break;
 800983c:	e002      	b.n	8009844 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800983e:	4b0f      	ldr	r3, [pc, #60]	@ (800987c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8009840:	617b      	str	r3, [r7, #20]
      break;
 8009842:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b08      	cmp	r3, #8
 8009848:	d113      	bne.n	8009872 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800984a:	f7ff ff43 	bl	80096d4 <LL_RCC_PLL_GetDivider>
 800984e:	4602      	mov	r2, r0
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	fbb3 f4f2 	udiv	r4, r3, r2
 8009856:	f7ff ff21 	bl	800969c <LL_RCC_PLL_GetN>
 800985a:	4603      	mov	r3, r0
 800985c:	fb03 f404 	mul.w	r4, r3, r4
 8009860:	f7ff ff2a 	bl	80096b8 <LL_RCC_PLL_GetP>
 8009864:	4603      	mov	r3, r0
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	3301      	adds	r3, #1
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	fbb4 f3f3 	udiv	r3, r4, r3
 8009870:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8009872:	693b      	ldr	r3, [r7, #16]
}
 8009874:	4618      	mov	r0, r3
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	bd90      	pop	{r4, r7, pc}
 800987c:	00f42400 	.word	0x00f42400
 8009880:	007a1200 	.word	0x007a1200

08009884 <LL_TIM_SetPrescaler>:
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <LL_TIM_SetAutoReload>:
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <LL_TIM_SetRepetitionCounter>:
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <LL_TIM_OC_SetCompareCH1>:
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <LL_TIM_OC_SetCompareCH2>:
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <LL_TIM_OC_SetCompareCH3>:
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <LL_TIM_OC_SetCompareCH4>:
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	f043 0201 	orr.w	r2, r3, #1
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	615a      	str	r2, [r3, #20]
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a31      	ldr	r2, [pc, #196]	@ (8009a40 <LL_TIM_Init+0xd8>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d00f      	beq.n	80099a0 <LL_TIM_Init+0x38>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009986:	d00b      	beq.n	80099a0 <LL_TIM_Init+0x38>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a2e      	ldr	r2, [pc, #184]	@ (8009a44 <LL_TIM_Init+0xdc>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d007      	beq.n	80099a0 <LL_TIM_Init+0x38>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a2d      	ldr	r2, [pc, #180]	@ (8009a48 <LL_TIM_Init+0xe0>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <LL_TIM_Init+0x38>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a2c      	ldr	r2, [pc, #176]	@ (8009a4c <LL_TIM_Init+0xe4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d106      	bne.n	80099ae <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a23      	ldr	r2, [pc, #140]	@ (8009a40 <LL_TIM_Init+0xd8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d01b      	beq.n	80099ee <LL_TIM_Init+0x86>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099bc:	d017      	beq.n	80099ee <LL_TIM_Init+0x86>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a20      	ldr	r2, [pc, #128]	@ (8009a44 <LL_TIM_Init+0xdc>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d013      	beq.n	80099ee <LL_TIM_Init+0x86>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009a48 <LL_TIM_Init+0xe0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00f      	beq.n	80099ee <LL_TIM_Init+0x86>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a1e      	ldr	r2, [pc, #120]	@ (8009a4c <LL_TIM_Init+0xe4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d00b      	beq.n	80099ee <LL_TIM_Init+0x86>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009a50 <LL_TIM_Init+0xe8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d007      	beq.n	80099ee <LL_TIM_Init+0x86>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009a54 <LL_TIM_Init+0xec>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d003      	beq.n	80099ee <LL_TIM_Init+0x86>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a58 <LL_TIM_Init+0xf0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d106      	bne.n	80099fc <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff ff49 	bl	80098a0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ff35 	bl	8009884 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a08      	ldr	r2, [pc, #32]	@ (8009a40 <LL_TIM_Init+0xd8>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d105      	bne.n	8009a2e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ff47 	bl	80098bc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff ff8a 	bl	8009948 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	40010000 	.word	0x40010000
 8009a44:	40000400 	.word	0x40000400
 8009a48:	40000800 	.word	0x40000800
 8009a4c:	40000c00 	.word	0x40000c00
 8009a50:	40014000 	.word	0x40014000
 8009a54:	40014400 	.word	0x40014400
 8009a58:	40014800 	.word	0x40014800

08009a5c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a72:	d027      	beq.n	8009ac4 <LL_TIM_OC_Init+0x68>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a7a:	d82a      	bhi.n	8009ad2 <LL_TIM_OC_Init+0x76>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a82:	d018      	beq.n	8009ab6 <LL_TIM_OC_Init+0x5a>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a8a:	d822      	bhi.n	8009ad2 <LL_TIM_OC_Init+0x76>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d003      	beq.n	8009a9a <LL_TIM_OC_Init+0x3e>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b10      	cmp	r3, #16
 8009a96:	d007      	beq.n	8009aa8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8009a98:	e01b      	b.n	8009ad2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 f81f 	bl	8009ae0 <OC1Config>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa6:	e015      	b.n	8009ad4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 f87e 	bl	8009bac <OC2Config>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab4:	e00e      	b.n	8009ad4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f8e1 	bl	8009c80 <OC3Config>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac2:	e007      	b.n	8009ad4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f944 	bl	8009d54 <OC4Config>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad0:	e000      	b.n	8009ad4 <LL_TIM_OC_Init+0x78>
      break;
 8009ad2:	bf00      	nop
  }

  return result;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	f023 0201 	bic.w	r2, r3, #1
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f023 0202 	bic.w	r2, r3, #2
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f023 0201 	bic.w	r2, r3, #1
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ba8 <OC1Config+0xc8>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d11e      	bne.n	8009b80 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f023 0208 	bic.w	r2, r3, #8
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f023 0204 	bic.w	r2, r3, #4
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff fea0 	bl	80098d8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	40010000 	.word	0x40010000

08009bac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	f023 0210 	bic.w	r2, r3, #16
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f023 0220 	bic.w	r2, r3, #32
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f023 0210 	bic.w	r2, r3, #16
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c7c <OC2Config+0xd0>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d11f      	bne.n	8009c54 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	019b      	lsls	r3, r3, #6
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	019b      	lsls	r3, r3, #6
 8009c30:	4313      	orrs	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4313      	orrs	r3, r2
 8009c42:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	4313      	orrs	r3, r2
 8009c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff fe44 	bl	80098f4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	40010000 	.word	0x40010000

08009c80 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0303 	bic.w	r3, r3, #3
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	021b      	lsls	r3, r3, #8
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8009d50 <OC3Config+0xd0>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d11f      	bne.n	8009d26 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	029b      	lsls	r3, r3, #10
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	029b      	lsls	r3, r3, #10
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	011b      	lsls	r3, r3, #4
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	015b      	lsls	r3, r3, #5
 8009d22:	4313      	orrs	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fde9 	bl	8009910 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40010000 	.word	0x40010000

08009d54 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	021b      	lsls	r3, r3, #8
 8009d90:	4313      	orrs	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	031b      	lsls	r3, r3, #12
 8009da0:	4313      	orrs	r3, r2
 8009da2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	031b      	lsls	r3, r3, #12
 8009db0:	4313      	orrs	r3, r2
 8009db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a0f      	ldr	r2, [pc, #60]	@ (8009df4 <OC4Config+0xa0>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d107      	bne.n	8009dcc <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	019b      	lsls	r3, r3, #6
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fda4 	bl	800992c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	40010000 	.word	0x40010000

08009df8 <LL_USART_IsEnabled>:
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e0c:	bf0c      	ite	eq
 8009e0e:	2301      	moveq	r3, #1
 8009e10:	2300      	movne	r3, #0
 8009e12:	b2db      	uxtb	r3, r3
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <LL_USART_SetStopBitsLength>:
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	431a      	orrs	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	611a      	str	r2, [r3, #16]
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <LL_USART_SetHWFlowCtrl>:
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	615a      	str	r2, [r3, #20]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <LL_USART_SetBaudRate>:
{
 8009e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e70:	b0c0      	sub	sp, #256	@ 0x100
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009e78:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8009e7c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009e80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e8c:	f040 810c 	bne.w	800a0a8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8009e90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	1891      	adds	r1, r2, r2
 8009ea8:	6639      	str	r1, [r7, #96]	@ 0x60
 8009eaa:	415b      	adcs	r3, r3
 8009eac:	667b      	str	r3, [r7, #100]	@ 0x64
 8009eae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	eb12 0801 	adds.w	r8, r2, r1
 8009eb8:	4629      	mov	r1, r5
 8009eba:	eb43 0901 	adc.w	r9, r3, r1
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	f04f 0300 	mov.w	r3, #0
 8009ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ed2:	4690      	mov	r8, r2
 8009ed4:	4699      	mov	r9, r3
 8009ed6:	4623      	mov	r3, r4
 8009ed8:	eb18 0303 	adds.w	r3, r8, r3
 8009edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	eb49 0303 	adc.w	r3, r9, r3
 8009ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009eea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009eee:	2200      	movs	r2, #0
 8009ef0:	469a      	mov	sl, r3
 8009ef2:	4693      	mov	fp, r2
 8009ef4:	eb1a 030a 	adds.w	r3, sl, sl
 8009ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009efa:	eb4b 030b 	adc.w	r3, fp, fp
 8009efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009f08:	f7f6 ff16 	bl	8000d38 <__aeabi_uldivmod>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4b64      	ldr	r3, [pc, #400]	@ (800a0a4 <LL_USART_SetBaudRate+0x238>)
 8009f12:	fba3 2302 	umull	r2, r3, r3, r2
 8009f16:	095b      	lsrs	r3, r3, #5
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	b29c      	uxth	r4, r3
 8009f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f28:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009f2c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8009f30:	4642      	mov	r2, r8
 8009f32:	464b      	mov	r3, r9
 8009f34:	1891      	adds	r1, r2, r2
 8009f36:	6539      	str	r1, [r7, #80]	@ 0x50
 8009f38:	415b      	adcs	r3, r3
 8009f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009f40:	4641      	mov	r1, r8
 8009f42:	1851      	adds	r1, r2, r1
 8009f44:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009f46:	4649      	mov	r1, r9
 8009f48:	414b      	adcs	r3, r1
 8009f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	f04f 0300 	mov.w	r3, #0
 8009f54:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8009f58:	4659      	mov	r1, fp
 8009f5a:	00cb      	lsls	r3, r1, #3
 8009f5c:	4651      	mov	r1, sl
 8009f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f62:	4651      	mov	r1, sl
 8009f64:	00ca      	lsls	r2, r1, #3
 8009f66:	4610      	mov	r0, r2
 8009f68:	4619      	mov	r1, r3
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	189b      	adds	r3, r3, r2
 8009f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f74:	464b      	mov	r3, r9
 8009f76:	460a      	mov	r2, r1
 8009f78:	eb42 0303 	adc.w	r3, r2, r3
 8009f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009f80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f84:	2200      	movs	r2, #0
 8009f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f8a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009f8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009f92:	460b      	mov	r3, r1
 8009f94:	18db      	adds	r3, r3, r3
 8009f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f98:	4613      	mov	r3, r2
 8009f9a:	eb42 0303 	adc.w	r3, r2, r3
 8009f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009fa4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8009fa8:	f7f6 fec6 	bl	8000d38 <__aeabi_uldivmod>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4b3c      	ldr	r3, [pc, #240]	@ (800a0a4 <LL_USART_SetBaudRate+0x238>)
 8009fb4:	fba3 2301 	umull	r2, r3, r3, r1
 8009fb8:	095b      	lsrs	r3, r3, #5
 8009fba:	2264      	movs	r2, #100	@ 0x64
 8009fbc:	fb02 f303 	mul.w	r3, r2, r3
 8009fc0:	1acb      	subs	r3, r1, r3
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009fc8:	4b36      	ldr	r3, [pc, #216]	@ (800a0a4 <LL_USART_SetBaudRate+0x238>)
 8009fca:	fba3 2302 	umull	r2, r3, r3, r2
 8009fce:	095b      	lsrs	r3, r3, #5
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4423      	add	r3, r4
 8009fde:	b29c      	uxth	r4, r3
 8009fe0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fea:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009fee:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8009ff2:	4642      	mov	r2, r8
 8009ff4:	464b      	mov	r3, r9
 8009ff6:	1891      	adds	r1, r2, r2
 8009ff8:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009ffa:	415b      	adcs	r3, r3
 8009ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ffe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a002:	4641      	mov	r1, r8
 800a004:	1851      	adds	r1, r2, r1
 800a006:	6339      	str	r1, [r7, #48]	@ 0x30
 800a008:	4649      	mov	r1, r9
 800a00a:	414b      	adcs	r3, r1
 800a00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a00e:	f04f 0200 	mov.w	r2, #0
 800a012:	f04f 0300 	mov.w	r3, #0
 800a016:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a01a:	4659      	mov	r1, fp
 800a01c:	00cb      	lsls	r3, r1, #3
 800a01e:	4651      	mov	r1, sl
 800a020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a024:	4651      	mov	r1, sl
 800a026:	00ca      	lsls	r2, r1, #3
 800a028:	4610      	mov	r0, r2
 800a02a:	4619      	mov	r1, r3
 800a02c:	4603      	mov	r3, r0
 800a02e:	4642      	mov	r2, r8
 800a030:	189b      	adds	r3, r3, r2
 800a032:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a036:	464b      	mov	r3, r9
 800a038:	460a      	mov	r2, r1
 800a03a:	eb42 0303 	adc.w	r3, r2, r3
 800a03e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a042:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a046:	2200      	movs	r2, #0
 800a048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a04c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800a050:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a054:	460b      	mov	r3, r1
 800a056:	18db      	adds	r3, r3, r3
 800a058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a05a:	4613      	mov	r3, r2
 800a05c:	eb42 0303 	adc.w	r3, r2, r3
 800a060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a066:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800a06a:	f7f6 fe65 	bl	8000d38 <__aeabi_uldivmod>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a4 <LL_USART_SetBaudRate+0x238>)
 800a074:	fba3 1302 	umull	r1, r3, r3, r2
 800a078:	095b      	lsrs	r3, r3, #5
 800a07a:	2164      	movs	r1, #100	@ 0x64
 800a07c:	fb01 f303 	mul.w	r3, r1, r3
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	3332      	adds	r3, #50	@ 0x32
 800a086:	4a07      	ldr	r2, [pc, #28]	@ (800a0a4 <LL_USART_SetBaudRate+0x238>)
 800a088:	fba2 2303 	umull	r2, r3, r2, r3
 800a08c:	095b      	lsrs	r3, r3, #5
 800a08e:	b29b      	uxth	r3, r3
 800a090:	f003 0307 	and.w	r3, r3, #7
 800a094:	b29b      	uxth	r3, r3
 800a096:	4423      	add	r3, r4
 800a098:	b29b      	uxth	r3, r3
 800a09a:	461a      	mov	r2, r3
 800a09c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0a0:	609a      	str	r2, [r3, #8]
}
 800a0a2:	e108      	b.n	800a2b6 <LL_USART_SetBaudRate+0x44a>
 800a0a4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a0a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a0b2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a0b6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800a0ba:	4642      	mov	r2, r8
 800a0bc:	464b      	mov	r3, r9
 800a0be:	1891      	adds	r1, r2, r2
 800a0c0:	6239      	str	r1, [r7, #32]
 800a0c2:	415b      	adcs	r3, r3
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0ca:	4641      	mov	r1, r8
 800a0cc:	1854      	adds	r4, r2, r1
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	eb43 0501 	adc.w	r5, r3, r1
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	f04f 0300 	mov.w	r3, #0
 800a0dc:	00eb      	lsls	r3, r5, #3
 800a0de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0e2:	00e2      	lsls	r2, r4, #3
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	461d      	mov	r5, r3
 800a0e8:	4643      	mov	r3, r8
 800a0ea:	18e3      	adds	r3, r4, r3
 800a0ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0f0:	464b      	mov	r3, r9
 800a0f2:	eb45 0303 	adc.w	r3, r5, r3
 800a0f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a104:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	f04f 0300 	mov.w	r3, #0
 800a110:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800a114:	4629      	mov	r1, r5
 800a116:	008b      	lsls	r3, r1, #2
 800a118:	4621      	mov	r1, r4
 800a11a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a11e:	4621      	mov	r1, r4
 800a120:	008a      	lsls	r2, r1, #2
 800a122:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800a126:	f7f6 fe07 	bl	8000d38 <__aeabi_uldivmod>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4b65      	ldr	r3, [pc, #404]	@ (800a2c4 <LL_USART_SetBaudRate+0x458>)
 800a130:	fba3 2302 	umull	r2, r3, r3, r2
 800a134:	095b      	lsrs	r3, r3, #5
 800a136:	b29b      	uxth	r3, r3
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	b29c      	uxth	r4, r3
 800a13c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a140:	2200      	movs	r2, #0
 800a142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a14a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800a14e:	4642      	mov	r2, r8
 800a150:	464b      	mov	r3, r9
 800a152:	1891      	adds	r1, r2, r2
 800a154:	61b9      	str	r1, [r7, #24]
 800a156:	415b      	adcs	r3, r3
 800a158:	61fb      	str	r3, [r7, #28]
 800a15a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a15e:	4641      	mov	r1, r8
 800a160:	1851      	adds	r1, r2, r1
 800a162:	6139      	str	r1, [r7, #16]
 800a164:	4649      	mov	r1, r9
 800a166:	414b      	adcs	r3, r1
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	f04f 0200 	mov.w	r2, #0
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a176:	4659      	mov	r1, fp
 800a178:	00cb      	lsls	r3, r1, #3
 800a17a:	4651      	mov	r1, sl
 800a17c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a180:	4651      	mov	r1, sl
 800a182:	00ca      	lsls	r2, r1, #3
 800a184:	4610      	mov	r0, r2
 800a186:	4619      	mov	r1, r3
 800a188:	4603      	mov	r3, r0
 800a18a:	4642      	mov	r2, r8
 800a18c:	189b      	adds	r3, r3, r2
 800a18e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a192:	464b      	mov	r3, r9
 800a194:	460a      	mov	r2, r1
 800a196:	eb42 0303 	adc.w	r3, r2, r3
 800a19a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a19e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800a1ac:	f04f 0200 	mov.w	r2, #0
 800a1b0:	f04f 0300 	mov.w	r3, #0
 800a1b4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	008b      	lsls	r3, r1, #2
 800a1bc:	4641      	mov	r1, r8
 800a1be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	008a      	lsls	r2, r1, #2
 800a1c6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800a1ca:	f7f6 fdb5 	bl	8000d38 <__aeabi_uldivmod>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	4b3b      	ldr	r3, [pc, #236]	@ (800a2c4 <LL_USART_SetBaudRate+0x458>)
 800a1d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a1da:	095b      	lsrs	r3, r3, #5
 800a1dc:	2264      	movs	r2, #100	@ 0x64
 800a1de:	fb02 f303 	mul.w	r3, r2, r3
 800a1e2:	1acb      	subs	r3, r1, r3
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	3332      	adds	r3, #50	@ 0x32
 800a1e8:	4a36      	ldr	r2, [pc, #216]	@ (800a2c4 <LL_USART_SetBaudRate+0x458>)
 800a1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ee:	095b      	lsrs	r3, r3, #5
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	4423      	add	r3, r4
 800a1fa:	b29c      	uxth	r4, r3
 800a1fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a200:	2200      	movs	r2, #0
 800a202:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a204:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a206:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a20a:	4642      	mov	r2, r8
 800a20c:	464b      	mov	r3, r9
 800a20e:	1891      	adds	r1, r2, r2
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	415b      	adcs	r3, r3
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a21a:	4641      	mov	r1, r8
 800a21c:	1851      	adds	r1, r2, r1
 800a21e:	6039      	str	r1, [r7, #0]
 800a220:	4649      	mov	r1, r9
 800a222:	414b      	adcs	r3, r1
 800a224:	607b      	str	r3, [r7, #4]
 800a226:	f04f 0200 	mov.w	r2, #0
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a232:	4659      	mov	r1, fp
 800a234:	00cb      	lsls	r3, r1, #3
 800a236:	4651      	mov	r1, sl
 800a238:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a23c:	4651      	mov	r1, sl
 800a23e:	00ca      	lsls	r2, r1, #3
 800a240:	4610      	mov	r0, r2
 800a242:	4619      	mov	r1, r3
 800a244:	4603      	mov	r3, r0
 800a246:	4642      	mov	r2, r8
 800a248:	189b      	adds	r3, r3, r2
 800a24a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a24c:	464b      	mov	r3, r9
 800a24e:	460a      	mov	r2, r1
 800a250:	eb42 0303 	adc.w	r3, r2, r3
 800a254:	677b      	str	r3, [r7, #116]	@ 0x74
 800a256:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a25a:	2200      	movs	r2, #0
 800a25c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a25e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	f04f 0300 	mov.w	r3, #0
 800a268:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800a26c:	4649      	mov	r1, r9
 800a26e:	008b      	lsls	r3, r1, #2
 800a270:	4641      	mov	r1, r8
 800a272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a276:	4641      	mov	r1, r8
 800a278:	008a      	lsls	r2, r1, #2
 800a27a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a27e:	f7f6 fd5b 	bl	8000d38 <__aeabi_uldivmod>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c4 <LL_USART_SetBaudRate+0x458>)
 800a288:	fba3 1302 	umull	r1, r3, r3, r2
 800a28c:	095b      	lsrs	r3, r3, #5
 800a28e:	2164      	movs	r1, #100	@ 0x64
 800a290:	fb01 f303 	mul.w	r3, r1, r3
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	3332      	adds	r3, #50	@ 0x32
 800a29a:	4a0a      	ldr	r2, [pc, #40]	@ (800a2c4 <LL_USART_SetBaudRate+0x458>)
 800a29c:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a0:	095b      	lsrs	r3, r3, #5
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	4423      	add	r3, r4
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2b4:	609a      	str	r2, [r3, #8]
}
 800a2b6:	bf00      	nop
 800a2b8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2c2:	bf00      	nop
 800a2c4:	51eb851f 	.word	0x51eb851f

0800a2c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fd8c 	bl	8009df8 <LL_USART_IsEnabled>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d149      	bne.n	800a37a <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800a2ee:	f023 030c 	bic.w	r3, r3, #12
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	6851      	ldr	r1, [r2, #4]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	68d2      	ldr	r2, [r2, #12]
 800a2fa:	4311      	orrs	r1, r2
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	6912      	ldr	r2, [r2, #16]
 800a300:	4311      	orrs	r1, r2
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	6992      	ldr	r2, [r2, #24]
 800a306:	430a      	orrs	r2, r1
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff fd83 	bl	8009e20 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff fd90 	bl	8009e46 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800a326:	f107 0308 	add.w	r3, r7, #8
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff f9e0 	bl	80096f0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a14      	ldr	r2, [pc, #80]	@ (800a384 <LL_USART_Init+0xbc>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d102      	bne.n	800a33e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	61bb      	str	r3, [r7, #24]
 800a33c:	e00c      	b.n	800a358 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a11      	ldr	r2, [pc, #68]	@ (800a388 <LL_USART_Init+0xc0>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d102      	bne.n	800a34c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	e005      	b.n	800a358 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a0f      	ldr	r2, [pc, #60]	@ (800a38c <LL_USART_Init+0xc4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d101      	bne.n	800a358 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00d      	beq.n	800a37a <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800a366:	2300      	movs	r3, #0
 800a368:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	699a      	ldr	r2, [r3, #24]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	69b9      	ldr	r1, [r7, #24]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff fd79 	bl	8009e6c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a37a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3720      	adds	r7, #32
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	40011000 	.word	0x40011000
 800a388:	40004400 	.word	0x40004400
 800a38c:	40011400 	.word	0x40011400

0800a390 <atoi>:
 800a390:	220a      	movs	r2, #10
 800a392:	2100      	movs	r1, #0
 800a394:	f000 b87c 	b.w	800a490 <strtol>

0800a398 <_strtol_l.constprop.0>:
 800a398:	2b24      	cmp	r3, #36	@ 0x24
 800a39a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a39e:	4686      	mov	lr, r0
 800a3a0:	4690      	mov	r8, r2
 800a3a2:	d801      	bhi.n	800a3a8 <_strtol_l.constprop.0+0x10>
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d106      	bne.n	800a3b6 <_strtol_l.constprop.0+0x1e>
 800a3a8:	f001 f90c 	bl	800b5c4 <__errno>
 800a3ac:	2316      	movs	r3, #22
 800a3ae:	6003      	str	r3, [r0, #0]
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b6:	4834      	ldr	r0, [pc, #208]	@ (800a488 <_strtol_l.constprop.0+0xf0>)
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3c0:	5d06      	ldrb	r6, [r0, r4]
 800a3c2:	f016 0608 	ands.w	r6, r6, #8
 800a3c6:	d1f8      	bne.n	800a3ba <_strtol_l.constprop.0+0x22>
 800a3c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3ca:	d12d      	bne.n	800a428 <_strtol_l.constprop.0+0x90>
 800a3cc:	782c      	ldrb	r4, [r5, #0]
 800a3ce:	2601      	movs	r6, #1
 800a3d0:	1c95      	adds	r5, r2, #2
 800a3d2:	f033 0210 	bics.w	r2, r3, #16
 800a3d6:	d109      	bne.n	800a3ec <_strtol_l.constprop.0+0x54>
 800a3d8:	2c30      	cmp	r4, #48	@ 0x30
 800a3da:	d12a      	bne.n	800a432 <_strtol_l.constprop.0+0x9a>
 800a3dc:	782a      	ldrb	r2, [r5, #0]
 800a3de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3e2:	2a58      	cmp	r2, #88	@ 0x58
 800a3e4:	d125      	bne.n	800a432 <_strtol_l.constprop.0+0x9a>
 800a3e6:	786c      	ldrb	r4, [r5, #1]
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	3502      	adds	r5, #2
 800a3ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a3f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	fbbc f9f3 	udiv	r9, ip, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	fb03 ca19 	mls	sl, r3, r9, ip
 800a400:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a404:	2f09      	cmp	r7, #9
 800a406:	d81b      	bhi.n	800a440 <_strtol_l.constprop.0+0xa8>
 800a408:	463c      	mov	r4, r7
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	dd27      	ble.n	800a45e <_strtol_l.constprop.0+0xc6>
 800a40e:	1c57      	adds	r7, r2, #1
 800a410:	d007      	beq.n	800a422 <_strtol_l.constprop.0+0x8a>
 800a412:	4581      	cmp	r9, r0
 800a414:	d320      	bcc.n	800a458 <_strtol_l.constprop.0+0xc0>
 800a416:	d101      	bne.n	800a41c <_strtol_l.constprop.0+0x84>
 800a418:	45a2      	cmp	sl, r4
 800a41a:	db1d      	blt.n	800a458 <_strtol_l.constprop.0+0xc0>
 800a41c:	fb00 4003 	mla	r0, r0, r3, r4
 800a420:	2201      	movs	r2, #1
 800a422:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a426:	e7eb      	b.n	800a400 <_strtol_l.constprop.0+0x68>
 800a428:	2c2b      	cmp	r4, #43	@ 0x2b
 800a42a:	bf04      	itt	eq
 800a42c:	782c      	ldrbeq	r4, [r5, #0]
 800a42e:	1c95      	addeq	r5, r2, #2
 800a430:	e7cf      	b.n	800a3d2 <_strtol_l.constprop.0+0x3a>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1da      	bne.n	800a3ec <_strtol_l.constprop.0+0x54>
 800a436:	2c30      	cmp	r4, #48	@ 0x30
 800a438:	bf0c      	ite	eq
 800a43a:	2308      	moveq	r3, #8
 800a43c:	230a      	movne	r3, #10
 800a43e:	e7d5      	b.n	800a3ec <_strtol_l.constprop.0+0x54>
 800a440:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a444:	2f19      	cmp	r7, #25
 800a446:	d801      	bhi.n	800a44c <_strtol_l.constprop.0+0xb4>
 800a448:	3c37      	subs	r4, #55	@ 0x37
 800a44a:	e7de      	b.n	800a40a <_strtol_l.constprop.0+0x72>
 800a44c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a450:	2f19      	cmp	r7, #25
 800a452:	d804      	bhi.n	800a45e <_strtol_l.constprop.0+0xc6>
 800a454:	3c57      	subs	r4, #87	@ 0x57
 800a456:	e7d8      	b.n	800a40a <_strtol_l.constprop.0+0x72>
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	e7e1      	b.n	800a422 <_strtol_l.constprop.0+0x8a>
 800a45e:	1c53      	adds	r3, r2, #1
 800a460:	d108      	bne.n	800a474 <_strtol_l.constprop.0+0xdc>
 800a462:	2322      	movs	r3, #34	@ 0x22
 800a464:	f8ce 3000 	str.w	r3, [lr]
 800a468:	4660      	mov	r0, ip
 800a46a:	f1b8 0f00 	cmp.w	r8, #0
 800a46e:	d0a0      	beq.n	800a3b2 <_strtol_l.constprop.0+0x1a>
 800a470:	1e69      	subs	r1, r5, #1
 800a472:	e006      	b.n	800a482 <_strtol_l.constprop.0+0xea>
 800a474:	b106      	cbz	r6, 800a478 <_strtol_l.constprop.0+0xe0>
 800a476:	4240      	negs	r0, r0
 800a478:	f1b8 0f00 	cmp.w	r8, #0
 800a47c:	d099      	beq.n	800a3b2 <_strtol_l.constprop.0+0x1a>
 800a47e:	2a00      	cmp	r2, #0
 800a480:	d1f6      	bne.n	800a470 <_strtol_l.constprop.0+0xd8>
 800a482:	f8c8 1000 	str.w	r1, [r8]
 800a486:	e794      	b.n	800a3b2 <_strtol_l.constprop.0+0x1a>
 800a488:	0800fda5 	.word	0x0800fda5

0800a48c <_strtol_r>:
 800a48c:	f7ff bf84 	b.w	800a398 <_strtol_l.constprop.0>

0800a490 <strtol>:
 800a490:	4613      	mov	r3, r2
 800a492:	460a      	mov	r2, r1
 800a494:	4601      	mov	r1, r0
 800a496:	4802      	ldr	r0, [pc, #8]	@ (800a4a0 <strtol+0x10>)
 800a498:	6800      	ldr	r0, [r0, #0]
 800a49a:	f7ff bf7d 	b.w	800a398 <_strtol_l.constprop.0>
 800a49e:	bf00      	nop
 800a4a0:	20000020 	.word	0x20000020

0800a4a4 <__cvt>:
 800a4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	ec57 6b10 	vmov	r6, r7, d0
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	463b      	mov	r3, r7
 800a4b4:	bfbb      	ittet	lt
 800a4b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4ba:	461f      	movlt	r7, r3
 800a4bc:	2300      	movge	r3, #0
 800a4be:	232d      	movlt	r3, #45	@ 0x2d
 800a4c0:	700b      	strb	r3, [r1, #0]
 800a4c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a4c8:	4691      	mov	r9, r2
 800a4ca:	f023 0820 	bic.w	r8, r3, #32
 800a4ce:	bfbc      	itt	lt
 800a4d0:	4632      	movlt	r2, r6
 800a4d2:	4616      	movlt	r6, r2
 800a4d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4d8:	d005      	beq.n	800a4e6 <__cvt+0x42>
 800a4da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4de:	d100      	bne.n	800a4e2 <__cvt+0x3e>
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	2102      	movs	r1, #2
 800a4e4:	e000      	b.n	800a4e8 <__cvt+0x44>
 800a4e6:	2103      	movs	r1, #3
 800a4e8:	ab03      	add	r3, sp, #12
 800a4ea:	9301      	str	r3, [sp, #4]
 800a4ec:	ab02      	add	r3, sp, #8
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	ec47 6b10 	vmov	d0, r6, r7
 800a4f4:	4653      	mov	r3, sl
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	f001 f93e 	bl	800b778 <_dtoa_r>
 800a4fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a500:	4605      	mov	r5, r0
 800a502:	d119      	bne.n	800a538 <__cvt+0x94>
 800a504:	f019 0f01 	tst.w	r9, #1
 800a508:	d00e      	beq.n	800a528 <__cvt+0x84>
 800a50a:	eb00 0904 	add.w	r9, r0, r4
 800a50e:	2200      	movs	r2, #0
 800a510:	2300      	movs	r3, #0
 800a512:	4630      	mov	r0, r6
 800a514:	4639      	mov	r1, r7
 800a516:	f7f6 fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a51a:	b108      	cbz	r0, 800a520 <__cvt+0x7c>
 800a51c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a520:	2230      	movs	r2, #48	@ 0x30
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	454b      	cmp	r3, r9
 800a526:	d31e      	bcc.n	800a566 <__cvt+0xc2>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a52c:	1b5b      	subs	r3, r3, r5
 800a52e:	4628      	mov	r0, r5
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	b004      	add	sp, #16
 800a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a538:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a53c:	eb00 0904 	add.w	r9, r0, r4
 800a540:	d1e5      	bne.n	800a50e <__cvt+0x6a>
 800a542:	7803      	ldrb	r3, [r0, #0]
 800a544:	2b30      	cmp	r3, #48	@ 0x30
 800a546:	d10a      	bne.n	800a55e <__cvt+0xba>
 800a548:	2200      	movs	r2, #0
 800a54a:	2300      	movs	r3, #0
 800a54c:	4630      	mov	r0, r6
 800a54e:	4639      	mov	r1, r7
 800a550:	f7f6 fac2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a554:	b918      	cbnz	r0, 800a55e <__cvt+0xba>
 800a556:	f1c4 0401 	rsb	r4, r4, #1
 800a55a:	f8ca 4000 	str.w	r4, [sl]
 800a55e:	f8da 3000 	ldr.w	r3, [sl]
 800a562:	4499      	add	r9, r3
 800a564:	e7d3      	b.n	800a50e <__cvt+0x6a>
 800a566:	1c59      	adds	r1, r3, #1
 800a568:	9103      	str	r1, [sp, #12]
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e7d9      	b.n	800a522 <__cvt+0x7e>

0800a56e <__exponent>:
 800a56e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a570:	2900      	cmp	r1, #0
 800a572:	bfba      	itte	lt
 800a574:	4249      	neglt	r1, r1
 800a576:	232d      	movlt	r3, #45	@ 0x2d
 800a578:	232b      	movge	r3, #43	@ 0x2b
 800a57a:	2909      	cmp	r1, #9
 800a57c:	7002      	strb	r2, [r0, #0]
 800a57e:	7043      	strb	r3, [r0, #1]
 800a580:	dd29      	ble.n	800a5d6 <__exponent+0x68>
 800a582:	f10d 0307 	add.w	r3, sp, #7
 800a586:	461d      	mov	r5, r3
 800a588:	270a      	movs	r7, #10
 800a58a:	461a      	mov	r2, r3
 800a58c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a590:	fb07 1416 	mls	r4, r7, r6, r1
 800a594:	3430      	adds	r4, #48	@ 0x30
 800a596:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a59a:	460c      	mov	r4, r1
 800a59c:	2c63      	cmp	r4, #99	@ 0x63
 800a59e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	dcf1      	bgt.n	800a58a <__exponent+0x1c>
 800a5a6:	3130      	adds	r1, #48	@ 0x30
 800a5a8:	1e94      	subs	r4, r2, #2
 800a5aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5ae:	1c41      	adds	r1, r0, #1
 800a5b0:	4623      	mov	r3, r4
 800a5b2:	42ab      	cmp	r3, r5
 800a5b4:	d30a      	bcc.n	800a5cc <__exponent+0x5e>
 800a5b6:	f10d 0309 	add.w	r3, sp, #9
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	42ac      	cmp	r4, r5
 800a5be:	bf88      	it	hi
 800a5c0:	2300      	movhi	r3, #0
 800a5c2:	3302      	adds	r3, #2
 800a5c4:	4403      	add	r3, r0
 800a5c6:	1a18      	subs	r0, r3, r0
 800a5c8:	b003      	add	sp, #12
 800a5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5d4:	e7ed      	b.n	800a5b2 <__exponent+0x44>
 800a5d6:	2330      	movs	r3, #48	@ 0x30
 800a5d8:	3130      	adds	r1, #48	@ 0x30
 800a5da:	7083      	strb	r3, [r0, #2]
 800a5dc:	70c1      	strb	r1, [r0, #3]
 800a5de:	1d03      	adds	r3, r0, #4
 800a5e0:	e7f1      	b.n	800a5c6 <__exponent+0x58>
	...

0800a5e4 <_printf_float>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	b08d      	sub	sp, #52	@ 0x34
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	461f      	mov	r7, r3
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	f000 ff9b 	bl	800b530 <_localeconv_r>
 800a5fa:	6803      	ldr	r3, [r0, #0]
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f5 fe3e 	bl	8000280 <strlen>
 800a604:	2300      	movs	r3, #0
 800a606:	930a      	str	r3, [sp, #40]	@ 0x28
 800a608:	f8d8 3000 	ldr.w	r3, [r8]
 800a60c:	9005      	str	r0, [sp, #20]
 800a60e:	3307      	adds	r3, #7
 800a610:	f023 0307 	bic.w	r3, r3, #7
 800a614:	f103 0208 	add.w	r2, r3, #8
 800a618:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a61c:	f8d4 b000 	ldr.w	fp, [r4]
 800a620:	f8c8 2000 	str.w	r2, [r8]
 800a624:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a62c:	9307      	str	r3, [sp, #28]
 800a62e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a632:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a63a:	4b9c      	ldr	r3, [pc, #624]	@ (800a8ac <_printf_float+0x2c8>)
 800a63c:	f04f 32ff 	mov.w	r2, #4294967295
 800a640:	f7f6 fa7c 	bl	8000b3c <__aeabi_dcmpun>
 800a644:	bb70      	cbnz	r0, 800a6a4 <_printf_float+0xc0>
 800a646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a64a:	4b98      	ldr	r3, [pc, #608]	@ (800a8ac <_printf_float+0x2c8>)
 800a64c:	f04f 32ff 	mov.w	r2, #4294967295
 800a650:	f7f6 fa56 	bl	8000b00 <__aeabi_dcmple>
 800a654:	bb30      	cbnz	r0, 800a6a4 <_printf_float+0xc0>
 800a656:	2200      	movs	r2, #0
 800a658:	2300      	movs	r3, #0
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f6 fa45 	bl	8000aec <__aeabi_dcmplt>
 800a662:	b110      	cbz	r0, 800a66a <_printf_float+0x86>
 800a664:	232d      	movs	r3, #45	@ 0x2d
 800a666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a66a:	4a91      	ldr	r2, [pc, #580]	@ (800a8b0 <_printf_float+0x2cc>)
 800a66c:	4b91      	ldr	r3, [pc, #580]	@ (800a8b4 <_printf_float+0x2d0>)
 800a66e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a672:	bf94      	ite	ls
 800a674:	4690      	movls	r8, r2
 800a676:	4698      	movhi	r8, r3
 800a678:	2303      	movs	r3, #3
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	f02b 0304 	bic.w	r3, fp, #4
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	f04f 0900 	mov.w	r9, #0
 800a686:	9700      	str	r7, [sp, #0]
 800a688:	4633      	mov	r3, r6
 800a68a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a68c:	4621      	mov	r1, r4
 800a68e:	4628      	mov	r0, r5
 800a690:	f000 f9d2 	bl	800aa38 <_printf_common>
 800a694:	3001      	adds	r0, #1
 800a696:	f040 808d 	bne.w	800a7b4 <_printf_float+0x1d0>
 800a69a:	f04f 30ff 	mov.w	r0, #4294967295
 800a69e:	b00d      	add	sp, #52	@ 0x34
 800a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f7f6 fa46 	bl	8000b3c <__aeabi_dcmpun>
 800a6b0:	b140      	cbz	r0, 800a6c4 <_printf_float+0xe0>
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	bfbc      	itt	lt
 800a6b8:	232d      	movlt	r3, #45	@ 0x2d
 800a6ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a6be:	4a7e      	ldr	r2, [pc, #504]	@ (800a8b8 <_printf_float+0x2d4>)
 800a6c0:	4b7e      	ldr	r3, [pc, #504]	@ (800a8bc <_printf_float+0x2d8>)
 800a6c2:	e7d4      	b.n	800a66e <_printf_float+0x8a>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a6ca:	9206      	str	r2, [sp, #24]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	d13b      	bne.n	800a748 <_printf_float+0x164>
 800a6d0:	2306      	movs	r3, #6
 800a6d2:	6063      	str	r3, [r4, #4]
 800a6d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a6d8:	2300      	movs	r3, #0
 800a6da:	6022      	str	r2, [r4, #0]
 800a6dc:	9303      	str	r3, [sp, #12]
 800a6de:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a6e4:	ab09      	add	r3, sp, #36	@ 0x24
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	6861      	ldr	r1, [r4, #4]
 800a6ea:	ec49 8b10 	vmov	d0, r8, r9
 800a6ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7ff fed6 	bl	800a4a4 <__cvt>
 800a6f8:	9b06      	ldr	r3, [sp, #24]
 800a6fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6fc:	2b47      	cmp	r3, #71	@ 0x47
 800a6fe:	4680      	mov	r8, r0
 800a700:	d129      	bne.n	800a756 <_printf_float+0x172>
 800a702:	1cc8      	adds	r0, r1, #3
 800a704:	db02      	blt.n	800a70c <_printf_float+0x128>
 800a706:	6863      	ldr	r3, [r4, #4]
 800a708:	4299      	cmp	r1, r3
 800a70a:	dd41      	ble.n	800a790 <_printf_float+0x1ac>
 800a70c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a710:	fa5f fa8a 	uxtb.w	sl, sl
 800a714:	3901      	subs	r1, #1
 800a716:	4652      	mov	r2, sl
 800a718:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a71c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a71e:	f7ff ff26 	bl	800a56e <__exponent>
 800a722:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a724:	1813      	adds	r3, r2, r0
 800a726:	2a01      	cmp	r2, #1
 800a728:	4681      	mov	r9, r0
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	dc02      	bgt.n	800a734 <_printf_float+0x150>
 800a72e:	6822      	ldr	r2, [r4, #0]
 800a730:	07d2      	lsls	r2, r2, #31
 800a732:	d501      	bpl.n	800a738 <_printf_float+0x154>
 800a734:	3301      	adds	r3, #1
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d0a2      	beq.n	800a686 <_printf_float+0xa2>
 800a740:	232d      	movs	r3, #45	@ 0x2d
 800a742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a746:	e79e      	b.n	800a686 <_printf_float+0xa2>
 800a748:	9a06      	ldr	r2, [sp, #24]
 800a74a:	2a47      	cmp	r2, #71	@ 0x47
 800a74c:	d1c2      	bne.n	800a6d4 <_printf_float+0xf0>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1c0      	bne.n	800a6d4 <_printf_float+0xf0>
 800a752:	2301      	movs	r3, #1
 800a754:	e7bd      	b.n	800a6d2 <_printf_float+0xee>
 800a756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a75a:	d9db      	bls.n	800a714 <_printf_float+0x130>
 800a75c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a760:	d118      	bne.n	800a794 <_printf_float+0x1b0>
 800a762:	2900      	cmp	r1, #0
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	dd0b      	ble.n	800a780 <_printf_float+0x19c>
 800a768:	6121      	str	r1, [r4, #16]
 800a76a:	b913      	cbnz	r3, 800a772 <_printf_float+0x18e>
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	07d0      	lsls	r0, r2, #31
 800a770:	d502      	bpl.n	800a778 <_printf_float+0x194>
 800a772:	3301      	adds	r3, #1
 800a774:	440b      	add	r3, r1
 800a776:	6123      	str	r3, [r4, #16]
 800a778:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a77a:	f04f 0900 	mov.w	r9, #0
 800a77e:	e7db      	b.n	800a738 <_printf_float+0x154>
 800a780:	b913      	cbnz	r3, 800a788 <_printf_float+0x1a4>
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	07d2      	lsls	r2, r2, #31
 800a786:	d501      	bpl.n	800a78c <_printf_float+0x1a8>
 800a788:	3302      	adds	r3, #2
 800a78a:	e7f4      	b.n	800a776 <_printf_float+0x192>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e7f2      	b.n	800a776 <_printf_float+0x192>
 800a790:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a796:	4299      	cmp	r1, r3
 800a798:	db05      	blt.n	800a7a6 <_printf_float+0x1c2>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	6121      	str	r1, [r4, #16]
 800a79e:	07d8      	lsls	r0, r3, #31
 800a7a0:	d5ea      	bpl.n	800a778 <_printf_float+0x194>
 800a7a2:	1c4b      	adds	r3, r1, #1
 800a7a4:	e7e7      	b.n	800a776 <_printf_float+0x192>
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	bfd4      	ite	le
 800a7aa:	f1c1 0202 	rsble	r2, r1, #2
 800a7ae:	2201      	movgt	r2, #1
 800a7b0:	4413      	add	r3, r2
 800a7b2:	e7e0      	b.n	800a776 <_printf_float+0x192>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	055a      	lsls	r2, r3, #21
 800a7b8:	d407      	bmi.n	800a7ca <_printf_float+0x1e6>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	4642      	mov	r2, r8
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d12b      	bne.n	800a820 <_printf_float+0x23c>
 800a7c8:	e767      	b.n	800a69a <_printf_float+0xb6>
 800a7ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7ce:	f240 80dd 	bls.w	800a98c <_printf_float+0x3a8>
 800a7d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f7f6 f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d033      	beq.n	800a84a <_printf_float+0x266>
 800a7e2:	4a37      	ldr	r2, [pc, #220]	@ (800a8c0 <_printf_float+0x2dc>)
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b8      	blx	r7
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	f43f af54 	beq.w	800a69a <_printf_float+0xb6>
 800a7f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a7f6:	4543      	cmp	r3, r8
 800a7f8:	db02      	blt.n	800a800 <_printf_float+0x21c>
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	07d8      	lsls	r0, r3, #31
 800a7fe:	d50f      	bpl.n	800a820 <_printf_float+0x23c>
 800a800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a804:	4631      	mov	r1, r6
 800a806:	4628      	mov	r0, r5
 800a808:	47b8      	blx	r7
 800a80a:	3001      	adds	r0, #1
 800a80c:	f43f af45 	beq.w	800a69a <_printf_float+0xb6>
 800a810:	f04f 0900 	mov.w	r9, #0
 800a814:	f108 38ff 	add.w	r8, r8, #4294967295
 800a818:	f104 0a1a 	add.w	sl, r4, #26
 800a81c:	45c8      	cmp	r8, r9
 800a81e:	dc09      	bgt.n	800a834 <_printf_float+0x250>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	079b      	lsls	r3, r3, #30
 800a824:	f100 8103 	bmi.w	800aa2e <_printf_float+0x44a>
 800a828:	68e0      	ldr	r0, [r4, #12]
 800a82a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a82c:	4298      	cmp	r0, r3
 800a82e:	bfb8      	it	lt
 800a830:	4618      	movlt	r0, r3
 800a832:	e734      	b.n	800a69e <_printf_float+0xba>
 800a834:	2301      	movs	r3, #1
 800a836:	4652      	mov	r2, sl
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f af2b 	beq.w	800a69a <_printf_float+0xb6>
 800a844:	f109 0901 	add.w	r9, r9, #1
 800a848:	e7e8      	b.n	800a81c <_printf_float+0x238>
 800a84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dc39      	bgt.n	800a8c4 <_printf_float+0x2e0>
 800a850:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c0 <_printf_float+0x2dc>)
 800a852:	2301      	movs	r3, #1
 800a854:	4631      	mov	r1, r6
 800a856:	4628      	mov	r0, r5
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	f43f af1d 	beq.w	800a69a <_printf_float+0xb6>
 800a860:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a864:	ea59 0303 	orrs.w	r3, r9, r3
 800a868:	d102      	bne.n	800a870 <_printf_float+0x28c>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	07d9      	lsls	r1, r3, #31
 800a86e:	d5d7      	bpl.n	800a820 <_printf_float+0x23c>
 800a870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	f43f af0d 	beq.w	800a69a <_printf_float+0xb6>
 800a880:	f04f 0a00 	mov.w	sl, #0
 800a884:	f104 0b1a 	add.w	fp, r4, #26
 800a888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88a:	425b      	negs	r3, r3
 800a88c:	4553      	cmp	r3, sl
 800a88e:	dc01      	bgt.n	800a894 <_printf_float+0x2b0>
 800a890:	464b      	mov	r3, r9
 800a892:	e793      	b.n	800a7bc <_printf_float+0x1d8>
 800a894:	2301      	movs	r3, #1
 800a896:	465a      	mov	r2, fp
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f43f aefb 	beq.w	800a69a <_printf_float+0xb6>
 800a8a4:	f10a 0a01 	add.w	sl, sl, #1
 800a8a8:	e7ee      	b.n	800a888 <_printf_float+0x2a4>
 800a8aa:	bf00      	nop
 800a8ac:	7fefffff 	.word	0x7fefffff
 800a8b0:	0800fea5 	.word	0x0800fea5
 800a8b4:	0800fea9 	.word	0x0800fea9
 800a8b8:	0800fead 	.word	0x0800fead
 800a8bc:	0800feb1 	.word	0x0800feb1
 800a8c0:	080101d7 	.word	0x080101d7
 800a8c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8ca:	4553      	cmp	r3, sl
 800a8cc:	bfa8      	it	ge
 800a8ce:	4653      	movge	r3, sl
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	4699      	mov	r9, r3
 800a8d4:	dc36      	bgt.n	800a944 <_printf_float+0x360>
 800a8d6:	f04f 0b00 	mov.w	fp, #0
 800a8da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8de:	f104 021a 	add.w	r2, r4, #26
 800a8e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8e4:	9306      	str	r3, [sp, #24]
 800a8e6:	eba3 0309 	sub.w	r3, r3, r9
 800a8ea:	455b      	cmp	r3, fp
 800a8ec:	dc31      	bgt.n	800a952 <_printf_float+0x36e>
 800a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f0:	459a      	cmp	sl, r3
 800a8f2:	dc3a      	bgt.n	800a96a <_printf_float+0x386>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	07da      	lsls	r2, r3, #31
 800a8f8:	d437      	bmi.n	800a96a <_printf_float+0x386>
 800a8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fc:	ebaa 0903 	sub.w	r9, sl, r3
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	ebaa 0303 	sub.w	r3, sl, r3
 800a906:	4599      	cmp	r9, r3
 800a908:	bfa8      	it	ge
 800a90a:	4699      	movge	r9, r3
 800a90c:	f1b9 0f00 	cmp.w	r9, #0
 800a910:	dc33      	bgt.n	800a97a <_printf_float+0x396>
 800a912:	f04f 0800 	mov.w	r8, #0
 800a916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a91a:	f104 0b1a 	add.w	fp, r4, #26
 800a91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a920:	ebaa 0303 	sub.w	r3, sl, r3
 800a924:	eba3 0309 	sub.w	r3, r3, r9
 800a928:	4543      	cmp	r3, r8
 800a92a:	f77f af79 	ble.w	800a820 <_printf_float+0x23c>
 800a92e:	2301      	movs	r3, #1
 800a930:	465a      	mov	r2, fp
 800a932:	4631      	mov	r1, r6
 800a934:	4628      	mov	r0, r5
 800a936:	47b8      	blx	r7
 800a938:	3001      	adds	r0, #1
 800a93a:	f43f aeae 	beq.w	800a69a <_printf_float+0xb6>
 800a93e:	f108 0801 	add.w	r8, r8, #1
 800a942:	e7ec      	b.n	800a91e <_printf_float+0x33a>
 800a944:	4642      	mov	r2, r8
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	d1c2      	bne.n	800a8d6 <_printf_float+0x2f2>
 800a950:	e6a3      	b.n	800a69a <_printf_float+0xb6>
 800a952:	2301      	movs	r3, #1
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	9206      	str	r2, [sp, #24]
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	f43f ae9c 	beq.w	800a69a <_printf_float+0xb6>
 800a962:	9a06      	ldr	r2, [sp, #24]
 800a964:	f10b 0b01 	add.w	fp, fp, #1
 800a968:	e7bb      	b.n	800a8e2 <_printf_float+0x2fe>
 800a96a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	d1c0      	bne.n	800a8fa <_printf_float+0x316>
 800a978:	e68f      	b.n	800a69a <_printf_float+0xb6>
 800a97a:	9a06      	ldr	r2, [sp, #24]
 800a97c:	464b      	mov	r3, r9
 800a97e:	4442      	add	r2, r8
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	47b8      	blx	r7
 800a986:	3001      	adds	r0, #1
 800a988:	d1c3      	bne.n	800a912 <_printf_float+0x32e>
 800a98a:	e686      	b.n	800a69a <_printf_float+0xb6>
 800a98c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a990:	f1ba 0f01 	cmp.w	sl, #1
 800a994:	dc01      	bgt.n	800a99a <_printf_float+0x3b6>
 800a996:	07db      	lsls	r3, r3, #31
 800a998:	d536      	bpl.n	800aa08 <_printf_float+0x424>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4642      	mov	r2, r8
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f ae78 	beq.w	800a69a <_printf_float+0xb6>
 800a9aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	f43f ae70 	beq.w	800a69a <_printf_float+0xb6>
 800a9ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9c6:	f7f6 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ca:	b9c0      	cbnz	r0, 800a9fe <_printf_float+0x41a>
 800a9cc:	4653      	mov	r3, sl
 800a9ce:	f108 0201 	add.w	r2, r8, #1
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d10c      	bne.n	800a9f6 <_printf_float+0x412>
 800a9dc:	e65d      	b.n	800a69a <_printf_float+0xb6>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	465a      	mov	r2, fp
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b8      	blx	r7
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	f43f ae56 	beq.w	800a69a <_printf_float+0xb6>
 800a9ee:	f108 0801 	add.w	r8, r8, #1
 800a9f2:	45d0      	cmp	r8, sl
 800a9f4:	dbf3      	blt.n	800a9de <_printf_float+0x3fa>
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a9fc:	e6df      	b.n	800a7be <_printf_float+0x1da>
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	f104 0b1a 	add.w	fp, r4, #26
 800aa06:	e7f4      	b.n	800a9f2 <_printf_float+0x40e>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	e7e1      	b.n	800a9d2 <_printf_float+0x3ee>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	464a      	mov	r2, r9
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f43f ae3e 	beq.w	800a69a <_printf_float+0xb6>
 800aa1e:	f108 0801 	add.w	r8, r8, #1
 800aa22:	68e3      	ldr	r3, [r4, #12]
 800aa24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa26:	1a5b      	subs	r3, r3, r1
 800aa28:	4543      	cmp	r3, r8
 800aa2a:	dcf0      	bgt.n	800aa0e <_printf_float+0x42a>
 800aa2c:	e6fc      	b.n	800a828 <_printf_float+0x244>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	f104 0919 	add.w	r9, r4, #25
 800aa36:	e7f4      	b.n	800aa22 <_printf_float+0x43e>

0800aa38 <_printf_common>:
 800aa38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa3c:	4616      	mov	r6, r2
 800aa3e:	4698      	mov	r8, r3
 800aa40:	688a      	ldr	r2, [r1, #8]
 800aa42:	690b      	ldr	r3, [r1, #16]
 800aa44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	bfb8      	it	lt
 800aa4c:	4613      	movlt	r3, r2
 800aa4e:	6033      	str	r3, [r6, #0]
 800aa50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa54:	4607      	mov	r7, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	b10a      	cbz	r2, 800aa5e <_printf_common+0x26>
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	0699      	lsls	r1, r3, #26
 800aa62:	bf42      	ittt	mi
 800aa64:	6833      	ldrmi	r3, [r6, #0]
 800aa66:	3302      	addmi	r3, #2
 800aa68:	6033      	strmi	r3, [r6, #0]
 800aa6a:	6825      	ldr	r5, [r4, #0]
 800aa6c:	f015 0506 	ands.w	r5, r5, #6
 800aa70:	d106      	bne.n	800aa80 <_printf_common+0x48>
 800aa72:	f104 0a19 	add.w	sl, r4, #25
 800aa76:	68e3      	ldr	r3, [r4, #12]
 800aa78:	6832      	ldr	r2, [r6, #0]
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	42ab      	cmp	r3, r5
 800aa7e:	dc26      	bgt.n	800aace <_printf_common+0x96>
 800aa80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	3b00      	subs	r3, #0
 800aa88:	bf18      	it	ne
 800aa8a:	2301      	movne	r3, #1
 800aa8c:	0692      	lsls	r2, r2, #26
 800aa8e:	d42b      	bmi.n	800aae8 <_printf_common+0xb0>
 800aa90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa94:	4641      	mov	r1, r8
 800aa96:	4638      	mov	r0, r7
 800aa98:	47c8      	blx	r9
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d01e      	beq.n	800aadc <_printf_common+0xa4>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	6922      	ldr	r2, [r4, #16]
 800aaa2:	f003 0306 	and.w	r3, r3, #6
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	bf02      	ittt	eq
 800aaaa:	68e5      	ldreq	r5, [r4, #12]
 800aaac:	6833      	ldreq	r3, [r6, #0]
 800aaae:	1aed      	subeq	r5, r5, r3
 800aab0:	68a3      	ldr	r3, [r4, #8]
 800aab2:	bf0c      	ite	eq
 800aab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab8:	2500      	movne	r5, #0
 800aaba:	4293      	cmp	r3, r2
 800aabc:	bfc4      	itt	gt
 800aabe:	1a9b      	subgt	r3, r3, r2
 800aac0:	18ed      	addgt	r5, r5, r3
 800aac2:	2600      	movs	r6, #0
 800aac4:	341a      	adds	r4, #26
 800aac6:	42b5      	cmp	r5, r6
 800aac8:	d11a      	bne.n	800ab00 <_printf_common+0xc8>
 800aaca:	2000      	movs	r0, #0
 800aacc:	e008      	b.n	800aae0 <_printf_common+0xa8>
 800aace:	2301      	movs	r3, #1
 800aad0:	4652      	mov	r2, sl
 800aad2:	4641      	mov	r1, r8
 800aad4:	4638      	mov	r0, r7
 800aad6:	47c8      	blx	r9
 800aad8:	3001      	adds	r0, #1
 800aada:	d103      	bne.n	800aae4 <_printf_common+0xac>
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae4:	3501      	adds	r5, #1
 800aae6:	e7c6      	b.n	800aa76 <_printf_common+0x3e>
 800aae8:	18e1      	adds	r1, r4, r3
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	2030      	movs	r0, #48	@ 0x30
 800aaee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aaf2:	4422      	add	r2, r4
 800aaf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aaf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aafc:	3302      	adds	r3, #2
 800aafe:	e7c7      	b.n	800aa90 <_printf_common+0x58>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4622      	mov	r2, r4
 800ab04:	4641      	mov	r1, r8
 800ab06:	4638      	mov	r0, r7
 800ab08:	47c8      	blx	r9
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d0e6      	beq.n	800aadc <_printf_common+0xa4>
 800ab0e:	3601      	adds	r6, #1
 800ab10:	e7d9      	b.n	800aac6 <_printf_common+0x8e>
	...

0800ab14 <_printf_i>:
 800ab14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	7e0f      	ldrb	r7, [r1, #24]
 800ab1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab1c:	2f78      	cmp	r7, #120	@ 0x78
 800ab1e:	4691      	mov	r9, r2
 800ab20:	4680      	mov	r8, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	469a      	mov	sl, r3
 800ab26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab2a:	d807      	bhi.n	800ab3c <_printf_i+0x28>
 800ab2c:	2f62      	cmp	r7, #98	@ 0x62
 800ab2e:	d80a      	bhi.n	800ab46 <_printf_i+0x32>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	f000 80d2 	beq.w	800acda <_printf_i+0x1c6>
 800ab36:	2f58      	cmp	r7, #88	@ 0x58
 800ab38:	f000 80b9 	beq.w	800acae <_printf_i+0x19a>
 800ab3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab44:	e03a      	b.n	800abbc <_printf_i+0xa8>
 800ab46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab4a:	2b15      	cmp	r3, #21
 800ab4c:	d8f6      	bhi.n	800ab3c <_printf_i+0x28>
 800ab4e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab54 <_printf_i+0x40>)
 800ab50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab54:	0800abad 	.word	0x0800abad
 800ab58:	0800abc1 	.word	0x0800abc1
 800ab5c:	0800ab3d 	.word	0x0800ab3d
 800ab60:	0800ab3d 	.word	0x0800ab3d
 800ab64:	0800ab3d 	.word	0x0800ab3d
 800ab68:	0800ab3d 	.word	0x0800ab3d
 800ab6c:	0800abc1 	.word	0x0800abc1
 800ab70:	0800ab3d 	.word	0x0800ab3d
 800ab74:	0800ab3d 	.word	0x0800ab3d
 800ab78:	0800ab3d 	.word	0x0800ab3d
 800ab7c:	0800ab3d 	.word	0x0800ab3d
 800ab80:	0800acc1 	.word	0x0800acc1
 800ab84:	0800abeb 	.word	0x0800abeb
 800ab88:	0800ac7b 	.word	0x0800ac7b
 800ab8c:	0800ab3d 	.word	0x0800ab3d
 800ab90:	0800ab3d 	.word	0x0800ab3d
 800ab94:	0800ace3 	.word	0x0800ace3
 800ab98:	0800ab3d 	.word	0x0800ab3d
 800ab9c:	0800abeb 	.word	0x0800abeb
 800aba0:	0800ab3d 	.word	0x0800ab3d
 800aba4:	0800ab3d 	.word	0x0800ab3d
 800aba8:	0800ac83 	.word	0x0800ac83
 800abac:	6833      	ldr	r3, [r6, #0]
 800abae:	1d1a      	adds	r2, r3, #4
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6032      	str	r2, [r6, #0]
 800abb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abbc:	2301      	movs	r3, #1
 800abbe:	e09d      	b.n	800acfc <_printf_i+0x1e8>
 800abc0:	6833      	ldr	r3, [r6, #0]
 800abc2:	6820      	ldr	r0, [r4, #0]
 800abc4:	1d19      	adds	r1, r3, #4
 800abc6:	6031      	str	r1, [r6, #0]
 800abc8:	0606      	lsls	r6, r0, #24
 800abca:	d501      	bpl.n	800abd0 <_printf_i+0xbc>
 800abcc:	681d      	ldr	r5, [r3, #0]
 800abce:	e003      	b.n	800abd8 <_printf_i+0xc4>
 800abd0:	0645      	lsls	r5, r0, #25
 800abd2:	d5fb      	bpl.n	800abcc <_printf_i+0xb8>
 800abd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abd8:	2d00      	cmp	r5, #0
 800abda:	da03      	bge.n	800abe4 <_printf_i+0xd0>
 800abdc:	232d      	movs	r3, #45	@ 0x2d
 800abde:	426d      	negs	r5, r5
 800abe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abe4:	4859      	ldr	r0, [pc, #356]	@ (800ad4c <_printf_i+0x238>)
 800abe6:	230a      	movs	r3, #10
 800abe8:	e011      	b.n	800ac0e <_printf_i+0xfa>
 800abea:	6821      	ldr	r1, [r4, #0]
 800abec:	6833      	ldr	r3, [r6, #0]
 800abee:	0608      	lsls	r0, r1, #24
 800abf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abf4:	d402      	bmi.n	800abfc <_printf_i+0xe8>
 800abf6:	0649      	lsls	r1, r1, #25
 800abf8:	bf48      	it	mi
 800abfa:	b2ad      	uxthmi	r5, r5
 800abfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800abfe:	4853      	ldr	r0, [pc, #332]	@ (800ad4c <_printf_i+0x238>)
 800ac00:	6033      	str	r3, [r6, #0]
 800ac02:	bf14      	ite	ne
 800ac04:	230a      	movne	r3, #10
 800ac06:	2308      	moveq	r3, #8
 800ac08:	2100      	movs	r1, #0
 800ac0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac0e:	6866      	ldr	r6, [r4, #4]
 800ac10:	60a6      	str	r6, [r4, #8]
 800ac12:	2e00      	cmp	r6, #0
 800ac14:	bfa2      	ittt	ge
 800ac16:	6821      	ldrge	r1, [r4, #0]
 800ac18:	f021 0104 	bicge.w	r1, r1, #4
 800ac1c:	6021      	strge	r1, [r4, #0]
 800ac1e:	b90d      	cbnz	r5, 800ac24 <_printf_i+0x110>
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	d04b      	beq.n	800acbc <_printf_i+0x1a8>
 800ac24:	4616      	mov	r6, r2
 800ac26:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac2a:	fb03 5711 	mls	r7, r3, r1, r5
 800ac2e:	5dc7      	ldrb	r7, [r0, r7]
 800ac30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac34:	462f      	mov	r7, r5
 800ac36:	42bb      	cmp	r3, r7
 800ac38:	460d      	mov	r5, r1
 800ac3a:	d9f4      	bls.n	800ac26 <_printf_i+0x112>
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d10b      	bne.n	800ac58 <_printf_i+0x144>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	07df      	lsls	r7, r3, #31
 800ac44:	d508      	bpl.n	800ac58 <_printf_i+0x144>
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	6861      	ldr	r1, [r4, #4]
 800ac4a:	4299      	cmp	r1, r3
 800ac4c:	bfde      	ittt	le
 800ac4e:	2330      	movle	r3, #48	@ 0x30
 800ac50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac58:	1b92      	subs	r2, r2, r6
 800ac5a:	6122      	str	r2, [r4, #16]
 800ac5c:	f8cd a000 	str.w	sl, [sp]
 800ac60:	464b      	mov	r3, r9
 800ac62:	aa03      	add	r2, sp, #12
 800ac64:	4621      	mov	r1, r4
 800ac66:	4640      	mov	r0, r8
 800ac68:	f7ff fee6 	bl	800aa38 <_printf_common>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d14a      	bne.n	800ad06 <_printf_i+0x1f2>
 800ac70:	f04f 30ff 	mov.w	r0, #4294967295
 800ac74:	b004      	add	sp, #16
 800ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	f043 0320 	orr.w	r3, r3, #32
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	4833      	ldr	r0, [pc, #204]	@ (800ad50 <_printf_i+0x23c>)
 800ac84:	2778      	movs	r7, #120	@ 0x78
 800ac86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	6831      	ldr	r1, [r6, #0]
 800ac8e:	061f      	lsls	r7, r3, #24
 800ac90:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac94:	d402      	bmi.n	800ac9c <_printf_i+0x188>
 800ac96:	065f      	lsls	r7, r3, #25
 800ac98:	bf48      	it	mi
 800ac9a:	b2ad      	uxthmi	r5, r5
 800ac9c:	6031      	str	r1, [r6, #0]
 800ac9e:	07d9      	lsls	r1, r3, #31
 800aca0:	bf44      	itt	mi
 800aca2:	f043 0320 	orrmi.w	r3, r3, #32
 800aca6:	6023      	strmi	r3, [r4, #0]
 800aca8:	b11d      	cbz	r5, 800acb2 <_printf_i+0x19e>
 800acaa:	2310      	movs	r3, #16
 800acac:	e7ac      	b.n	800ac08 <_printf_i+0xf4>
 800acae:	4827      	ldr	r0, [pc, #156]	@ (800ad4c <_printf_i+0x238>)
 800acb0:	e7e9      	b.n	800ac86 <_printf_i+0x172>
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	f023 0320 	bic.w	r3, r3, #32
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	e7f6      	b.n	800acaa <_printf_i+0x196>
 800acbc:	4616      	mov	r6, r2
 800acbe:	e7bd      	b.n	800ac3c <_printf_i+0x128>
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	6825      	ldr	r5, [r4, #0]
 800acc4:	6961      	ldr	r1, [r4, #20]
 800acc6:	1d18      	adds	r0, r3, #4
 800acc8:	6030      	str	r0, [r6, #0]
 800acca:	062e      	lsls	r6, r5, #24
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0x1c0>
 800acd0:	6019      	str	r1, [r3, #0]
 800acd2:	e002      	b.n	800acda <_printf_i+0x1c6>
 800acd4:	0668      	lsls	r0, r5, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0x1bc>
 800acd8:	8019      	strh	r1, [r3, #0]
 800acda:	2300      	movs	r3, #0
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	4616      	mov	r6, r2
 800ace0:	e7bc      	b.n	800ac5c <_printf_i+0x148>
 800ace2:	6833      	ldr	r3, [r6, #0]
 800ace4:	1d1a      	adds	r2, r3, #4
 800ace6:	6032      	str	r2, [r6, #0]
 800ace8:	681e      	ldr	r6, [r3, #0]
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	2100      	movs	r1, #0
 800acee:	4630      	mov	r0, r6
 800acf0:	f7f5 fa76 	bl	80001e0 <memchr>
 800acf4:	b108      	cbz	r0, 800acfa <_printf_i+0x1e6>
 800acf6:	1b80      	subs	r0, r0, r6
 800acf8:	6060      	str	r0, [r4, #4]
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	2300      	movs	r3, #0
 800ad00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad04:	e7aa      	b.n	800ac5c <_printf_i+0x148>
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	4632      	mov	r2, r6
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	47d0      	blx	sl
 800ad10:	3001      	adds	r0, #1
 800ad12:	d0ad      	beq.n	800ac70 <_printf_i+0x15c>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	079b      	lsls	r3, r3, #30
 800ad18:	d413      	bmi.n	800ad42 <_printf_i+0x22e>
 800ad1a:	68e0      	ldr	r0, [r4, #12]
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	4298      	cmp	r0, r3
 800ad20:	bfb8      	it	lt
 800ad22:	4618      	movlt	r0, r3
 800ad24:	e7a6      	b.n	800ac74 <_printf_i+0x160>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4632      	mov	r2, r6
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	47d0      	blx	sl
 800ad30:	3001      	adds	r0, #1
 800ad32:	d09d      	beq.n	800ac70 <_printf_i+0x15c>
 800ad34:	3501      	adds	r5, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	9903      	ldr	r1, [sp, #12]
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	42ab      	cmp	r3, r5
 800ad3e:	dcf2      	bgt.n	800ad26 <_printf_i+0x212>
 800ad40:	e7eb      	b.n	800ad1a <_printf_i+0x206>
 800ad42:	2500      	movs	r5, #0
 800ad44:	f104 0619 	add.w	r6, r4, #25
 800ad48:	e7f5      	b.n	800ad36 <_printf_i+0x222>
 800ad4a:	bf00      	nop
 800ad4c:	0800feb5 	.word	0x0800feb5
 800ad50:	0800fec6 	.word	0x0800fec6

0800ad54 <_scanf_float>:
 800ad54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad58:	b087      	sub	sp, #28
 800ad5a:	4617      	mov	r7, r2
 800ad5c:	9303      	str	r3, [sp, #12]
 800ad5e:	688b      	ldr	r3, [r1, #8]
 800ad60:	1e5a      	subs	r2, r3, #1
 800ad62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ad66:	bf81      	itttt	hi
 800ad68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ad6c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ad70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ad74:	608b      	strhi	r3, [r1, #8]
 800ad76:	680b      	ldr	r3, [r1, #0]
 800ad78:	460a      	mov	r2, r1
 800ad7a:	f04f 0500 	mov.w	r5, #0
 800ad7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ad82:	f842 3b1c 	str.w	r3, [r2], #28
 800ad86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	bf98      	it	ls
 800ad90:	f04f 0b00 	movls.w	fp, #0
 800ad94:	9201      	str	r2, [sp, #4]
 800ad96:	4616      	mov	r6, r2
 800ad98:	46aa      	mov	sl, r5
 800ad9a:	46a9      	mov	r9, r5
 800ad9c:	9502      	str	r5, [sp, #8]
 800ad9e:	68a2      	ldr	r2, [r4, #8]
 800ada0:	b152      	cbz	r2, 800adb8 <_scanf_float+0x64>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b4e      	cmp	r3, #78	@ 0x4e
 800ada8:	d864      	bhi.n	800ae74 <_scanf_float+0x120>
 800adaa:	2b40      	cmp	r3, #64	@ 0x40
 800adac:	d83c      	bhi.n	800ae28 <_scanf_float+0xd4>
 800adae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800adb2:	b2c8      	uxtb	r0, r1
 800adb4:	280e      	cmp	r0, #14
 800adb6:	d93a      	bls.n	800ae2e <_scanf_float+0xda>
 800adb8:	f1b9 0f00 	cmp.w	r9, #0
 800adbc:	d003      	beq.n	800adc6 <_scanf_float+0x72>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adca:	f1ba 0f01 	cmp.w	sl, #1
 800adce:	f200 8117 	bhi.w	800b000 <_scanf_float+0x2ac>
 800add2:	9b01      	ldr	r3, [sp, #4]
 800add4:	429e      	cmp	r6, r3
 800add6:	f200 8108 	bhi.w	800afea <_scanf_float+0x296>
 800adda:	2001      	movs	r0, #1
 800addc:	b007      	add	sp, #28
 800adde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ade6:	2a0d      	cmp	r2, #13
 800ade8:	d8e6      	bhi.n	800adb8 <_scanf_float+0x64>
 800adea:	a101      	add	r1, pc, #4	@ (adr r1, 800adf0 <_scanf_float+0x9c>)
 800adec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800adf0:	0800af37 	.word	0x0800af37
 800adf4:	0800adb9 	.word	0x0800adb9
 800adf8:	0800adb9 	.word	0x0800adb9
 800adfc:	0800adb9 	.word	0x0800adb9
 800ae00:	0800af97 	.word	0x0800af97
 800ae04:	0800af6f 	.word	0x0800af6f
 800ae08:	0800adb9 	.word	0x0800adb9
 800ae0c:	0800adb9 	.word	0x0800adb9
 800ae10:	0800af45 	.word	0x0800af45
 800ae14:	0800adb9 	.word	0x0800adb9
 800ae18:	0800adb9 	.word	0x0800adb9
 800ae1c:	0800adb9 	.word	0x0800adb9
 800ae20:	0800adb9 	.word	0x0800adb9
 800ae24:	0800aefd 	.word	0x0800aefd
 800ae28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ae2c:	e7db      	b.n	800ade6 <_scanf_float+0x92>
 800ae2e:	290e      	cmp	r1, #14
 800ae30:	d8c2      	bhi.n	800adb8 <_scanf_float+0x64>
 800ae32:	a001      	add	r0, pc, #4	@ (adr r0, 800ae38 <_scanf_float+0xe4>)
 800ae34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae38:	0800aeed 	.word	0x0800aeed
 800ae3c:	0800adb9 	.word	0x0800adb9
 800ae40:	0800aeed 	.word	0x0800aeed
 800ae44:	0800af83 	.word	0x0800af83
 800ae48:	0800adb9 	.word	0x0800adb9
 800ae4c:	0800ae95 	.word	0x0800ae95
 800ae50:	0800aed3 	.word	0x0800aed3
 800ae54:	0800aed3 	.word	0x0800aed3
 800ae58:	0800aed3 	.word	0x0800aed3
 800ae5c:	0800aed3 	.word	0x0800aed3
 800ae60:	0800aed3 	.word	0x0800aed3
 800ae64:	0800aed3 	.word	0x0800aed3
 800ae68:	0800aed3 	.word	0x0800aed3
 800ae6c:	0800aed3 	.word	0x0800aed3
 800ae70:	0800aed3 	.word	0x0800aed3
 800ae74:	2b6e      	cmp	r3, #110	@ 0x6e
 800ae76:	d809      	bhi.n	800ae8c <_scanf_float+0x138>
 800ae78:	2b60      	cmp	r3, #96	@ 0x60
 800ae7a:	d8b2      	bhi.n	800ade2 <_scanf_float+0x8e>
 800ae7c:	2b54      	cmp	r3, #84	@ 0x54
 800ae7e:	d07b      	beq.n	800af78 <_scanf_float+0x224>
 800ae80:	2b59      	cmp	r3, #89	@ 0x59
 800ae82:	d199      	bne.n	800adb8 <_scanf_float+0x64>
 800ae84:	2d07      	cmp	r5, #7
 800ae86:	d197      	bne.n	800adb8 <_scanf_float+0x64>
 800ae88:	2508      	movs	r5, #8
 800ae8a:	e02c      	b.n	800aee6 <_scanf_float+0x192>
 800ae8c:	2b74      	cmp	r3, #116	@ 0x74
 800ae8e:	d073      	beq.n	800af78 <_scanf_float+0x224>
 800ae90:	2b79      	cmp	r3, #121	@ 0x79
 800ae92:	e7f6      	b.n	800ae82 <_scanf_float+0x12e>
 800ae94:	6821      	ldr	r1, [r4, #0]
 800ae96:	05c8      	lsls	r0, r1, #23
 800ae98:	d51b      	bpl.n	800aed2 <_scanf_float+0x17e>
 800ae9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ae9e:	6021      	str	r1, [r4, #0]
 800aea0:	f109 0901 	add.w	r9, r9, #1
 800aea4:	f1bb 0f00 	cmp.w	fp, #0
 800aea8:	d003      	beq.n	800aeb2 <_scanf_float+0x15e>
 800aeaa:	3201      	adds	r2, #1
 800aeac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aeb0:	60a2      	str	r2, [r4, #8]
 800aeb2:	68a3      	ldr	r3, [r4, #8]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	60a3      	str	r3, [r4, #8]
 800aeb8:	6923      	ldr	r3, [r4, #16]
 800aeba:	3301      	adds	r3, #1
 800aebc:	6123      	str	r3, [r4, #16]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	f340 8087 	ble.w	800afd8 <_scanf_float+0x284>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	3301      	adds	r3, #1
 800aece:	603b      	str	r3, [r7, #0]
 800aed0:	e765      	b.n	800ad9e <_scanf_float+0x4a>
 800aed2:	eb1a 0105 	adds.w	r1, sl, r5
 800aed6:	f47f af6f 	bne.w	800adb8 <_scanf_float+0x64>
 800aeda:	6822      	ldr	r2, [r4, #0]
 800aedc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800aee0:	6022      	str	r2, [r4, #0]
 800aee2:	460d      	mov	r5, r1
 800aee4:	468a      	mov	sl, r1
 800aee6:	f806 3b01 	strb.w	r3, [r6], #1
 800aeea:	e7e2      	b.n	800aeb2 <_scanf_float+0x15e>
 800aeec:	6822      	ldr	r2, [r4, #0]
 800aeee:	0610      	lsls	r0, r2, #24
 800aef0:	f57f af62 	bpl.w	800adb8 <_scanf_float+0x64>
 800aef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aef8:	6022      	str	r2, [r4, #0]
 800aefa:	e7f4      	b.n	800aee6 <_scanf_float+0x192>
 800aefc:	f1ba 0f00 	cmp.w	sl, #0
 800af00:	d10e      	bne.n	800af20 <_scanf_float+0x1cc>
 800af02:	f1b9 0f00 	cmp.w	r9, #0
 800af06:	d10e      	bne.n	800af26 <_scanf_float+0x1d2>
 800af08:	6822      	ldr	r2, [r4, #0]
 800af0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af12:	d108      	bne.n	800af26 <_scanf_float+0x1d2>
 800af14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af18:	6022      	str	r2, [r4, #0]
 800af1a:	f04f 0a01 	mov.w	sl, #1
 800af1e:	e7e2      	b.n	800aee6 <_scanf_float+0x192>
 800af20:	f1ba 0f02 	cmp.w	sl, #2
 800af24:	d055      	beq.n	800afd2 <_scanf_float+0x27e>
 800af26:	2d01      	cmp	r5, #1
 800af28:	d002      	beq.n	800af30 <_scanf_float+0x1dc>
 800af2a:	2d04      	cmp	r5, #4
 800af2c:	f47f af44 	bne.w	800adb8 <_scanf_float+0x64>
 800af30:	3501      	adds	r5, #1
 800af32:	b2ed      	uxtb	r5, r5
 800af34:	e7d7      	b.n	800aee6 <_scanf_float+0x192>
 800af36:	f1ba 0f01 	cmp.w	sl, #1
 800af3a:	f47f af3d 	bne.w	800adb8 <_scanf_float+0x64>
 800af3e:	f04f 0a02 	mov.w	sl, #2
 800af42:	e7d0      	b.n	800aee6 <_scanf_float+0x192>
 800af44:	b97d      	cbnz	r5, 800af66 <_scanf_float+0x212>
 800af46:	f1b9 0f00 	cmp.w	r9, #0
 800af4a:	f47f af38 	bne.w	800adbe <_scanf_float+0x6a>
 800af4e:	6822      	ldr	r2, [r4, #0]
 800af50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af58:	f040 8108 	bne.w	800b16c <_scanf_float+0x418>
 800af5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af60:	6022      	str	r2, [r4, #0]
 800af62:	2501      	movs	r5, #1
 800af64:	e7bf      	b.n	800aee6 <_scanf_float+0x192>
 800af66:	2d03      	cmp	r5, #3
 800af68:	d0e2      	beq.n	800af30 <_scanf_float+0x1dc>
 800af6a:	2d05      	cmp	r5, #5
 800af6c:	e7de      	b.n	800af2c <_scanf_float+0x1d8>
 800af6e:	2d02      	cmp	r5, #2
 800af70:	f47f af22 	bne.w	800adb8 <_scanf_float+0x64>
 800af74:	2503      	movs	r5, #3
 800af76:	e7b6      	b.n	800aee6 <_scanf_float+0x192>
 800af78:	2d06      	cmp	r5, #6
 800af7a:	f47f af1d 	bne.w	800adb8 <_scanf_float+0x64>
 800af7e:	2507      	movs	r5, #7
 800af80:	e7b1      	b.n	800aee6 <_scanf_float+0x192>
 800af82:	6822      	ldr	r2, [r4, #0]
 800af84:	0591      	lsls	r1, r2, #22
 800af86:	f57f af17 	bpl.w	800adb8 <_scanf_float+0x64>
 800af8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800af8e:	6022      	str	r2, [r4, #0]
 800af90:	f8cd 9008 	str.w	r9, [sp, #8]
 800af94:	e7a7      	b.n	800aee6 <_scanf_float+0x192>
 800af96:	6822      	ldr	r2, [r4, #0]
 800af98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800af9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800afa0:	d006      	beq.n	800afb0 <_scanf_float+0x25c>
 800afa2:	0550      	lsls	r0, r2, #21
 800afa4:	f57f af08 	bpl.w	800adb8 <_scanf_float+0x64>
 800afa8:	f1b9 0f00 	cmp.w	r9, #0
 800afac:	f000 80de 	beq.w	800b16c <_scanf_float+0x418>
 800afb0:	0591      	lsls	r1, r2, #22
 800afb2:	bf58      	it	pl
 800afb4:	9902      	ldrpl	r1, [sp, #8]
 800afb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800afba:	bf58      	it	pl
 800afbc:	eba9 0101 	subpl.w	r1, r9, r1
 800afc0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800afc4:	bf58      	it	pl
 800afc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800afca:	6022      	str	r2, [r4, #0]
 800afcc:	f04f 0900 	mov.w	r9, #0
 800afd0:	e789      	b.n	800aee6 <_scanf_float+0x192>
 800afd2:	f04f 0a03 	mov.w	sl, #3
 800afd6:	e786      	b.n	800aee6 <_scanf_float+0x192>
 800afd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800afdc:	4639      	mov	r1, r7
 800afde:	4640      	mov	r0, r8
 800afe0:	4798      	blx	r3
 800afe2:	2800      	cmp	r0, #0
 800afe4:	f43f aedb 	beq.w	800ad9e <_scanf_float+0x4a>
 800afe8:	e6e6      	b.n	800adb8 <_scanf_float+0x64>
 800afea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800afee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aff2:	463a      	mov	r2, r7
 800aff4:	4640      	mov	r0, r8
 800aff6:	4798      	blx	r3
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	3b01      	subs	r3, #1
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	e6e8      	b.n	800add2 <_scanf_float+0x7e>
 800b000:	1e6b      	subs	r3, r5, #1
 800b002:	2b06      	cmp	r3, #6
 800b004:	d824      	bhi.n	800b050 <_scanf_float+0x2fc>
 800b006:	2d02      	cmp	r5, #2
 800b008:	d836      	bhi.n	800b078 <_scanf_float+0x324>
 800b00a:	9b01      	ldr	r3, [sp, #4]
 800b00c:	429e      	cmp	r6, r3
 800b00e:	f67f aee4 	bls.w	800adda <_scanf_float+0x86>
 800b012:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b016:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b01a:	463a      	mov	r2, r7
 800b01c:	4640      	mov	r0, r8
 800b01e:	4798      	blx	r3
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	3b01      	subs	r3, #1
 800b024:	6123      	str	r3, [r4, #16]
 800b026:	e7f0      	b.n	800b00a <_scanf_float+0x2b6>
 800b028:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b02c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b030:	463a      	mov	r2, r7
 800b032:	4640      	mov	r0, r8
 800b034:	4798      	blx	r3
 800b036:	6923      	ldr	r3, [r4, #16]
 800b038:	3b01      	subs	r3, #1
 800b03a:	6123      	str	r3, [r4, #16]
 800b03c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b040:	fa5f fa8a 	uxtb.w	sl, sl
 800b044:	f1ba 0f02 	cmp.w	sl, #2
 800b048:	d1ee      	bne.n	800b028 <_scanf_float+0x2d4>
 800b04a:	3d03      	subs	r5, #3
 800b04c:	b2ed      	uxtb	r5, r5
 800b04e:	1b76      	subs	r6, r6, r5
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	05da      	lsls	r2, r3, #23
 800b054:	d530      	bpl.n	800b0b8 <_scanf_float+0x364>
 800b056:	055b      	lsls	r3, r3, #21
 800b058:	d511      	bpl.n	800b07e <_scanf_float+0x32a>
 800b05a:	9b01      	ldr	r3, [sp, #4]
 800b05c:	429e      	cmp	r6, r3
 800b05e:	f67f aebc 	bls.w	800adda <_scanf_float+0x86>
 800b062:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b06a:	463a      	mov	r2, r7
 800b06c:	4640      	mov	r0, r8
 800b06e:	4798      	blx	r3
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	3b01      	subs	r3, #1
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	e7f0      	b.n	800b05a <_scanf_float+0x306>
 800b078:	46aa      	mov	sl, r5
 800b07a:	46b3      	mov	fp, r6
 800b07c:	e7de      	b.n	800b03c <_scanf_float+0x2e8>
 800b07e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	2965      	cmp	r1, #101	@ 0x65
 800b086:	f103 33ff 	add.w	r3, r3, #4294967295
 800b08a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b08e:	6123      	str	r3, [r4, #16]
 800b090:	d00c      	beq.n	800b0ac <_scanf_float+0x358>
 800b092:	2945      	cmp	r1, #69	@ 0x45
 800b094:	d00a      	beq.n	800b0ac <_scanf_float+0x358>
 800b096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b09a:	463a      	mov	r2, r7
 800b09c:	4640      	mov	r0, r8
 800b09e:	4798      	blx	r3
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	1eb5      	subs	r5, r6, #2
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0b0:	463a      	mov	r2, r7
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	4798      	blx	r3
 800b0b6:	462e      	mov	r6, r5
 800b0b8:	6822      	ldr	r2, [r4, #0]
 800b0ba:	f012 0210 	ands.w	r2, r2, #16
 800b0be:	d001      	beq.n	800b0c4 <_scanf_float+0x370>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	e68b      	b.n	800addc <_scanf_float+0x88>
 800b0c4:	7032      	strb	r2, [r6, #0]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b0cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0d0:	d11c      	bne.n	800b10c <_scanf_float+0x3b8>
 800b0d2:	9b02      	ldr	r3, [sp, #8]
 800b0d4:	454b      	cmp	r3, r9
 800b0d6:	eba3 0209 	sub.w	r2, r3, r9
 800b0da:	d123      	bne.n	800b124 <_scanf_float+0x3d0>
 800b0dc:	9901      	ldr	r1, [sp, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	f002 fcc1 	bl	800da68 <_strtod_r>
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	6821      	ldr	r1, [r4, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f011 0f02 	tst.w	r1, #2
 800b0f0:	ec57 6b10 	vmov	r6, r7, d0
 800b0f4:	f103 0204 	add.w	r2, r3, #4
 800b0f8:	d01f      	beq.n	800b13a <_scanf_float+0x3e6>
 800b0fa:	9903      	ldr	r1, [sp, #12]
 800b0fc:	600a      	str	r2, [r1, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	e9c3 6700 	strd	r6, r7, [r3]
 800b104:	68e3      	ldr	r3, [r4, #12]
 800b106:	3301      	adds	r3, #1
 800b108:	60e3      	str	r3, [r4, #12]
 800b10a:	e7d9      	b.n	800b0c0 <_scanf_float+0x36c>
 800b10c:	9b04      	ldr	r3, [sp, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0e4      	beq.n	800b0dc <_scanf_float+0x388>
 800b112:	9905      	ldr	r1, [sp, #20]
 800b114:	230a      	movs	r3, #10
 800b116:	3101      	adds	r1, #1
 800b118:	4640      	mov	r0, r8
 800b11a:	f7ff f9b7 	bl	800a48c <_strtol_r>
 800b11e:	9b04      	ldr	r3, [sp, #16]
 800b120:	9e05      	ldr	r6, [sp, #20]
 800b122:	1ac2      	subs	r2, r0, r3
 800b124:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b128:	429e      	cmp	r6, r3
 800b12a:	bf28      	it	cs
 800b12c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b130:	4910      	ldr	r1, [pc, #64]	@ (800b174 <_scanf_float+0x420>)
 800b132:	4630      	mov	r0, r6
 800b134:	f000 f8f6 	bl	800b324 <siprintf>
 800b138:	e7d0      	b.n	800b0dc <_scanf_float+0x388>
 800b13a:	f011 0f04 	tst.w	r1, #4
 800b13e:	9903      	ldr	r1, [sp, #12]
 800b140:	600a      	str	r2, [r1, #0]
 800b142:	d1dc      	bne.n	800b0fe <_scanf_float+0x3aa>
 800b144:	681d      	ldr	r5, [r3, #0]
 800b146:	4632      	mov	r2, r6
 800b148:	463b      	mov	r3, r7
 800b14a:	4630      	mov	r0, r6
 800b14c:	4639      	mov	r1, r7
 800b14e:	f7f5 fcf5 	bl	8000b3c <__aeabi_dcmpun>
 800b152:	b128      	cbz	r0, 800b160 <_scanf_float+0x40c>
 800b154:	4808      	ldr	r0, [pc, #32]	@ (800b178 <_scanf_float+0x424>)
 800b156:	f000 fa63 	bl	800b620 <nanf>
 800b15a:	ed85 0a00 	vstr	s0, [r5]
 800b15e:	e7d1      	b.n	800b104 <_scanf_float+0x3b0>
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 fd48 	bl	8000bf8 <__aeabi_d2f>
 800b168:	6028      	str	r0, [r5, #0]
 800b16a:	e7cb      	b.n	800b104 <_scanf_float+0x3b0>
 800b16c:	f04f 0900 	mov.w	r9, #0
 800b170:	e629      	b.n	800adc6 <_scanf_float+0x72>
 800b172:	bf00      	nop
 800b174:	0800fed7 	.word	0x0800fed7
 800b178:	0800ff88 	.word	0x0800ff88

0800b17c <std>:
 800b17c:	2300      	movs	r3, #0
 800b17e:	b510      	push	{r4, lr}
 800b180:	4604      	mov	r4, r0
 800b182:	e9c0 3300 	strd	r3, r3, [r0]
 800b186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b18a:	6083      	str	r3, [r0, #8]
 800b18c:	8181      	strh	r1, [r0, #12]
 800b18e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b190:	81c2      	strh	r2, [r0, #14]
 800b192:	6183      	str	r3, [r0, #24]
 800b194:	4619      	mov	r1, r3
 800b196:	2208      	movs	r2, #8
 800b198:	305c      	adds	r0, #92	@ 0x5c
 800b19a:	f000 f952 	bl	800b442 <memset>
 800b19e:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d4 <std+0x58>)
 800b1a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d8 <std+0x5c>)
 800b1a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1dc <std+0x60>)
 800b1a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e0 <std+0x64>)
 800b1ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e4 <std+0x68>)
 800b1b0:	6224      	str	r4, [r4, #32]
 800b1b2:	429c      	cmp	r4, r3
 800b1b4:	d006      	beq.n	800b1c4 <std+0x48>
 800b1b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1ba:	4294      	cmp	r4, r2
 800b1bc:	d002      	beq.n	800b1c4 <std+0x48>
 800b1be:	33d0      	adds	r3, #208	@ 0xd0
 800b1c0:	429c      	cmp	r4, r3
 800b1c2:	d105      	bne.n	800b1d0 <std+0x54>
 800b1c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1cc:	f000 ba24 	b.w	800b618 <__retarget_lock_init_recursive>
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800b3b9 	.word	0x0800b3b9
 800b1d8:	0800b3df 	.word	0x0800b3df
 800b1dc:	0800b417 	.word	0x0800b417
 800b1e0:	0800b43b 	.word	0x0800b43b
 800b1e4:	200007dc 	.word	0x200007dc

0800b1e8 <stdio_exit_handler>:
 800b1e8:	4a02      	ldr	r2, [pc, #8]	@ (800b1f4 <stdio_exit_handler+0xc>)
 800b1ea:	4903      	ldr	r1, [pc, #12]	@ (800b1f8 <stdio_exit_handler+0x10>)
 800b1ec:	4803      	ldr	r0, [pc, #12]	@ (800b1fc <stdio_exit_handler+0x14>)
 800b1ee:	f000 b869 	b.w	800b2c4 <_fwalk_sglue>
 800b1f2:	bf00      	nop
 800b1f4:	20000014 	.word	0x20000014
 800b1f8:	0800e6e5 	.word	0x0800e6e5
 800b1fc:	20000024 	.word	0x20000024

0800b200 <cleanup_stdio>:
 800b200:	6841      	ldr	r1, [r0, #4]
 800b202:	4b0c      	ldr	r3, [pc, #48]	@ (800b234 <cleanup_stdio+0x34>)
 800b204:	4299      	cmp	r1, r3
 800b206:	b510      	push	{r4, lr}
 800b208:	4604      	mov	r4, r0
 800b20a:	d001      	beq.n	800b210 <cleanup_stdio+0x10>
 800b20c:	f003 fa6a 	bl	800e6e4 <_fflush_r>
 800b210:	68a1      	ldr	r1, [r4, #8]
 800b212:	4b09      	ldr	r3, [pc, #36]	@ (800b238 <cleanup_stdio+0x38>)
 800b214:	4299      	cmp	r1, r3
 800b216:	d002      	beq.n	800b21e <cleanup_stdio+0x1e>
 800b218:	4620      	mov	r0, r4
 800b21a:	f003 fa63 	bl	800e6e4 <_fflush_r>
 800b21e:	68e1      	ldr	r1, [r4, #12]
 800b220:	4b06      	ldr	r3, [pc, #24]	@ (800b23c <cleanup_stdio+0x3c>)
 800b222:	4299      	cmp	r1, r3
 800b224:	d004      	beq.n	800b230 <cleanup_stdio+0x30>
 800b226:	4620      	mov	r0, r4
 800b228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b22c:	f003 ba5a 	b.w	800e6e4 <_fflush_r>
 800b230:	bd10      	pop	{r4, pc}
 800b232:	bf00      	nop
 800b234:	200007dc 	.word	0x200007dc
 800b238:	20000844 	.word	0x20000844
 800b23c:	200008ac 	.word	0x200008ac

0800b240 <global_stdio_init.part.0>:
 800b240:	b510      	push	{r4, lr}
 800b242:	4b0b      	ldr	r3, [pc, #44]	@ (800b270 <global_stdio_init.part.0+0x30>)
 800b244:	4c0b      	ldr	r4, [pc, #44]	@ (800b274 <global_stdio_init.part.0+0x34>)
 800b246:	4a0c      	ldr	r2, [pc, #48]	@ (800b278 <global_stdio_init.part.0+0x38>)
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	4620      	mov	r0, r4
 800b24c:	2200      	movs	r2, #0
 800b24e:	2104      	movs	r1, #4
 800b250:	f7ff ff94 	bl	800b17c <std>
 800b254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b258:	2201      	movs	r2, #1
 800b25a:	2109      	movs	r1, #9
 800b25c:	f7ff ff8e 	bl	800b17c <std>
 800b260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b264:	2202      	movs	r2, #2
 800b266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b26a:	2112      	movs	r1, #18
 800b26c:	f7ff bf86 	b.w	800b17c <std>
 800b270:	20000914 	.word	0x20000914
 800b274:	200007dc 	.word	0x200007dc
 800b278:	0800b1e9 	.word	0x0800b1e9

0800b27c <__sfp_lock_acquire>:
 800b27c:	4801      	ldr	r0, [pc, #4]	@ (800b284 <__sfp_lock_acquire+0x8>)
 800b27e:	f000 b9cc 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800b282:	bf00      	nop
 800b284:	2000091d 	.word	0x2000091d

0800b288 <__sfp_lock_release>:
 800b288:	4801      	ldr	r0, [pc, #4]	@ (800b290 <__sfp_lock_release+0x8>)
 800b28a:	f000 b9c7 	b.w	800b61c <__retarget_lock_release_recursive>
 800b28e:	bf00      	nop
 800b290:	2000091d 	.word	0x2000091d

0800b294 <__sinit>:
 800b294:	b510      	push	{r4, lr}
 800b296:	4604      	mov	r4, r0
 800b298:	f7ff fff0 	bl	800b27c <__sfp_lock_acquire>
 800b29c:	6a23      	ldr	r3, [r4, #32]
 800b29e:	b11b      	cbz	r3, 800b2a8 <__sinit+0x14>
 800b2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a4:	f7ff bff0 	b.w	800b288 <__sfp_lock_release>
 800b2a8:	4b04      	ldr	r3, [pc, #16]	@ (800b2bc <__sinit+0x28>)
 800b2aa:	6223      	str	r3, [r4, #32]
 800b2ac:	4b04      	ldr	r3, [pc, #16]	@ (800b2c0 <__sinit+0x2c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1f5      	bne.n	800b2a0 <__sinit+0xc>
 800b2b4:	f7ff ffc4 	bl	800b240 <global_stdio_init.part.0>
 800b2b8:	e7f2      	b.n	800b2a0 <__sinit+0xc>
 800b2ba:	bf00      	nop
 800b2bc:	0800b201 	.word	0x0800b201
 800b2c0:	20000914 	.word	0x20000914

0800b2c4 <_fwalk_sglue>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	4688      	mov	r8, r1
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b2d8:	d505      	bpl.n	800b2e6 <_fwalk_sglue+0x22>
 800b2da:	6824      	ldr	r4, [r4, #0]
 800b2dc:	2c00      	cmp	r4, #0
 800b2de:	d1f7      	bne.n	800b2d0 <_fwalk_sglue+0xc>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e6:	89ab      	ldrh	r3, [r5, #12]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d907      	bls.n	800b2fc <_fwalk_sglue+0x38>
 800b2ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	d003      	beq.n	800b2fc <_fwalk_sglue+0x38>
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	47c0      	blx	r8
 800b2fa:	4306      	orrs	r6, r0
 800b2fc:	3568      	adds	r5, #104	@ 0x68
 800b2fe:	e7e9      	b.n	800b2d4 <_fwalk_sglue+0x10>

0800b300 <iprintf>:
 800b300:	b40f      	push	{r0, r1, r2, r3}
 800b302:	b507      	push	{r0, r1, r2, lr}
 800b304:	4906      	ldr	r1, [pc, #24]	@ (800b320 <iprintf+0x20>)
 800b306:	ab04      	add	r3, sp, #16
 800b308:	6808      	ldr	r0, [r1, #0]
 800b30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30e:	6881      	ldr	r1, [r0, #8]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	f002 fefd 	bl	800e110 <_vfiprintf_r>
 800b316:	b003      	add	sp, #12
 800b318:	f85d eb04 	ldr.w	lr, [sp], #4
 800b31c:	b004      	add	sp, #16
 800b31e:	4770      	bx	lr
 800b320:	20000020 	.word	0x20000020

0800b324 <siprintf>:
 800b324:	b40e      	push	{r1, r2, r3}
 800b326:	b500      	push	{lr}
 800b328:	b09c      	sub	sp, #112	@ 0x70
 800b32a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b32c:	9002      	str	r0, [sp, #8]
 800b32e:	9006      	str	r0, [sp, #24]
 800b330:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b334:	4809      	ldr	r0, [pc, #36]	@ (800b35c <siprintf+0x38>)
 800b336:	9107      	str	r1, [sp, #28]
 800b338:	9104      	str	r1, [sp, #16]
 800b33a:	4909      	ldr	r1, [pc, #36]	@ (800b360 <siprintf+0x3c>)
 800b33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b340:	9105      	str	r1, [sp, #20]
 800b342:	6800      	ldr	r0, [r0, #0]
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	a902      	add	r1, sp, #8
 800b348:	f002 fbf0 	bl	800db2c <_svfiprintf_r>
 800b34c:	9b02      	ldr	r3, [sp, #8]
 800b34e:	2200      	movs	r2, #0
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	b01c      	add	sp, #112	@ 0x70
 800b354:	f85d eb04 	ldr.w	lr, [sp], #4
 800b358:	b003      	add	sp, #12
 800b35a:	4770      	bx	lr
 800b35c:	20000020 	.word	0x20000020
 800b360:	ffff0208 	.word	0xffff0208

0800b364 <siscanf>:
 800b364:	b40e      	push	{r1, r2, r3}
 800b366:	b530      	push	{r4, r5, lr}
 800b368:	b09c      	sub	sp, #112	@ 0x70
 800b36a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b36c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b370:	f854 5b04 	ldr.w	r5, [r4], #4
 800b374:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b378:	9002      	str	r0, [sp, #8]
 800b37a:	9006      	str	r0, [sp, #24]
 800b37c:	f7f4 ff80 	bl	8000280 <strlen>
 800b380:	4b0b      	ldr	r3, [pc, #44]	@ (800b3b0 <siscanf+0x4c>)
 800b382:	9003      	str	r0, [sp, #12]
 800b384:	9007      	str	r0, [sp, #28]
 800b386:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b388:	480a      	ldr	r0, [pc, #40]	@ (800b3b4 <siscanf+0x50>)
 800b38a:	9401      	str	r4, [sp, #4]
 800b38c:	2300      	movs	r3, #0
 800b38e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b390:	9314      	str	r3, [sp, #80]	@ 0x50
 800b392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b396:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b39a:	462a      	mov	r2, r5
 800b39c:	4623      	mov	r3, r4
 800b39e:	a902      	add	r1, sp, #8
 800b3a0:	6800      	ldr	r0, [r0, #0]
 800b3a2:	f002 fd17 	bl	800ddd4 <__ssvfiscanf_r>
 800b3a6:	b01c      	add	sp, #112	@ 0x70
 800b3a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3ac:	b003      	add	sp, #12
 800b3ae:	4770      	bx	lr
 800b3b0:	0800b3db 	.word	0x0800b3db
 800b3b4:	20000020 	.word	0x20000020

0800b3b8 <__sread>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c0:	f000 f8dc 	bl	800b57c <_read_r>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	bfab      	itete	ge
 800b3c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b3cc:	181b      	addge	r3, r3, r0
 800b3ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3d2:	bfac      	ite	ge
 800b3d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3d6:	81a3      	strhlt	r3, [r4, #12]
 800b3d8:	bd10      	pop	{r4, pc}

0800b3da <__seofread>:
 800b3da:	2000      	movs	r0, #0
 800b3dc:	4770      	bx	lr

0800b3de <__swrite>:
 800b3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	461f      	mov	r7, r3
 800b3e4:	898b      	ldrh	r3, [r1, #12]
 800b3e6:	05db      	lsls	r3, r3, #23
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	4616      	mov	r6, r2
 800b3ee:	d505      	bpl.n	800b3fc <__swrite+0x1e>
 800b3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f000 f8ae 	bl	800b558 <_lseek_r>
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	4632      	mov	r2, r6
 800b40a:	463b      	mov	r3, r7
 800b40c:	4628      	mov	r0, r5
 800b40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b412:	f000 b8c5 	b.w	800b5a0 <_write_r>

0800b416 <__sseek>:
 800b416:	b510      	push	{r4, lr}
 800b418:	460c      	mov	r4, r1
 800b41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41e:	f000 f89b 	bl	800b558 <_lseek_r>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	bf15      	itete	ne
 800b428:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b42a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b42e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b432:	81a3      	strheq	r3, [r4, #12]
 800b434:	bf18      	it	ne
 800b436:	81a3      	strhne	r3, [r4, #12]
 800b438:	bd10      	pop	{r4, pc}

0800b43a <__sclose>:
 800b43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43e:	f000 b87b 	b.w	800b538 <_close_r>

0800b442 <memset>:
 800b442:	4402      	add	r2, r0
 800b444:	4603      	mov	r3, r0
 800b446:	4293      	cmp	r3, r2
 800b448:	d100      	bne.n	800b44c <memset+0xa>
 800b44a:	4770      	bx	lr
 800b44c:	f803 1b01 	strb.w	r1, [r3], #1
 800b450:	e7f9      	b.n	800b446 <memset+0x4>

0800b452 <strncmp>:
 800b452:	b510      	push	{r4, lr}
 800b454:	b16a      	cbz	r2, 800b472 <strncmp+0x20>
 800b456:	3901      	subs	r1, #1
 800b458:	1884      	adds	r4, r0, r2
 800b45a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b45e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b462:	429a      	cmp	r2, r3
 800b464:	d103      	bne.n	800b46e <strncmp+0x1c>
 800b466:	42a0      	cmp	r0, r4
 800b468:	d001      	beq.n	800b46e <strncmp+0x1c>
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	d1f5      	bne.n	800b45a <strncmp+0x8>
 800b46e:	1ad0      	subs	r0, r2, r3
 800b470:	bd10      	pop	{r4, pc}
 800b472:	4610      	mov	r0, r2
 800b474:	e7fc      	b.n	800b470 <strncmp+0x1e>
	...

0800b478 <strtok>:
 800b478:	4b16      	ldr	r3, [pc, #88]	@ (800b4d4 <strtok+0x5c>)
 800b47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47e:	681f      	ldr	r7, [r3, #0]
 800b480:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b482:	4605      	mov	r5, r0
 800b484:	460e      	mov	r6, r1
 800b486:	b9ec      	cbnz	r4, 800b4c4 <strtok+0x4c>
 800b488:	2050      	movs	r0, #80	@ 0x50
 800b48a:	f000 ff83 	bl	800c394 <malloc>
 800b48e:	4602      	mov	r2, r0
 800b490:	6478      	str	r0, [r7, #68]	@ 0x44
 800b492:	b920      	cbnz	r0, 800b49e <strtok+0x26>
 800b494:	4b10      	ldr	r3, [pc, #64]	@ (800b4d8 <strtok+0x60>)
 800b496:	4811      	ldr	r0, [pc, #68]	@ (800b4dc <strtok+0x64>)
 800b498:	215b      	movs	r1, #91	@ 0x5b
 800b49a:	f000 f8c7 	bl	800b62c <__assert_func>
 800b49e:	e9c0 4400 	strd	r4, r4, [r0]
 800b4a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b4a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b4aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b4ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b4b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b4b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b4ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b4be:	6184      	str	r4, [r0, #24]
 800b4c0:	7704      	strb	r4, [r0, #28]
 800b4c2:	6244      	str	r4, [r0, #36]	@ 0x24
 800b4c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d0:	f000 b806 	b.w	800b4e0 <__strtok_r>
 800b4d4:	20000020 	.word	0x20000020
 800b4d8:	0800fedc 	.word	0x0800fedc
 800b4dc:	0800fef3 	.word	0x0800fef3

0800b4e0 <__strtok_r>:
 800b4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	b908      	cbnz	r0, 800b4ea <__strtok_r+0xa>
 800b4e6:	6814      	ldr	r4, [r2, #0]
 800b4e8:	b144      	cbz	r4, 800b4fc <__strtok_r+0x1c>
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b4f0:	460f      	mov	r7, r1
 800b4f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b4f6:	b91e      	cbnz	r6, 800b500 <__strtok_r+0x20>
 800b4f8:	b965      	cbnz	r5, 800b514 <__strtok_r+0x34>
 800b4fa:	6015      	str	r5, [r2, #0]
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	e005      	b.n	800b50c <__strtok_r+0x2c>
 800b500:	42b5      	cmp	r5, r6
 800b502:	d1f6      	bne.n	800b4f2 <__strtok_r+0x12>
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1f0      	bne.n	800b4ea <__strtok_r+0xa>
 800b508:	6014      	str	r4, [r2, #0]
 800b50a:	7003      	strb	r3, [r0, #0]
 800b50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b50e:	461c      	mov	r4, r3
 800b510:	e00c      	b.n	800b52c <__strtok_r+0x4c>
 800b512:	b915      	cbnz	r5, 800b51a <__strtok_r+0x3a>
 800b514:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b518:	460e      	mov	r6, r1
 800b51a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b51e:	42ab      	cmp	r3, r5
 800b520:	d1f7      	bne.n	800b512 <__strtok_r+0x32>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0f3      	beq.n	800b50e <__strtok_r+0x2e>
 800b526:	2300      	movs	r3, #0
 800b528:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b52c:	6014      	str	r4, [r2, #0]
 800b52e:	e7ed      	b.n	800b50c <__strtok_r+0x2c>

0800b530 <_localeconv_r>:
 800b530:	4800      	ldr	r0, [pc, #0]	@ (800b534 <_localeconv_r+0x4>)
 800b532:	4770      	bx	lr
 800b534:	20000160 	.word	0x20000160

0800b538 <_close_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d06      	ldr	r5, [pc, #24]	@ (800b554 <_close_r+0x1c>)
 800b53c:	2300      	movs	r3, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	f7f9 f9da 	bl	80048fc <_close>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_close_r+0x1a>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_close_r+0x1a>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	20000918 	.word	0x20000918

0800b558 <_lseek_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d07      	ldr	r5, [pc, #28]	@ (800b578 <_lseek_r+0x20>)
 800b55c:	4604      	mov	r4, r0
 800b55e:	4608      	mov	r0, r1
 800b560:	4611      	mov	r1, r2
 800b562:	2200      	movs	r2, #0
 800b564:	602a      	str	r2, [r5, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	f7f9 f9ef 	bl	800494a <_lseek>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_lseek_r+0x1e>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_lseek_r+0x1e>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	20000918 	.word	0x20000918

0800b57c <_read_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d07      	ldr	r5, [pc, #28]	@ (800b59c <_read_r+0x20>)
 800b580:	4604      	mov	r4, r0
 800b582:	4608      	mov	r0, r1
 800b584:	4611      	mov	r1, r2
 800b586:	2200      	movs	r2, #0
 800b588:	602a      	str	r2, [r5, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	f7f9 f999 	bl	80048c2 <_read>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_read_r+0x1e>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_read_r+0x1e>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	20000918 	.word	0x20000918

0800b5a0 <_write_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d07      	ldr	r5, [pc, #28]	@ (800b5c0 <_write_r+0x20>)
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	602a      	str	r2, [r5, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f7f8 f9d8 	bl	8003964 <_write>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_write_r+0x1e>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_write_r+0x1e>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	20000918 	.word	0x20000918

0800b5c4 <__errno>:
 800b5c4:	4b01      	ldr	r3, [pc, #4]	@ (800b5cc <__errno+0x8>)
 800b5c6:	6818      	ldr	r0, [r3, #0]
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	20000020 	.word	0x20000020

0800b5d0 <__libc_init_array>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	4d0d      	ldr	r5, [pc, #52]	@ (800b608 <__libc_init_array+0x38>)
 800b5d4:	4c0d      	ldr	r4, [pc, #52]	@ (800b60c <__libc_init_array+0x3c>)
 800b5d6:	1b64      	subs	r4, r4, r5
 800b5d8:	10a4      	asrs	r4, r4, #2
 800b5da:	2600      	movs	r6, #0
 800b5dc:	42a6      	cmp	r6, r4
 800b5de:	d109      	bne.n	800b5f4 <__libc_init_array+0x24>
 800b5e0:	4d0b      	ldr	r5, [pc, #44]	@ (800b610 <__libc_init_array+0x40>)
 800b5e2:	4c0c      	ldr	r4, [pc, #48]	@ (800b614 <__libc_init_array+0x44>)
 800b5e4:	f004 faac 	bl	800fb40 <_init>
 800b5e8:	1b64      	subs	r4, r4, r5
 800b5ea:	10a4      	asrs	r4, r4, #2
 800b5ec:	2600      	movs	r6, #0
 800b5ee:	42a6      	cmp	r6, r4
 800b5f0:	d105      	bne.n	800b5fe <__libc_init_array+0x2e>
 800b5f2:	bd70      	pop	{r4, r5, r6, pc}
 800b5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5f8:	4798      	blx	r3
 800b5fa:	3601      	adds	r6, #1
 800b5fc:	e7ee      	b.n	800b5dc <__libc_init_array+0xc>
 800b5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b602:	4798      	blx	r3
 800b604:	3601      	adds	r6, #1
 800b606:	e7f2      	b.n	800b5ee <__libc_init_array+0x1e>
 800b608:	08010264 	.word	0x08010264
 800b60c:	08010264 	.word	0x08010264
 800b610:	08010264 	.word	0x08010264
 800b614:	08010268 	.word	0x08010268

0800b618 <__retarget_lock_init_recursive>:
 800b618:	4770      	bx	lr

0800b61a <__retarget_lock_acquire_recursive>:
 800b61a:	4770      	bx	lr

0800b61c <__retarget_lock_release_recursive>:
 800b61c:	4770      	bx	lr
	...

0800b620 <nanf>:
 800b620:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b628 <nanf+0x8>
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	7fc00000 	.word	0x7fc00000

0800b62c <__assert_func>:
 800b62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b62e:	4614      	mov	r4, r2
 800b630:	461a      	mov	r2, r3
 800b632:	4b09      	ldr	r3, [pc, #36]	@ (800b658 <__assert_func+0x2c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4605      	mov	r5, r0
 800b638:	68d8      	ldr	r0, [r3, #12]
 800b63a:	b954      	cbnz	r4, 800b652 <__assert_func+0x26>
 800b63c:	4b07      	ldr	r3, [pc, #28]	@ (800b65c <__assert_func+0x30>)
 800b63e:	461c      	mov	r4, r3
 800b640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b644:	9100      	str	r1, [sp, #0]
 800b646:	462b      	mov	r3, r5
 800b648:	4905      	ldr	r1, [pc, #20]	@ (800b660 <__assert_func+0x34>)
 800b64a:	f003 f873 	bl	800e734 <fiprintf>
 800b64e:	f003 f9cb 	bl	800e9e8 <abort>
 800b652:	4b04      	ldr	r3, [pc, #16]	@ (800b664 <__assert_func+0x38>)
 800b654:	e7f4      	b.n	800b640 <__assert_func+0x14>
 800b656:	bf00      	nop
 800b658:	20000020 	.word	0x20000020
 800b65c:	0800ff88 	.word	0x0800ff88
 800b660:	0800ff5a 	.word	0x0800ff5a
 800b664:	0800ff4d 	.word	0x0800ff4d

0800b668 <quorem>:
 800b668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	6903      	ldr	r3, [r0, #16]
 800b66e:	690c      	ldr	r4, [r1, #16]
 800b670:	42a3      	cmp	r3, r4
 800b672:	4607      	mov	r7, r0
 800b674:	db7e      	blt.n	800b774 <quorem+0x10c>
 800b676:	3c01      	subs	r4, #1
 800b678:	f101 0814 	add.w	r8, r1, #20
 800b67c:	00a3      	lsls	r3, r4, #2
 800b67e:	f100 0514 	add.w	r5, r0, #20
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b68e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b692:	3301      	adds	r3, #1
 800b694:	429a      	cmp	r2, r3
 800b696:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b69a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b69e:	d32e      	bcc.n	800b6fe <quorem+0x96>
 800b6a0:	f04f 0a00 	mov.w	sl, #0
 800b6a4:	46c4      	mov	ip, r8
 800b6a6:	46ae      	mov	lr, r5
 800b6a8:	46d3      	mov	fp, sl
 800b6aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6ae:	b298      	uxth	r0, r3
 800b6b0:	fb06 a000 	mla	r0, r6, r0, sl
 800b6b4:	0c02      	lsrs	r2, r0, #16
 800b6b6:	0c1b      	lsrs	r3, r3, #16
 800b6b8:	fb06 2303 	mla	r3, r6, r3, r2
 800b6bc:	f8de 2000 	ldr.w	r2, [lr]
 800b6c0:	b280      	uxth	r0, r0
 800b6c2:	b292      	uxth	r2, r2
 800b6c4:	1a12      	subs	r2, r2, r0
 800b6c6:	445a      	add	r2, fp
 800b6c8:	f8de 0000 	ldr.w	r0, [lr]
 800b6cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b6d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b6da:	b292      	uxth	r2, r2
 800b6dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6e0:	45e1      	cmp	r9, ip
 800b6e2:	f84e 2b04 	str.w	r2, [lr], #4
 800b6e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b6ea:	d2de      	bcs.n	800b6aa <quorem+0x42>
 800b6ec:	9b00      	ldr	r3, [sp, #0]
 800b6ee:	58eb      	ldr	r3, [r5, r3]
 800b6f0:	b92b      	cbnz	r3, 800b6fe <quorem+0x96>
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	3b04      	subs	r3, #4
 800b6f6:	429d      	cmp	r5, r3
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	d32f      	bcc.n	800b75c <quorem+0xf4>
 800b6fc:	613c      	str	r4, [r7, #16]
 800b6fe:	4638      	mov	r0, r7
 800b700:	f001 f9c2 	bl	800ca88 <__mcmp>
 800b704:	2800      	cmp	r0, #0
 800b706:	db25      	blt.n	800b754 <quorem+0xec>
 800b708:	4629      	mov	r1, r5
 800b70a:	2000      	movs	r0, #0
 800b70c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b710:	f8d1 c000 	ldr.w	ip, [r1]
 800b714:	fa1f fe82 	uxth.w	lr, r2
 800b718:	fa1f f38c 	uxth.w	r3, ip
 800b71c:	eba3 030e 	sub.w	r3, r3, lr
 800b720:	4403      	add	r3, r0
 800b722:	0c12      	lsrs	r2, r2, #16
 800b724:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b728:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b732:	45c1      	cmp	r9, r8
 800b734:	f841 3b04 	str.w	r3, [r1], #4
 800b738:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b73c:	d2e6      	bcs.n	800b70c <quorem+0xa4>
 800b73e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b746:	b922      	cbnz	r2, 800b752 <quorem+0xea>
 800b748:	3b04      	subs	r3, #4
 800b74a:	429d      	cmp	r5, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	d30b      	bcc.n	800b768 <quorem+0x100>
 800b750:	613c      	str	r4, [r7, #16]
 800b752:	3601      	adds	r6, #1
 800b754:	4630      	mov	r0, r6
 800b756:	b003      	add	sp, #12
 800b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75c:	6812      	ldr	r2, [r2, #0]
 800b75e:	3b04      	subs	r3, #4
 800b760:	2a00      	cmp	r2, #0
 800b762:	d1cb      	bne.n	800b6fc <quorem+0x94>
 800b764:	3c01      	subs	r4, #1
 800b766:	e7c6      	b.n	800b6f6 <quorem+0x8e>
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	3b04      	subs	r3, #4
 800b76c:	2a00      	cmp	r2, #0
 800b76e:	d1ef      	bne.n	800b750 <quorem+0xe8>
 800b770:	3c01      	subs	r4, #1
 800b772:	e7ea      	b.n	800b74a <quorem+0xe2>
 800b774:	2000      	movs	r0, #0
 800b776:	e7ee      	b.n	800b756 <quorem+0xee>

0800b778 <_dtoa_r>:
 800b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77c:	69c7      	ldr	r7, [r0, #28]
 800b77e:	b099      	sub	sp, #100	@ 0x64
 800b780:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b784:	ec55 4b10 	vmov	r4, r5, d0
 800b788:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b78a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b78c:	4683      	mov	fp, r0
 800b78e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b790:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b792:	b97f      	cbnz	r7, 800b7b4 <_dtoa_r+0x3c>
 800b794:	2010      	movs	r0, #16
 800b796:	f000 fdfd 	bl	800c394 <malloc>
 800b79a:	4602      	mov	r2, r0
 800b79c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b7a0:	b920      	cbnz	r0, 800b7ac <_dtoa_r+0x34>
 800b7a2:	4ba7      	ldr	r3, [pc, #668]	@ (800ba40 <_dtoa_r+0x2c8>)
 800b7a4:	21ef      	movs	r1, #239	@ 0xef
 800b7a6:	48a7      	ldr	r0, [pc, #668]	@ (800ba44 <_dtoa_r+0x2cc>)
 800b7a8:	f7ff ff40 	bl	800b62c <__assert_func>
 800b7ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b7b0:	6007      	str	r7, [r0, #0]
 800b7b2:	60c7      	str	r7, [r0, #12]
 800b7b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7b8:	6819      	ldr	r1, [r3, #0]
 800b7ba:	b159      	cbz	r1, 800b7d4 <_dtoa_r+0x5c>
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	604a      	str	r2, [r1, #4]
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	4093      	lsls	r3, r2
 800b7c4:	608b      	str	r3, [r1, #8]
 800b7c6:	4658      	mov	r0, fp
 800b7c8:	f000 feda 	bl	800c580 <_Bfree>
 800b7cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	1e2b      	subs	r3, r5, #0
 800b7d6:	bfb9      	ittee	lt
 800b7d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b7dc:	9303      	strlt	r3, [sp, #12]
 800b7de:	2300      	movge	r3, #0
 800b7e0:	6033      	strge	r3, [r6, #0]
 800b7e2:	9f03      	ldr	r7, [sp, #12]
 800b7e4:	4b98      	ldr	r3, [pc, #608]	@ (800ba48 <_dtoa_r+0x2d0>)
 800b7e6:	bfbc      	itt	lt
 800b7e8:	2201      	movlt	r2, #1
 800b7ea:	6032      	strlt	r2, [r6, #0]
 800b7ec:	43bb      	bics	r3, r7
 800b7ee:	d112      	bne.n	800b816 <_dtoa_r+0x9e>
 800b7f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b7f6:	6013      	str	r3, [r2, #0]
 800b7f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7fc:	4323      	orrs	r3, r4
 800b7fe:	f000 854d 	beq.w	800c29c <_dtoa_r+0xb24>
 800b802:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b804:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ba5c <_dtoa_r+0x2e4>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 854f 	beq.w	800c2ac <_dtoa_r+0xb34>
 800b80e:	f10a 0303 	add.w	r3, sl, #3
 800b812:	f000 bd49 	b.w	800c2a8 <_dtoa_r+0xb30>
 800b816:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b81a:	2200      	movs	r2, #0
 800b81c:	ec51 0b17 	vmov	r0, r1, d7
 800b820:	2300      	movs	r3, #0
 800b822:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b826:	f7f5 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800b82a:	4680      	mov	r8, r0
 800b82c:	b158      	cbz	r0, 800b846 <_dtoa_r+0xce>
 800b82e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b830:	2301      	movs	r3, #1
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b836:	b113      	cbz	r3, 800b83e <_dtoa_r+0xc6>
 800b838:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b83a:	4b84      	ldr	r3, [pc, #528]	@ (800ba4c <_dtoa_r+0x2d4>)
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ba60 <_dtoa_r+0x2e8>
 800b842:	f000 bd33 	b.w	800c2ac <_dtoa_r+0xb34>
 800b846:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b84a:	aa16      	add	r2, sp, #88	@ 0x58
 800b84c:	a917      	add	r1, sp, #92	@ 0x5c
 800b84e:	4658      	mov	r0, fp
 800b850:	f001 fa3a 	bl	800ccc8 <__d2b>
 800b854:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b858:	4681      	mov	r9, r0
 800b85a:	2e00      	cmp	r6, #0
 800b85c:	d077      	beq.n	800b94e <_dtoa_r+0x1d6>
 800b85e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b860:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b86c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b870:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b874:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b878:	4619      	mov	r1, r3
 800b87a:	2200      	movs	r2, #0
 800b87c:	4b74      	ldr	r3, [pc, #464]	@ (800ba50 <_dtoa_r+0x2d8>)
 800b87e:	f7f4 fd0b 	bl	8000298 <__aeabi_dsub>
 800b882:	a369      	add	r3, pc, #420	@ (adr r3, 800ba28 <_dtoa_r+0x2b0>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 febe 	bl	8000608 <__aeabi_dmul>
 800b88c:	a368      	add	r3, pc, #416	@ (adr r3, 800ba30 <_dtoa_r+0x2b8>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f7f4 fd03 	bl	800029c <__adddf3>
 800b896:	4604      	mov	r4, r0
 800b898:	4630      	mov	r0, r6
 800b89a:	460d      	mov	r5, r1
 800b89c:	f7f4 fe4a 	bl	8000534 <__aeabi_i2d>
 800b8a0:	a365      	add	r3, pc, #404	@ (adr r3, 800ba38 <_dtoa_r+0x2c0>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f7f4 feaf 	bl	8000608 <__aeabi_dmul>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fcf3 	bl	800029c <__adddf3>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	f7f5 f955 	bl	8000b68 <__aeabi_d2iz>
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f5 f910 	bl	8000aec <__aeabi_dcmplt>
 800b8cc:	b140      	cbz	r0, 800b8e0 <_dtoa_r+0x168>
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f7f4 fe30 	bl	8000534 <__aeabi_i2d>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	462b      	mov	r3, r5
 800b8d8:	f7f5 f8fe 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8dc:	b900      	cbnz	r0, 800b8e0 <_dtoa_r+0x168>
 800b8de:	3f01      	subs	r7, #1
 800b8e0:	2f16      	cmp	r7, #22
 800b8e2:	d851      	bhi.n	800b988 <_dtoa_r+0x210>
 800b8e4:	4b5b      	ldr	r3, [pc, #364]	@ (800ba54 <_dtoa_r+0x2dc>)
 800b8e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8f2:	f7f5 f8fb 	bl	8000aec <__aeabi_dcmplt>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d048      	beq.n	800b98c <_dtoa_r+0x214>
 800b8fa:	3f01      	subs	r7, #1
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800b900:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b902:	1b9b      	subs	r3, r3, r6
 800b904:	1e5a      	subs	r2, r3, #1
 800b906:	bf44      	itt	mi
 800b908:	f1c3 0801 	rsbmi	r8, r3, #1
 800b90c:	2300      	movmi	r3, #0
 800b90e:	9208      	str	r2, [sp, #32]
 800b910:	bf54      	ite	pl
 800b912:	f04f 0800 	movpl.w	r8, #0
 800b916:	9308      	strmi	r3, [sp, #32]
 800b918:	2f00      	cmp	r7, #0
 800b91a:	db39      	blt.n	800b990 <_dtoa_r+0x218>
 800b91c:	9b08      	ldr	r3, [sp, #32]
 800b91e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b920:	443b      	add	r3, r7
 800b922:	9308      	str	r3, [sp, #32]
 800b924:	2300      	movs	r3, #0
 800b926:	930a      	str	r3, [sp, #40]	@ 0x28
 800b928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b92a:	2b09      	cmp	r3, #9
 800b92c:	d864      	bhi.n	800b9f8 <_dtoa_r+0x280>
 800b92e:	2b05      	cmp	r3, #5
 800b930:	bfc4      	itt	gt
 800b932:	3b04      	subgt	r3, #4
 800b934:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b938:	f1a3 0302 	sub.w	r3, r3, #2
 800b93c:	bfcc      	ite	gt
 800b93e:	2400      	movgt	r4, #0
 800b940:	2401      	movle	r4, #1
 800b942:	2b03      	cmp	r3, #3
 800b944:	d863      	bhi.n	800ba0e <_dtoa_r+0x296>
 800b946:	e8df f003 	tbb	[pc, r3]
 800b94a:	372a      	.short	0x372a
 800b94c:	5535      	.short	0x5535
 800b94e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b952:	441e      	add	r6, r3
 800b954:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b958:	2b20      	cmp	r3, #32
 800b95a:	bfc1      	itttt	gt
 800b95c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b960:	409f      	lslgt	r7, r3
 800b962:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b966:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b96a:	bfd6      	itet	le
 800b96c:	f1c3 0320 	rsble	r3, r3, #32
 800b970:	ea47 0003 	orrgt.w	r0, r7, r3
 800b974:	fa04 f003 	lslle.w	r0, r4, r3
 800b978:	f7f4 fdcc 	bl	8000514 <__aeabi_ui2d>
 800b97c:	2201      	movs	r2, #1
 800b97e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b982:	3e01      	subs	r6, #1
 800b984:	9214      	str	r2, [sp, #80]	@ 0x50
 800b986:	e777      	b.n	800b878 <_dtoa_r+0x100>
 800b988:	2301      	movs	r3, #1
 800b98a:	e7b8      	b.n	800b8fe <_dtoa_r+0x186>
 800b98c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b98e:	e7b7      	b.n	800b900 <_dtoa_r+0x188>
 800b990:	427b      	negs	r3, r7
 800b992:	930a      	str	r3, [sp, #40]	@ 0x28
 800b994:	2300      	movs	r3, #0
 800b996:	eba8 0807 	sub.w	r8, r8, r7
 800b99a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b99c:	e7c4      	b.n	800b928 <_dtoa_r+0x1b0>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	dc35      	bgt.n	800ba14 <_dtoa_r+0x29c>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	9307      	str	r3, [sp, #28]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9b2:	e00b      	b.n	800b9cc <_dtoa_r+0x254>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e7f3      	b.n	800b9a0 <_dtoa_r+0x228>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9be:	18fb      	adds	r3, r7, r3
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	bfb8      	it	lt
 800b9ca:	2301      	movlt	r3, #1
 800b9cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	2204      	movs	r2, #4
 800b9d4:	f102 0514 	add.w	r5, r2, #20
 800b9d8:	429d      	cmp	r5, r3
 800b9da:	d91f      	bls.n	800ba1c <_dtoa_r+0x2a4>
 800b9dc:	6041      	str	r1, [r0, #4]
 800b9de:	4658      	mov	r0, fp
 800b9e0:	f000 fd8e 	bl	800c500 <_Balloc>
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d13c      	bne.n	800ba64 <_dtoa_r+0x2ec>
 800b9ea:	4b1b      	ldr	r3, [pc, #108]	@ (800ba58 <_dtoa_r+0x2e0>)
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800b9f2:	e6d8      	b.n	800b7a6 <_dtoa_r+0x2e>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e7e0      	b.n	800b9ba <_dtoa_r+0x242>
 800b9f8:	2401      	movs	r4, #1
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba00:	f04f 33ff 	mov.w	r3, #4294967295
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	9307      	str	r3, [sp, #28]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2312      	movs	r3, #18
 800ba0c:	e7d0      	b.n	800b9b0 <_dtoa_r+0x238>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba12:	e7f5      	b.n	800ba00 <_dtoa_r+0x288>
 800ba14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	e7d7      	b.n	800b9cc <_dtoa_r+0x254>
 800ba1c:	3101      	adds	r1, #1
 800ba1e:	0052      	lsls	r2, r2, #1
 800ba20:	e7d8      	b.n	800b9d4 <_dtoa_r+0x25c>
 800ba22:	bf00      	nop
 800ba24:	f3af 8000 	nop.w
 800ba28:	636f4361 	.word	0x636f4361
 800ba2c:	3fd287a7 	.word	0x3fd287a7
 800ba30:	8b60c8b3 	.word	0x8b60c8b3
 800ba34:	3fc68a28 	.word	0x3fc68a28
 800ba38:	509f79fb 	.word	0x509f79fb
 800ba3c:	3fd34413 	.word	0x3fd34413
 800ba40:	0800fedc 	.word	0x0800fedc
 800ba44:	0800ff96 	.word	0x0800ff96
 800ba48:	7ff00000 	.word	0x7ff00000
 800ba4c:	080101d8 	.word	0x080101d8
 800ba50:	3ff80000 	.word	0x3ff80000
 800ba54:	08010090 	.word	0x08010090
 800ba58:	0800ffee 	.word	0x0800ffee
 800ba5c:	0800ff92 	.word	0x0800ff92
 800ba60:	080101d7 	.word	0x080101d7
 800ba64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba68:	6018      	str	r0, [r3, #0]
 800ba6a:	9b07      	ldr	r3, [sp, #28]
 800ba6c:	2b0e      	cmp	r3, #14
 800ba6e:	f200 80a4 	bhi.w	800bbba <_dtoa_r+0x442>
 800ba72:	2c00      	cmp	r4, #0
 800ba74:	f000 80a1 	beq.w	800bbba <_dtoa_r+0x442>
 800ba78:	2f00      	cmp	r7, #0
 800ba7a:	dd33      	ble.n	800bae4 <_dtoa_r+0x36c>
 800ba7c:	4bad      	ldr	r3, [pc, #692]	@ (800bd34 <_dtoa_r+0x5bc>)
 800ba7e:	f007 020f 	and.w	r2, r7, #15
 800ba82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba86:	ed93 7b00 	vldr	d7, [r3]
 800ba8a:	05f8      	lsls	r0, r7, #23
 800ba8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba90:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba94:	d516      	bpl.n	800bac4 <_dtoa_r+0x34c>
 800ba96:	4ba8      	ldr	r3, [pc, #672]	@ (800bd38 <_dtoa_r+0x5c0>)
 800ba98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800baa0:	f7f4 fedc 	bl	800085c <__aeabi_ddiv>
 800baa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa8:	f004 040f 	and.w	r4, r4, #15
 800baac:	2603      	movs	r6, #3
 800baae:	4da2      	ldr	r5, [pc, #648]	@ (800bd38 <_dtoa_r+0x5c0>)
 800bab0:	b954      	cbnz	r4, 800bac8 <_dtoa_r+0x350>
 800bab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baba:	f7f4 fecf 	bl	800085c <__aeabi_ddiv>
 800babe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bac2:	e028      	b.n	800bb16 <_dtoa_r+0x39e>
 800bac4:	2602      	movs	r6, #2
 800bac6:	e7f2      	b.n	800baae <_dtoa_r+0x336>
 800bac8:	07e1      	lsls	r1, r4, #31
 800baca:	d508      	bpl.n	800bade <_dtoa_r+0x366>
 800bacc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bad4:	f7f4 fd98 	bl	8000608 <__aeabi_dmul>
 800bad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800badc:	3601      	adds	r6, #1
 800bade:	1064      	asrs	r4, r4, #1
 800bae0:	3508      	adds	r5, #8
 800bae2:	e7e5      	b.n	800bab0 <_dtoa_r+0x338>
 800bae4:	f000 80d2 	beq.w	800bc8c <_dtoa_r+0x514>
 800bae8:	427c      	negs	r4, r7
 800baea:	4b92      	ldr	r3, [pc, #584]	@ (800bd34 <_dtoa_r+0x5bc>)
 800baec:	4d92      	ldr	r5, [pc, #584]	@ (800bd38 <_dtoa_r+0x5c0>)
 800baee:	f004 020f 	and.w	r2, r4, #15
 800baf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bafe:	f7f4 fd83 	bl	8000608 <__aeabi_dmul>
 800bb02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb06:	1124      	asrs	r4, r4, #4
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2602      	movs	r6, #2
 800bb0c:	2c00      	cmp	r4, #0
 800bb0e:	f040 80b2 	bne.w	800bc76 <_dtoa_r+0x4fe>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1d3      	bne.n	800babe <_dtoa_r+0x346>
 800bb16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 80b7 	beq.w	800bc90 <_dtoa_r+0x518>
 800bb22:	4b86      	ldr	r3, [pc, #536]	@ (800bd3c <_dtoa_r+0x5c4>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	4620      	mov	r0, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f7f4 ffdf 	bl	8000aec <__aeabi_dcmplt>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f000 80ae 	beq.w	800bc90 <_dtoa_r+0x518>
 800bb34:	9b07      	ldr	r3, [sp, #28]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 80aa 	beq.w	800bc90 <_dtoa_r+0x518>
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dd37      	ble.n	800bbb2 <_dtoa_r+0x43a>
 800bb42:	1e7b      	subs	r3, r7, #1
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	4620      	mov	r0, r4
 800bb48:	4b7d      	ldr	r3, [pc, #500]	@ (800bd40 <_dtoa_r+0x5c8>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	f7f4 fd5b 	bl	8000608 <__aeabi_dmul>
 800bb52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb56:	9c00      	ldr	r4, [sp, #0]
 800bb58:	3601      	adds	r6, #1
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7f4 fcea 	bl	8000534 <__aeabi_i2d>
 800bb60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb64:	f7f4 fd50 	bl	8000608 <__aeabi_dmul>
 800bb68:	4b76      	ldr	r3, [pc, #472]	@ (800bd44 <_dtoa_r+0x5cc>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f7f4 fb96 	bl	800029c <__adddf3>
 800bb70:	4605      	mov	r5, r0
 800bb72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb76:	2c00      	cmp	r4, #0
 800bb78:	f040 808d 	bne.w	800bc96 <_dtoa_r+0x51e>
 800bb7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb80:	4b71      	ldr	r3, [pc, #452]	@ (800bd48 <_dtoa_r+0x5d0>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	f7f4 fb88 	bl	8000298 <__aeabi_dsub>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb90:	462a      	mov	r2, r5
 800bb92:	4633      	mov	r3, r6
 800bb94:	f7f4 ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	f040 828b 	bne.w	800c0b4 <_dtoa_r+0x93c>
 800bb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba2:	462a      	mov	r2, r5
 800bba4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bba8:	f7f4 ffa0 	bl	8000aec <__aeabi_dcmplt>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f040 8128 	bne.w	800be02 <_dtoa_r+0x68a>
 800bbb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bbb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bbba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f2c0 815a 	blt.w	800be76 <_dtoa_r+0x6fe>
 800bbc2:	2f0e      	cmp	r7, #14
 800bbc4:	f300 8157 	bgt.w	800be76 <_dtoa_r+0x6fe>
 800bbc8:	4b5a      	ldr	r3, [pc, #360]	@ (800bd34 <_dtoa_r+0x5bc>)
 800bbca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbce:	ed93 7b00 	vldr	d7, [r3]
 800bbd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	ed8d 7b00 	vstr	d7, [sp]
 800bbda:	da03      	bge.n	800bbe4 <_dtoa_r+0x46c>
 800bbdc:	9b07      	ldr	r3, [sp, #28]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f340 8101 	ble.w	800bde6 <_dtoa_r+0x66e>
 800bbe4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbe8:	4656      	mov	r6, sl
 800bbea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	f7f4 fe33 	bl	800085c <__aeabi_ddiv>
 800bbf6:	f7f4 ffb7 	bl	8000b68 <__aeabi_d2iz>
 800bbfa:	4680      	mov	r8, r0
 800bbfc:	f7f4 fc9a 	bl	8000534 <__aeabi_i2d>
 800bc00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc04:	f7f4 fd00 	bl	8000608 <__aeabi_dmul>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc14:	f7f4 fb40 	bl	8000298 <__aeabi_dsub>
 800bc18:	f806 4b01 	strb.w	r4, [r6], #1
 800bc1c:	9d07      	ldr	r5, [sp, #28]
 800bc1e:	eba6 040a 	sub.w	r4, r6, sl
 800bc22:	42a5      	cmp	r5, r4
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	f040 8117 	bne.w	800be5a <_dtoa_r+0x6e2>
 800bc2c:	f7f4 fb36 	bl	800029c <__adddf3>
 800bc30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc34:	4604      	mov	r4, r0
 800bc36:	460d      	mov	r5, r1
 800bc38:	f7f4 ff76 	bl	8000b28 <__aeabi_dcmpgt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	f040 80f9 	bne.w	800be34 <_dtoa_r+0x6bc>
 800bc42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc46:	4620      	mov	r0, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	f7f4 ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc4e:	b118      	cbz	r0, 800bc58 <_dtoa_r+0x4e0>
 800bc50:	f018 0f01 	tst.w	r8, #1
 800bc54:	f040 80ee 	bne.w	800be34 <_dtoa_r+0x6bc>
 800bc58:	4649      	mov	r1, r9
 800bc5a:	4658      	mov	r0, fp
 800bc5c:	f000 fc90 	bl	800c580 <_Bfree>
 800bc60:	2300      	movs	r3, #0
 800bc62:	7033      	strb	r3, [r6, #0]
 800bc64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc66:	3701      	adds	r7, #1
 800bc68:	601f      	str	r7, [r3, #0]
 800bc6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 831d 	beq.w	800c2ac <_dtoa_r+0xb34>
 800bc72:	601e      	str	r6, [r3, #0]
 800bc74:	e31a      	b.n	800c2ac <_dtoa_r+0xb34>
 800bc76:	07e2      	lsls	r2, r4, #31
 800bc78:	d505      	bpl.n	800bc86 <_dtoa_r+0x50e>
 800bc7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc7e:	f7f4 fcc3 	bl	8000608 <__aeabi_dmul>
 800bc82:	3601      	adds	r6, #1
 800bc84:	2301      	movs	r3, #1
 800bc86:	1064      	asrs	r4, r4, #1
 800bc88:	3508      	adds	r5, #8
 800bc8a:	e73f      	b.n	800bb0c <_dtoa_r+0x394>
 800bc8c:	2602      	movs	r6, #2
 800bc8e:	e742      	b.n	800bb16 <_dtoa_r+0x39e>
 800bc90:	9c07      	ldr	r4, [sp, #28]
 800bc92:	9704      	str	r7, [sp, #16]
 800bc94:	e761      	b.n	800bb5a <_dtoa_r+0x3e2>
 800bc96:	4b27      	ldr	r3, [pc, #156]	@ (800bd34 <_dtoa_r+0x5bc>)
 800bc98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bca2:	4454      	add	r4, sl
 800bca4:	2900      	cmp	r1, #0
 800bca6:	d053      	beq.n	800bd50 <_dtoa_r+0x5d8>
 800bca8:	4928      	ldr	r1, [pc, #160]	@ (800bd4c <_dtoa_r+0x5d4>)
 800bcaa:	2000      	movs	r0, #0
 800bcac:	f7f4 fdd6 	bl	800085c <__aeabi_ddiv>
 800bcb0:	4633      	mov	r3, r6
 800bcb2:	462a      	mov	r2, r5
 800bcb4:	f7f4 faf0 	bl	8000298 <__aeabi_dsub>
 800bcb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcbc:	4656      	mov	r6, sl
 800bcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc2:	f7f4 ff51 	bl	8000b68 <__aeabi_d2iz>
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	f7f4 fc34 	bl	8000534 <__aeabi_i2d>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcd4:	f7f4 fae0 	bl	8000298 <__aeabi_dsub>
 800bcd8:	3530      	adds	r5, #48	@ 0x30
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bce2:	f806 5b01 	strb.w	r5, [r6], #1
 800bce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcea:	f7f4 feff 	bl	8000aec <__aeabi_dcmplt>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d171      	bne.n	800bdd6 <_dtoa_r+0x65e>
 800bcf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcf6:	4911      	ldr	r1, [pc, #68]	@ (800bd3c <_dtoa_r+0x5c4>)
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	f7f4 facd 	bl	8000298 <__aeabi_dsub>
 800bcfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd02:	f7f4 fef3 	bl	8000aec <__aeabi_dcmplt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f040 8095 	bne.w	800be36 <_dtoa_r+0x6be>
 800bd0c:	42a6      	cmp	r6, r4
 800bd0e:	f43f af50 	beq.w	800bbb2 <_dtoa_r+0x43a>
 800bd12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd16:	4b0a      	ldr	r3, [pc, #40]	@ (800bd40 <_dtoa_r+0x5c8>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f7f4 fc75 	bl	8000608 <__aeabi_dmul>
 800bd1e:	4b08      	ldr	r3, [pc, #32]	@ (800bd40 <_dtoa_r+0x5c8>)
 800bd20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd24:	2200      	movs	r2, #0
 800bd26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd2a:	f7f4 fc6d 	bl	8000608 <__aeabi_dmul>
 800bd2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd32:	e7c4      	b.n	800bcbe <_dtoa_r+0x546>
 800bd34:	08010090 	.word	0x08010090
 800bd38:	08010068 	.word	0x08010068
 800bd3c:	3ff00000 	.word	0x3ff00000
 800bd40:	40240000 	.word	0x40240000
 800bd44:	401c0000 	.word	0x401c0000
 800bd48:	40140000 	.word	0x40140000
 800bd4c:	3fe00000 	.word	0x3fe00000
 800bd50:	4631      	mov	r1, r6
 800bd52:	4628      	mov	r0, r5
 800bd54:	f7f4 fc58 	bl	8000608 <__aeabi_dmul>
 800bd58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd5c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bd5e:	4656      	mov	r6, sl
 800bd60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd64:	f7f4 ff00 	bl	8000b68 <__aeabi_d2iz>
 800bd68:	4605      	mov	r5, r0
 800bd6a:	f7f4 fbe3 	bl	8000534 <__aeabi_i2d>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd76:	f7f4 fa8f 	bl	8000298 <__aeabi_dsub>
 800bd7a:	3530      	adds	r5, #48	@ 0x30
 800bd7c:	f806 5b01 	strb.w	r5, [r6], #1
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	42a6      	cmp	r6, r4
 800bd86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd8a:	f04f 0200 	mov.w	r2, #0
 800bd8e:	d124      	bne.n	800bdda <_dtoa_r+0x662>
 800bd90:	4bac      	ldr	r3, [pc, #688]	@ (800c044 <_dtoa_r+0x8cc>)
 800bd92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd96:	f7f4 fa81 	bl	800029c <__adddf3>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda2:	f7f4 fec1 	bl	8000b28 <__aeabi_dcmpgt>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d145      	bne.n	800be36 <_dtoa_r+0x6be>
 800bdaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdae:	49a5      	ldr	r1, [pc, #660]	@ (800c044 <_dtoa_r+0x8cc>)
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	f7f4 fa71 	bl	8000298 <__aeabi_dsub>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdbe:	f7f4 fe95 	bl	8000aec <__aeabi_dcmplt>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	f43f aef5 	beq.w	800bbb2 <_dtoa_r+0x43a>
 800bdc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bdca:	1e73      	subs	r3, r6, #1
 800bdcc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdd2:	2b30      	cmp	r3, #48	@ 0x30
 800bdd4:	d0f8      	beq.n	800bdc8 <_dtoa_r+0x650>
 800bdd6:	9f04      	ldr	r7, [sp, #16]
 800bdd8:	e73e      	b.n	800bc58 <_dtoa_r+0x4e0>
 800bdda:	4b9b      	ldr	r3, [pc, #620]	@ (800c048 <_dtoa_r+0x8d0>)
 800bddc:	f7f4 fc14 	bl	8000608 <__aeabi_dmul>
 800bde0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bde4:	e7bc      	b.n	800bd60 <_dtoa_r+0x5e8>
 800bde6:	d10c      	bne.n	800be02 <_dtoa_r+0x68a>
 800bde8:	4b98      	ldr	r3, [pc, #608]	@ (800c04c <_dtoa_r+0x8d4>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdf0:	f7f4 fc0a 	bl	8000608 <__aeabi_dmul>
 800bdf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdf8:	f7f4 fe8c 	bl	8000b14 <__aeabi_dcmpge>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f000 8157 	beq.w	800c0b0 <_dtoa_r+0x938>
 800be02:	2400      	movs	r4, #0
 800be04:	4625      	mov	r5, r4
 800be06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be08:	43db      	mvns	r3, r3
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	4656      	mov	r6, sl
 800be0e:	2700      	movs	r7, #0
 800be10:	4621      	mov	r1, r4
 800be12:	4658      	mov	r0, fp
 800be14:	f000 fbb4 	bl	800c580 <_Bfree>
 800be18:	2d00      	cmp	r5, #0
 800be1a:	d0dc      	beq.n	800bdd6 <_dtoa_r+0x65e>
 800be1c:	b12f      	cbz	r7, 800be2a <_dtoa_r+0x6b2>
 800be1e:	42af      	cmp	r7, r5
 800be20:	d003      	beq.n	800be2a <_dtoa_r+0x6b2>
 800be22:	4639      	mov	r1, r7
 800be24:	4658      	mov	r0, fp
 800be26:	f000 fbab 	bl	800c580 <_Bfree>
 800be2a:	4629      	mov	r1, r5
 800be2c:	4658      	mov	r0, fp
 800be2e:	f000 fba7 	bl	800c580 <_Bfree>
 800be32:	e7d0      	b.n	800bdd6 <_dtoa_r+0x65e>
 800be34:	9704      	str	r7, [sp, #16]
 800be36:	4633      	mov	r3, r6
 800be38:	461e      	mov	r6, r3
 800be3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be3e:	2a39      	cmp	r2, #57	@ 0x39
 800be40:	d107      	bne.n	800be52 <_dtoa_r+0x6da>
 800be42:	459a      	cmp	sl, r3
 800be44:	d1f8      	bne.n	800be38 <_dtoa_r+0x6c0>
 800be46:	9a04      	ldr	r2, [sp, #16]
 800be48:	3201      	adds	r2, #1
 800be4a:	9204      	str	r2, [sp, #16]
 800be4c:	2230      	movs	r2, #48	@ 0x30
 800be4e:	f88a 2000 	strb.w	r2, [sl]
 800be52:	781a      	ldrb	r2, [r3, #0]
 800be54:	3201      	adds	r2, #1
 800be56:	701a      	strb	r2, [r3, #0]
 800be58:	e7bd      	b.n	800bdd6 <_dtoa_r+0x65e>
 800be5a:	4b7b      	ldr	r3, [pc, #492]	@ (800c048 <_dtoa_r+0x8d0>)
 800be5c:	2200      	movs	r2, #0
 800be5e:	f7f4 fbd3 	bl	8000608 <__aeabi_dmul>
 800be62:	2200      	movs	r2, #0
 800be64:	2300      	movs	r3, #0
 800be66:	4604      	mov	r4, r0
 800be68:	460d      	mov	r5, r1
 800be6a:	f7f4 fe35 	bl	8000ad8 <__aeabi_dcmpeq>
 800be6e:	2800      	cmp	r0, #0
 800be70:	f43f aebb 	beq.w	800bbea <_dtoa_r+0x472>
 800be74:	e6f0      	b.n	800bc58 <_dtoa_r+0x4e0>
 800be76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be78:	2a00      	cmp	r2, #0
 800be7a:	f000 80db 	beq.w	800c034 <_dtoa_r+0x8bc>
 800be7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be80:	2a01      	cmp	r2, #1
 800be82:	f300 80bf 	bgt.w	800c004 <_dtoa_r+0x88c>
 800be86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800be88:	2a00      	cmp	r2, #0
 800be8a:	f000 80b7 	beq.w	800bffc <_dtoa_r+0x884>
 800be8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be94:	4646      	mov	r6, r8
 800be96:	9a08      	ldr	r2, [sp, #32]
 800be98:	2101      	movs	r1, #1
 800be9a:	441a      	add	r2, r3
 800be9c:	4658      	mov	r0, fp
 800be9e:	4498      	add	r8, r3
 800bea0:	9208      	str	r2, [sp, #32]
 800bea2:	f000 fc6b 	bl	800c77c <__i2b>
 800bea6:	4605      	mov	r5, r0
 800bea8:	b15e      	cbz	r6, 800bec2 <_dtoa_r+0x74a>
 800beaa:	9b08      	ldr	r3, [sp, #32]
 800beac:	2b00      	cmp	r3, #0
 800beae:	dd08      	ble.n	800bec2 <_dtoa_r+0x74a>
 800beb0:	42b3      	cmp	r3, r6
 800beb2:	9a08      	ldr	r2, [sp, #32]
 800beb4:	bfa8      	it	ge
 800beb6:	4633      	movge	r3, r6
 800beb8:	eba8 0803 	sub.w	r8, r8, r3
 800bebc:	1af6      	subs	r6, r6, r3
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	9308      	str	r3, [sp, #32]
 800bec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bec4:	b1f3      	cbz	r3, 800bf04 <_dtoa_r+0x78c>
 800bec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 80b7 	beq.w	800c03c <_dtoa_r+0x8c4>
 800bece:	b18c      	cbz	r4, 800bef4 <_dtoa_r+0x77c>
 800bed0:	4629      	mov	r1, r5
 800bed2:	4622      	mov	r2, r4
 800bed4:	4658      	mov	r0, fp
 800bed6:	f000 fd11 	bl	800c8fc <__pow5mult>
 800beda:	464a      	mov	r2, r9
 800bedc:	4601      	mov	r1, r0
 800bede:	4605      	mov	r5, r0
 800bee0:	4658      	mov	r0, fp
 800bee2:	f000 fc61 	bl	800c7a8 <__multiply>
 800bee6:	4649      	mov	r1, r9
 800bee8:	9004      	str	r0, [sp, #16]
 800beea:	4658      	mov	r0, fp
 800beec:	f000 fb48 	bl	800c580 <_Bfree>
 800bef0:	9b04      	ldr	r3, [sp, #16]
 800bef2:	4699      	mov	r9, r3
 800bef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bef6:	1b1a      	subs	r2, r3, r4
 800bef8:	d004      	beq.n	800bf04 <_dtoa_r+0x78c>
 800befa:	4649      	mov	r1, r9
 800befc:	4658      	mov	r0, fp
 800befe:	f000 fcfd 	bl	800c8fc <__pow5mult>
 800bf02:	4681      	mov	r9, r0
 800bf04:	2101      	movs	r1, #1
 800bf06:	4658      	mov	r0, fp
 800bf08:	f000 fc38 	bl	800c77c <__i2b>
 800bf0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf0e:	4604      	mov	r4, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f000 81cf 	beq.w	800c2b4 <_dtoa_r+0xb3c>
 800bf16:	461a      	mov	r2, r3
 800bf18:	4601      	mov	r1, r0
 800bf1a:	4658      	mov	r0, fp
 800bf1c:	f000 fcee 	bl	800c8fc <__pow5mult>
 800bf20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	4604      	mov	r4, r0
 800bf26:	f300 8095 	bgt.w	800c054 <_dtoa_r+0x8dc>
 800bf2a:	9b02      	ldr	r3, [sp, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f040 8087 	bne.w	800c040 <_dtoa_r+0x8c8>
 800bf32:	9b03      	ldr	r3, [sp, #12]
 800bf34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f040 8089 	bne.w	800c050 <_dtoa_r+0x8d8>
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf44:	0d1b      	lsrs	r3, r3, #20
 800bf46:	051b      	lsls	r3, r3, #20
 800bf48:	b12b      	cbz	r3, 800bf56 <_dtoa_r+0x7de>
 800bf4a:	9b08      	ldr	r3, [sp, #32]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	9308      	str	r3, [sp, #32]
 800bf50:	f108 0801 	add.w	r8, r8, #1
 800bf54:	2301      	movs	r3, #1
 800bf56:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 81b0 	beq.w	800c2c0 <_dtoa_r+0xb48>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf66:	6918      	ldr	r0, [r3, #16]
 800bf68:	f000 fbbc 	bl	800c6e4 <__hi0bits>
 800bf6c:	f1c0 0020 	rsb	r0, r0, #32
 800bf70:	9b08      	ldr	r3, [sp, #32]
 800bf72:	4418      	add	r0, r3
 800bf74:	f010 001f 	ands.w	r0, r0, #31
 800bf78:	d077      	beq.n	800c06a <_dtoa_r+0x8f2>
 800bf7a:	f1c0 0320 	rsb	r3, r0, #32
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	dd6b      	ble.n	800c05a <_dtoa_r+0x8e2>
 800bf82:	9b08      	ldr	r3, [sp, #32]
 800bf84:	f1c0 001c 	rsb	r0, r0, #28
 800bf88:	4403      	add	r3, r0
 800bf8a:	4480      	add	r8, r0
 800bf8c:	4406      	add	r6, r0
 800bf8e:	9308      	str	r3, [sp, #32]
 800bf90:	f1b8 0f00 	cmp.w	r8, #0
 800bf94:	dd05      	ble.n	800bfa2 <_dtoa_r+0x82a>
 800bf96:	4649      	mov	r1, r9
 800bf98:	4642      	mov	r2, r8
 800bf9a:	4658      	mov	r0, fp
 800bf9c:	f000 fd08 	bl	800c9b0 <__lshift>
 800bfa0:	4681      	mov	r9, r0
 800bfa2:	9b08      	ldr	r3, [sp, #32]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dd05      	ble.n	800bfb4 <_dtoa_r+0x83c>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	461a      	mov	r2, r3
 800bfac:	4658      	mov	r0, fp
 800bfae:	f000 fcff 	bl	800c9b0 <__lshift>
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d059      	beq.n	800c06e <_dtoa_r+0x8f6>
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4648      	mov	r0, r9
 800bfbe:	f000 fd63 	bl	800ca88 <__mcmp>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	da53      	bge.n	800c06e <_dtoa_r+0x8f6>
 800bfc6:	1e7b      	subs	r3, r7, #1
 800bfc8:	9304      	str	r3, [sp, #16]
 800bfca:	4649      	mov	r1, r9
 800bfcc:	2300      	movs	r3, #0
 800bfce:	220a      	movs	r2, #10
 800bfd0:	4658      	mov	r0, fp
 800bfd2:	f000 faf7 	bl	800c5c4 <__multadd>
 800bfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfd8:	4681      	mov	r9, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 8172 	beq.w	800c2c4 <_dtoa_r+0xb4c>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	220a      	movs	r2, #10
 800bfe6:	4658      	mov	r0, fp
 800bfe8:	f000 faec 	bl	800c5c4 <__multadd>
 800bfec:	9b00      	ldr	r3, [sp, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	4605      	mov	r5, r0
 800bff2:	dc67      	bgt.n	800c0c4 <_dtoa_r+0x94c>
 800bff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	dc41      	bgt.n	800c07e <_dtoa_r+0x906>
 800bffa:	e063      	b.n	800c0c4 <_dtoa_r+0x94c>
 800bffc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bffe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c002:	e746      	b.n	800be92 <_dtoa_r+0x71a>
 800c004:	9b07      	ldr	r3, [sp, #28]
 800c006:	1e5c      	subs	r4, r3, #1
 800c008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c00a:	42a3      	cmp	r3, r4
 800c00c:	bfbf      	itttt	lt
 800c00e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c010:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c012:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c014:	1ae3      	sublt	r3, r4, r3
 800c016:	bfb4      	ite	lt
 800c018:	18d2      	addlt	r2, r2, r3
 800c01a:	1b1c      	subge	r4, r3, r4
 800c01c:	9b07      	ldr	r3, [sp, #28]
 800c01e:	bfbc      	itt	lt
 800c020:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c022:	2400      	movlt	r4, #0
 800c024:	2b00      	cmp	r3, #0
 800c026:	bfb5      	itete	lt
 800c028:	eba8 0603 	sublt.w	r6, r8, r3
 800c02c:	9b07      	ldrge	r3, [sp, #28]
 800c02e:	2300      	movlt	r3, #0
 800c030:	4646      	movge	r6, r8
 800c032:	e730      	b.n	800be96 <_dtoa_r+0x71e>
 800c034:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c036:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c038:	4646      	mov	r6, r8
 800c03a:	e735      	b.n	800bea8 <_dtoa_r+0x730>
 800c03c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c03e:	e75c      	b.n	800befa <_dtoa_r+0x782>
 800c040:	2300      	movs	r3, #0
 800c042:	e788      	b.n	800bf56 <_dtoa_r+0x7de>
 800c044:	3fe00000 	.word	0x3fe00000
 800c048:	40240000 	.word	0x40240000
 800c04c:	40140000 	.word	0x40140000
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	e780      	b.n	800bf56 <_dtoa_r+0x7de>
 800c054:	2300      	movs	r3, #0
 800c056:	930a      	str	r3, [sp, #40]	@ 0x28
 800c058:	e782      	b.n	800bf60 <_dtoa_r+0x7e8>
 800c05a:	d099      	beq.n	800bf90 <_dtoa_r+0x818>
 800c05c:	9a08      	ldr	r2, [sp, #32]
 800c05e:	331c      	adds	r3, #28
 800c060:	441a      	add	r2, r3
 800c062:	4498      	add	r8, r3
 800c064:	441e      	add	r6, r3
 800c066:	9208      	str	r2, [sp, #32]
 800c068:	e792      	b.n	800bf90 <_dtoa_r+0x818>
 800c06a:	4603      	mov	r3, r0
 800c06c:	e7f6      	b.n	800c05c <_dtoa_r+0x8e4>
 800c06e:	9b07      	ldr	r3, [sp, #28]
 800c070:	9704      	str	r7, [sp, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	dc20      	bgt.n	800c0b8 <_dtoa_r+0x940>
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	dd1e      	ble.n	800c0bc <_dtoa_r+0x944>
 800c07e:	9b00      	ldr	r3, [sp, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f47f aec0 	bne.w	800be06 <_dtoa_r+0x68e>
 800c086:	4621      	mov	r1, r4
 800c088:	2205      	movs	r2, #5
 800c08a:	4658      	mov	r0, fp
 800c08c:	f000 fa9a 	bl	800c5c4 <__multadd>
 800c090:	4601      	mov	r1, r0
 800c092:	4604      	mov	r4, r0
 800c094:	4648      	mov	r0, r9
 800c096:	f000 fcf7 	bl	800ca88 <__mcmp>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	f77f aeb3 	ble.w	800be06 <_dtoa_r+0x68e>
 800c0a0:	4656      	mov	r6, sl
 800c0a2:	2331      	movs	r3, #49	@ 0x31
 800c0a4:	f806 3b01 	strb.w	r3, [r6], #1
 800c0a8:	9b04      	ldr	r3, [sp, #16]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	9304      	str	r3, [sp, #16]
 800c0ae:	e6ae      	b.n	800be0e <_dtoa_r+0x696>
 800c0b0:	9c07      	ldr	r4, [sp, #28]
 800c0b2:	9704      	str	r7, [sp, #16]
 800c0b4:	4625      	mov	r5, r4
 800c0b6:	e7f3      	b.n	800c0a0 <_dtoa_r+0x928>
 800c0b8:	9b07      	ldr	r3, [sp, #28]
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 8104 	beq.w	800c2cc <_dtoa_r+0xb54>
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	dd05      	ble.n	800c0d4 <_dtoa_r+0x95c>
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	4632      	mov	r2, r6
 800c0cc:	4658      	mov	r0, fp
 800c0ce:	f000 fc6f 	bl	800c9b0 <__lshift>
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d05a      	beq.n	800c190 <_dtoa_r+0xa18>
 800c0da:	6869      	ldr	r1, [r5, #4]
 800c0dc:	4658      	mov	r0, fp
 800c0de:	f000 fa0f 	bl	800c500 <_Balloc>
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	b928      	cbnz	r0, 800c0f2 <_dtoa_r+0x97a>
 800c0e6:	4b84      	ldr	r3, [pc, #528]	@ (800c2f8 <_dtoa_r+0xb80>)
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c0ee:	f7ff bb5a 	b.w	800b7a6 <_dtoa_r+0x2e>
 800c0f2:	692a      	ldr	r2, [r5, #16]
 800c0f4:	3202      	adds	r2, #2
 800c0f6:	0092      	lsls	r2, r2, #2
 800c0f8:	f105 010c 	add.w	r1, r5, #12
 800c0fc:	300c      	adds	r0, #12
 800c0fe:	f002 fc5d 	bl	800e9bc <memcpy>
 800c102:	2201      	movs	r2, #1
 800c104:	4631      	mov	r1, r6
 800c106:	4658      	mov	r0, fp
 800c108:	f000 fc52 	bl	800c9b0 <__lshift>
 800c10c:	f10a 0301 	add.w	r3, sl, #1
 800c110:	9307      	str	r3, [sp, #28]
 800c112:	9b00      	ldr	r3, [sp, #0]
 800c114:	4453      	add	r3, sl
 800c116:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c118:	9b02      	ldr	r3, [sp, #8]
 800c11a:	f003 0301 	and.w	r3, r3, #1
 800c11e:	462f      	mov	r7, r5
 800c120:	930a      	str	r3, [sp, #40]	@ 0x28
 800c122:	4605      	mov	r5, r0
 800c124:	9b07      	ldr	r3, [sp, #28]
 800c126:	4621      	mov	r1, r4
 800c128:	3b01      	subs	r3, #1
 800c12a:	4648      	mov	r0, r9
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	f7ff fa9b 	bl	800b668 <quorem>
 800c132:	4639      	mov	r1, r7
 800c134:	9002      	str	r0, [sp, #8]
 800c136:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c13a:	4648      	mov	r0, r9
 800c13c:	f000 fca4 	bl	800ca88 <__mcmp>
 800c140:	462a      	mov	r2, r5
 800c142:	9008      	str	r0, [sp, #32]
 800c144:	4621      	mov	r1, r4
 800c146:	4658      	mov	r0, fp
 800c148:	f000 fcba 	bl	800cac0 <__mdiff>
 800c14c:	68c2      	ldr	r2, [r0, #12]
 800c14e:	4606      	mov	r6, r0
 800c150:	bb02      	cbnz	r2, 800c194 <_dtoa_r+0xa1c>
 800c152:	4601      	mov	r1, r0
 800c154:	4648      	mov	r0, r9
 800c156:	f000 fc97 	bl	800ca88 <__mcmp>
 800c15a:	4602      	mov	r2, r0
 800c15c:	4631      	mov	r1, r6
 800c15e:	4658      	mov	r0, fp
 800c160:	920e      	str	r2, [sp, #56]	@ 0x38
 800c162:	f000 fa0d 	bl	800c580 <_Bfree>
 800c166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c168:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c16a:	9e07      	ldr	r6, [sp, #28]
 800c16c:	ea43 0102 	orr.w	r1, r3, r2
 800c170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c172:	4319      	orrs	r1, r3
 800c174:	d110      	bne.n	800c198 <_dtoa_r+0xa20>
 800c176:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c17a:	d029      	beq.n	800c1d0 <_dtoa_r+0xa58>
 800c17c:	9b08      	ldr	r3, [sp, #32]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	dd02      	ble.n	800c188 <_dtoa_r+0xa10>
 800c182:	9b02      	ldr	r3, [sp, #8]
 800c184:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c188:	9b00      	ldr	r3, [sp, #0]
 800c18a:	f883 8000 	strb.w	r8, [r3]
 800c18e:	e63f      	b.n	800be10 <_dtoa_r+0x698>
 800c190:	4628      	mov	r0, r5
 800c192:	e7bb      	b.n	800c10c <_dtoa_r+0x994>
 800c194:	2201      	movs	r2, #1
 800c196:	e7e1      	b.n	800c15c <_dtoa_r+0x9e4>
 800c198:	9b08      	ldr	r3, [sp, #32]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	db04      	blt.n	800c1a8 <_dtoa_r+0xa30>
 800c19e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	d120      	bne.n	800c1ea <_dtoa_r+0xa72>
 800c1a8:	2a00      	cmp	r2, #0
 800c1aa:	dded      	ble.n	800c188 <_dtoa_r+0xa10>
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4658      	mov	r0, fp
 800c1b2:	f000 fbfd 	bl	800c9b0 <__lshift>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4681      	mov	r9, r0
 800c1ba:	f000 fc65 	bl	800ca88 <__mcmp>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	dc03      	bgt.n	800c1ca <_dtoa_r+0xa52>
 800c1c2:	d1e1      	bne.n	800c188 <_dtoa_r+0xa10>
 800c1c4:	f018 0f01 	tst.w	r8, #1
 800c1c8:	d0de      	beq.n	800c188 <_dtoa_r+0xa10>
 800c1ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1ce:	d1d8      	bne.n	800c182 <_dtoa_r+0xa0a>
 800c1d0:	9a00      	ldr	r2, [sp, #0]
 800c1d2:	2339      	movs	r3, #57	@ 0x39
 800c1d4:	7013      	strb	r3, [r2, #0]
 800c1d6:	4633      	mov	r3, r6
 800c1d8:	461e      	mov	r6, r3
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1e0:	2a39      	cmp	r2, #57	@ 0x39
 800c1e2:	d052      	beq.n	800c28a <_dtoa_r+0xb12>
 800c1e4:	3201      	adds	r2, #1
 800c1e6:	701a      	strb	r2, [r3, #0]
 800c1e8:	e612      	b.n	800be10 <_dtoa_r+0x698>
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	dd07      	ble.n	800c1fe <_dtoa_r+0xa86>
 800c1ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1f2:	d0ed      	beq.n	800c1d0 <_dtoa_r+0xa58>
 800c1f4:	9a00      	ldr	r2, [sp, #0]
 800c1f6:	f108 0301 	add.w	r3, r8, #1
 800c1fa:	7013      	strb	r3, [r2, #0]
 800c1fc:	e608      	b.n	800be10 <_dtoa_r+0x698>
 800c1fe:	9b07      	ldr	r3, [sp, #28]
 800c200:	9a07      	ldr	r2, [sp, #28]
 800c202:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c208:	4293      	cmp	r3, r2
 800c20a:	d028      	beq.n	800c25e <_dtoa_r+0xae6>
 800c20c:	4649      	mov	r1, r9
 800c20e:	2300      	movs	r3, #0
 800c210:	220a      	movs	r2, #10
 800c212:	4658      	mov	r0, fp
 800c214:	f000 f9d6 	bl	800c5c4 <__multadd>
 800c218:	42af      	cmp	r7, r5
 800c21a:	4681      	mov	r9, r0
 800c21c:	f04f 0300 	mov.w	r3, #0
 800c220:	f04f 020a 	mov.w	r2, #10
 800c224:	4639      	mov	r1, r7
 800c226:	4658      	mov	r0, fp
 800c228:	d107      	bne.n	800c23a <_dtoa_r+0xac2>
 800c22a:	f000 f9cb 	bl	800c5c4 <__multadd>
 800c22e:	4607      	mov	r7, r0
 800c230:	4605      	mov	r5, r0
 800c232:	9b07      	ldr	r3, [sp, #28]
 800c234:	3301      	adds	r3, #1
 800c236:	9307      	str	r3, [sp, #28]
 800c238:	e774      	b.n	800c124 <_dtoa_r+0x9ac>
 800c23a:	f000 f9c3 	bl	800c5c4 <__multadd>
 800c23e:	4629      	mov	r1, r5
 800c240:	4607      	mov	r7, r0
 800c242:	2300      	movs	r3, #0
 800c244:	220a      	movs	r2, #10
 800c246:	4658      	mov	r0, fp
 800c248:	f000 f9bc 	bl	800c5c4 <__multadd>
 800c24c:	4605      	mov	r5, r0
 800c24e:	e7f0      	b.n	800c232 <_dtoa_r+0xaba>
 800c250:	9b00      	ldr	r3, [sp, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	bfcc      	ite	gt
 800c256:	461e      	movgt	r6, r3
 800c258:	2601      	movle	r6, #1
 800c25a:	4456      	add	r6, sl
 800c25c:	2700      	movs	r7, #0
 800c25e:	4649      	mov	r1, r9
 800c260:	2201      	movs	r2, #1
 800c262:	4658      	mov	r0, fp
 800c264:	f000 fba4 	bl	800c9b0 <__lshift>
 800c268:	4621      	mov	r1, r4
 800c26a:	4681      	mov	r9, r0
 800c26c:	f000 fc0c 	bl	800ca88 <__mcmp>
 800c270:	2800      	cmp	r0, #0
 800c272:	dcb0      	bgt.n	800c1d6 <_dtoa_r+0xa5e>
 800c274:	d102      	bne.n	800c27c <_dtoa_r+0xb04>
 800c276:	f018 0f01 	tst.w	r8, #1
 800c27a:	d1ac      	bne.n	800c1d6 <_dtoa_r+0xa5e>
 800c27c:	4633      	mov	r3, r6
 800c27e:	461e      	mov	r6, r3
 800c280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c284:	2a30      	cmp	r2, #48	@ 0x30
 800c286:	d0fa      	beq.n	800c27e <_dtoa_r+0xb06>
 800c288:	e5c2      	b.n	800be10 <_dtoa_r+0x698>
 800c28a:	459a      	cmp	sl, r3
 800c28c:	d1a4      	bne.n	800c1d8 <_dtoa_r+0xa60>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	3301      	adds	r3, #1
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	2331      	movs	r3, #49	@ 0x31
 800c296:	f88a 3000 	strb.w	r3, [sl]
 800c29a:	e5b9      	b.n	800be10 <_dtoa_r+0x698>
 800c29c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c29e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c2fc <_dtoa_r+0xb84>
 800c2a2:	b11b      	cbz	r3, 800c2ac <_dtoa_r+0xb34>
 800c2a4:	f10a 0308 	add.w	r3, sl, #8
 800c2a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c2aa:	6013      	str	r3, [r2, #0]
 800c2ac:	4650      	mov	r0, sl
 800c2ae:	b019      	add	sp, #100	@ 0x64
 800c2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	f77f ae37 	ble.w	800bf2a <_dtoa_r+0x7b2>
 800c2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2c0:	2001      	movs	r0, #1
 800c2c2:	e655      	b.n	800bf70 <_dtoa_r+0x7f8>
 800c2c4:	9b00      	ldr	r3, [sp, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f77f aed6 	ble.w	800c078 <_dtoa_r+0x900>
 800c2cc:	4656      	mov	r6, sl
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4648      	mov	r0, r9
 800c2d2:	f7ff f9c9 	bl	800b668 <quorem>
 800c2d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2da:	f806 8b01 	strb.w	r8, [r6], #1
 800c2de:	9b00      	ldr	r3, [sp, #0]
 800c2e0:	eba6 020a 	sub.w	r2, r6, sl
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	ddb3      	ble.n	800c250 <_dtoa_r+0xad8>
 800c2e8:	4649      	mov	r1, r9
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	4658      	mov	r0, fp
 800c2f0:	f000 f968 	bl	800c5c4 <__multadd>
 800c2f4:	4681      	mov	r9, r0
 800c2f6:	e7ea      	b.n	800c2ce <_dtoa_r+0xb56>
 800c2f8:	0800ffee 	.word	0x0800ffee
 800c2fc:	0800ff89 	.word	0x0800ff89

0800c300 <_free_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4605      	mov	r5, r0
 800c304:	2900      	cmp	r1, #0
 800c306:	d041      	beq.n	800c38c <_free_r+0x8c>
 800c308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c30c:	1f0c      	subs	r4, r1, #4
 800c30e:	2b00      	cmp	r3, #0
 800c310:	bfb8      	it	lt
 800c312:	18e4      	addlt	r4, r4, r3
 800c314:	f000 f8e8 	bl	800c4e8 <__malloc_lock>
 800c318:	4a1d      	ldr	r2, [pc, #116]	@ (800c390 <_free_r+0x90>)
 800c31a:	6813      	ldr	r3, [r2, #0]
 800c31c:	b933      	cbnz	r3, 800c32c <_free_r+0x2c>
 800c31e:	6063      	str	r3, [r4, #4]
 800c320:	6014      	str	r4, [r2, #0]
 800c322:	4628      	mov	r0, r5
 800c324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c328:	f000 b8e4 	b.w	800c4f4 <__malloc_unlock>
 800c32c:	42a3      	cmp	r3, r4
 800c32e:	d908      	bls.n	800c342 <_free_r+0x42>
 800c330:	6820      	ldr	r0, [r4, #0]
 800c332:	1821      	adds	r1, r4, r0
 800c334:	428b      	cmp	r3, r1
 800c336:	bf01      	itttt	eq
 800c338:	6819      	ldreq	r1, [r3, #0]
 800c33a:	685b      	ldreq	r3, [r3, #4]
 800c33c:	1809      	addeq	r1, r1, r0
 800c33e:	6021      	streq	r1, [r4, #0]
 800c340:	e7ed      	b.n	800c31e <_free_r+0x1e>
 800c342:	461a      	mov	r2, r3
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	b10b      	cbz	r3, 800c34c <_free_r+0x4c>
 800c348:	42a3      	cmp	r3, r4
 800c34a:	d9fa      	bls.n	800c342 <_free_r+0x42>
 800c34c:	6811      	ldr	r1, [r2, #0]
 800c34e:	1850      	adds	r0, r2, r1
 800c350:	42a0      	cmp	r0, r4
 800c352:	d10b      	bne.n	800c36c <_free_r+0x6c>
 800c354:	6820      	ldr	r0, [r4, #0]
 800c356:	4401      	add	r1, r0
 800c358:	1850      	adds	r0, r2, r1
 800c35a:	4283      	cmp	r3, r0
 800c35c:	6011      	str	r1, [r2, #0]
 800c35e:	d1e0      	bne.n	800c322 <_free_r+0x22>
 800c360:	6818      	ldr	r0, [r3, #0]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	6053      	str	r3, [r2, #4]
 800c366:	4408      	add	r0, r1
 800c368:	6010      	str	r0, [r2, #0]
 800c36a:	e7da      	b.n	800c322 <_free_r+0x22>
 800c36c:	d902      	bls.n	800c374 <_free_r+0x74>
 800c36e:	230c      	movs	r3, #12
 800c370:	602b      	str	r3, [r5, #0]
 800c372:	e7d6      	b.n	800c322 <_free_r+0x22>
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	1821      	adds	r1, r4, r0
 800c378:	428b      	cmp	r3, r1
 800c37a:	bf04      	itt	eq
 800c37c:	6819      	ldreq	r1, [r3, #0]
 800c37e:	685b      	ldreq	r3, [r3, #4]
 800c380:	6063      	str	r3, [r4, #4]
 800c382:	bf04      	itt	eq
 800c384:	1809      	addeq	r1, r1, r0
 800c386:	6021      	streq	r1, [r4, #0]
 800c388:	6054      	str	r4, [r2, #4]
 800c38a:	e7ca      	b.n	800c322 <_free_r+0x22>
 800c38c:	bd38      	pop	{r3, r4, r5, pc}
 800c38e:	bf00      	nop
 800c390:	20000924 	.word	0x20000924

0800c394 <malloc>:
 800c394:	4b02      	ldr	r3, [pc, #8]	@ (800c3a0 <malloc+0xc>)
 800c396:	4601      	mov	r1, r0
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	f000 b825 	b.w	800c3e8 <_malloc_r>
 800c39e:	bf00      	nop
 800c3a0:	20000020 	.word	0x20000020

0800c3a4 <sbrk_aligned>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	4e0f      	ldr	r6, [pc, #60]	@ (800c3e4 <sbrk_aligned+0x40>)
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	6831      	ldr	r1, [r6, #0]
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	b911      	cbnz	r1, 800c3b6 <sbrk_aligned+0x12>
 800c3b0:	f002 faf4 	bl	800e99c <_sbrk_r>
 800c3b4:	6030      	str	r0, [r6, #0]
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f002 faef 	bl	800e99c <_sbrk_r>
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	d103      	bne.n	800c3ca <sbrk_aligned+0x26>
 800c3c2:	f04f 34ff 	mov.w	r4, #4294967295
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ca:	1cc4      	adds	r4, r0, #3
 800c3cc:	f024 0403 	bic.w	r4, r4, #3
 800c3d0:	42a0      	cmp	r0, r4
 800c3d2:	d0f8      	beq.n	800c3c6 <sbrk_aligned+0x22>
 800c3d4:	1a21      	subs	r1, r4, r0
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f002 fae0 	bl	800e99c <_sbrk_r>
 800c3dc:	3001      	adds	r0, #1
 800c3de:	d1f2      	bne.n	800c3c6 <sbrk_aligned+0x22>
 800c3e0:	e7ef      	b.n	800c3c2 <sbrk_aligned+0x1e>
 800c3e2:	bf00      	nop
 800c3e4:	20000920 	.word	0x20000920

0800c3e8 <_malloc_r>:
 800c3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ec:	1ccd      	adds	r5, r1, #3
 800c3ee:	f025 0503 	bic.w	r5, r5, #3
 800c3f2:	3508      	adds	r5, #8
 800c3f4:	2d0c      	cmp	r5, #12
 800c3f6:	bf38      	it	cc
 800c3f8:	250c      	movcc	r5, #12
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	db01      	blt.n	800c404 <_malloc_r+0x1c>
 800c400:	42a9      	cmp	r1, r5
 800c402:	d904      	bls.n	800c40e <_malloc_r+0x26>
 800c404:	230c      	movs	r3, #12
 800c406:	6033      	str	r3, [r6, #0]
 800c408:	2000      	movs	r0, #0
 800c40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4e4 <_malloc_r+0xfc>
 800c412:	f000 f869 	bl	800c4e8 <__malloc_lock>
 800c416:	f8d8 3000 	ldr.w	r3, [r8]
 800c41a:	461c      	mov	r4, r3
 800c41c:	bb44      	cbnz	r4, 800c470 <_malloc_r+0x88>
 800c41e:	4629      	mov	r1, r5
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff ffbf 	bl	800c3a4 <sbrk_aligned>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	4604      	mov	r4, r0
 800c42a:	d158      	bne.n	800c4de <_malloc_r+0xf6>
 800c42c:	f8d8 4000 	ldr.w	r4, [r8]
 800c430:	4627      	mov	r7, r4
 800c432:	2f00      	cmp	r7, #0
 800c434:	d143      	bne.n	800c4be <_malloc_r+0xd6>
 800c436:	2c00      	cmp	r4, #0
 800c438:	d04b      	beq.n	800c4d2 <_malloc_r+0xea>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	4639      	mov	r1, r7
 800c43e:	4630      	mov	r0, r6
 800c440:	eb04 0903 	add.w	r9, r4, r3
 800c444:	f002 faaa 	bl	800e99c <_sbrk_r>
 800c448:	4581      	cmp	r9, r0
 800c44a:	d142      	bne.n	800c4d2 <_malloc_r+0xea>
 800c44c:	6821      	ldr	r1, [r4, #0]
 800c44e:	1a6d      	subs	r5, r5, r1
 800c450:	4629      	mov	r1, r5
 800c452:	4630      	mov	r0, r6
 800c454:	f7ff ffa6 	bl	800c3a4 <sbrk_aligned>
 800c458:	3001      	adds	r0, #1
 800c45a:	d03a      	beq.n	800c4d2 <_malloc_r+0xea>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	442b      	add	r3, r5
 800c460:	6023      	str	r3, [r4, #0]
 800c462:	f8d8 3000 	ldr.w	r3, [r8]
 800c466:	685a      	ldr	r2, [r3, #4]
 800c468:	bb62      	cbnz	r2, 800c4c4 <_malloc_r+0xdc>
 800c46a:	f8c8 7000 	str.w	r7, [r8]
 800c46e:	e00f      	b.n	800c490 <_malloc_r+0xa8>
 800c470:	6822      	ldr	r2, [r4, #0]
 800c472:	1b52      	subs	r2, r2, r5
 800c474:	d420      	bmi.n	800c4b8 <_malloc_r+0xd0>
 800c476:	2a0b      	cmp	r2, #11
 800c478:	d917      	bls.n	800c4aa <_malloc_r+0xc2>
 800c47a:	1961      	adds	r1, r4, r5
 800c47c:	42a3      	cmp	r3, r4
 800c47e:	6025      	str	r5, [r4, #0]
 800c480:	bf18      	it	ne
 800c482:	6059      	strne	r1, [r3, #4]
 800c484:	6863      	ldr	r3, [r4, #4]
 800c486:	bf08      	it	eq
 800c488:	f8c8 1000 	streq.w	r1, [r8]
 800c48c:	5162      	str	r2, [r4, r5]
 800c48e:	604b      	str	r3, [r1, #4]
 800c490:	4630      	mov	r0, r6
 800c492:	f000 f82f 	bl	800c4f4 <__malloc_unlock>
 800c496:	f104 000b 	add.w	r0, r4, #11
 800c49a:	1d23      	adds	r3, r4, #4
 800c49c:	f020 0007 	bic.w	r0, r0, #7
 800c4a0:	1ac2      	subs	r2, r0, r3
 800c4a2:	bf1c      	itt	ne
 800c4a4:	1a1b      	subne	r3, r3, r0
 800c4a6:	50a3      	strne	r3, [r4, r2]
 800c4a8:	e7af      	b.n	800c40a <_malloc_r+0x22>
 800c4aa:	6862      	ldr	r2, [r4, #4]
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	bf0c      	ite	eq
 800c4b0:	f8c8 2000 	streq.w	r2, [r8]
 800c4b4:	605a      	strne	r2, [r3, #4]
 800c4b6:	e7eb      	b.n	800c490 <_malloc_r+0xa8>
 800c4b8:	4623      	mov	r3, r4
 800c4ba:	6864      	ldr	r4, [r4, #4]
 800c4bc:	e7ae      	b.n	800c41c <_malloc_r+0x34>
 800c4be:	463c      	mov	r4, r7
 800c4c0:	687f      	ldr	r7, [r7, #4]
 800c4c2:	e7b6      	b.n	800c432 <_malloc_r+0x4a>
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d1fb      	bne.n	800c4c4 <_malloc_r+0xdc>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	6053      	str	r3, [r2, #4]
 800c4d0:	e7de      	b.n	800c490 <_malloc_r+0xa8>
 800c4d2:	230c      	movs	r3, #12
 800c4d4:	6033      	str	r3, [r6, #0]
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f000 f80c 	bl	800c4f4 <__malloc_unlock>
 800c4dc:	e794      	b.n	800c408 <_malloc_r+0x20>
 800c4de:	6005      	str	r5, [r0, #0]
 800c4e0:	e7d6      	b.n	800c490 <_malloc_r+0xa8>
 800c4e2:	bf00      	nop
 800c4e4:	20000924 	.word	0x20000924

0800c4e8 <__malloc_lock>:
 800c4e8:	4801      	ldr	r0, [pc, #4]	@ (800c4f0 <__malloc_lock+0x8>)
 800c4ea:	f7ff b896 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800c4ee:	bf00      	nop
 800c4f0:	2000091c 	.word	0x2000091c

0800c4f4 <__malloc_unlock>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	@ (800c4fc <__malloc_unlock+0x8>)
 800c4f6:	f7ff b891 	b.w	800b61c <__retarget_lock_release_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	2000091c 	.word	0x2000091c

0800c500 <_Balloc>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	69c6      	ldr	r6, [r0, #28]
 800c504:	4604      	mov	r4, r0
 800c506:	460d      	mov	r5, r1
 800c508:	b976      	cbnz	r6, 800c528 <_Balloc+0x28>
 800c50a:	2010      	movs	r0, #16
 800c50c:	f7ff ff42 	bl	800c394 <malloc>
 800c510:	4602      	mov	r2, r0
 800c512:	61e0      	str	r0, [r4, #28]
 800c514:	b920      	cbnz	r0, 800c520 <_Balloc+0x20>
 800c516:	4b18      	ldr	r3, [pc, #96]	@ (800c578 <_Balloc+0x78>)
 800c518:	4818      	ldr	r0, [pc, #96]	@ (800c57c <_Balloc+0x7c>)
 800c51a:	216b      	movs	r1, #107	@ 0x6b
 800c51c:	f7ff f886 	bl	800b62c <__assert_func>
 800c520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c524:	6006      	str	r6, [r0, #0]
 800c526:	60c6      	str	r6, [r0, #12]
 800c528:	69e6      	ldr	r6, [r4, #28]
 800c52a:	68f3      	ldr	r3, [r6, #12]
 800c52c:	b183      	cbz	r3, 800c550 <_Balloc+0x50>
 800c52e:	69e3      	ldr	r3, [r4, #28]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c536:	b9b8      	cbnz	r0, 800c568 <_Balloc+0x68>
 800c538:	2101      	movs	r1, #1
 800c53a:	fa01 f605 	lsl.w	r6, r1, r5
 800c53e:	1d72      	adds	r2, r6, #5
 800c540:	0092      	lsls	r2, r2, #2
 800c542:	4620      	mov	r0, r4
 800c544:	f002 fa57 	bl	800e9f6 <_calloc_r>
 800c548:	b160      	cbz	r0, 800c564 <_Balloc+0x64>
 800c54a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c54e:	e00e      	b.n	800c56e <_Balloc+0x6e>
 800c550:	2221      	movs	r2, #33	@ 0x21
 800c552:	2104      	movs	r1, #4
 800c554:	4620      	mov	r0, r4
 800c556:	f002 fa4e 	bl	800e9f6 <_calloc_r>
 800c55a:	69e3      	ldr	r3, [r4, #28]
 800c55c:	60f0      	str	r0, [r6, #12]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e4      	bne.n	800c52e <_Balloc+0x2e>
 800c564:	2000      	movs	r0, #0
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	6802      	ldr	r2, [r0, #0]
 800c56a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c56e:	2300      	movs	r3, #0
 800c570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c574:	e7f7      	b.n	800c566 <_Balloc+0x66>
 800c576:	bf00      	nop
 800c578:	0800fedc 	.word	0x0800fedc
 800c57c:	0800ffff 	.word	0x0800ffff

0800c580 <_Bfree>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	69c6      	ldr	r6, [r0, #28]
 800c584:	4605      	mov	r5, r0
 800c586:	460c      	mov	r4, r1
 800c588:	b976      	cbnz	r6, 800c5a8 <_Bfree+0x28>
 800c58a:	2010      	movs	r0, #16
 800c58c:	f7ff ff02 	bl	800c394 <malloc>
 800c590:	4602      	mov	r2, r0
 800c592:	61e8      	str	r0, [r5, #28]
 800c594:	b920      	cbnz	r0, 800c5a0 <_Bfree+0x20>
 800c596:	4b09      	ldr	r3, [pc, #36]	@ (800c5bc <_Bfree+0x3c>)
 800c598:	4809      	ldr	r0, [pc, #36]	@ (800c5c0 <_Bfree+0x40>)
 800c59a:	218f      	movs	r1, #143	@ 0x8f
 800c59c:	f7ff f846 	bl	800b62c <__assert_func>
 800c5a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5a4:	6006      	str	r6, [r0, #0]
 800c5a6:	60c6      	str	r6, [r0, #12]
 800c5a8:	b13c      	cbz	r4, 800c5ba <_Bfree+0x3a>
 800c5aa:	69eb      	ldr	r3, [r5, #28]
 800c5ac:	6862      	ldr	r2, [r4, #4]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5b4:	6021      	str	r1, [r4, #0]
 800c5b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	0800fedc 	.word	0x0800fedc
 800c5c0:	0800ffff 	.word	0x0800ffff

0800c5c4 <__multadd>:
 800c5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c8:	690d      	ldr	r5, [r1, #16]
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	461e      	mov	r6, r3
 800c5d0:	f101 0c14 	add.w	ip, r1, #20
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c5da:	b299      	uxth	r1, r3
 800c5dc:	fb02 6101 	mla	r1, r2, r1, r6
 800c5e0:	0c1e      	lsrs	r6, r3, #16
 800c5e2:	0c0b      	lsrs	r3, r1, #16
 800c5e4:	fb02 3306 	mla	r3, r2, r6, r3
 800c5e8:	b289      	uxth	r1, r1
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5f0:	4285      	cmp	r5, r0
 800c5f2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5fa:	dcec      	bgt.n	800c5d6 <__multadd+0x12>
 800c5fc:	b30e      	cbz	r6, 800c642 <__multadd+0x7e>
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	42ab      	cmp	r3, r5
 800c602:	dc19      	bgt.n	800c638 <__multadd+0x74>
 800c604:	6861      	ldr	r1, [r4, #4]
 800c606:	4638      	mov	r0, r7
 800c608:	3101      	adds	r1, #1
 800c60a:	f7ff ff79 	bl	800c500 <_Balloc>
 800c60e:	4680      	mov	r8, r0
 800c610:	b928      	cbnz	r0, 800c61e <__multadd+0x5a>
 800c612:	4602      	mov	r2, r0
 800c614:	4b0c      	ldr	r3, [pc, #48]	@ (800c648 <__multadd+0x84>)
 800c616:	480d      	ldr	r0, [pc, #52]	@ (800c64c <__multadd+0x88>)
 800c618:	21ba      	movs	r1, #186	@ 0xba
 800c61a:	f7ff f807 	bl	800b62c <__assert_func>
 800c61e:	6922      	ldr	r2, [r4, #16]
 800c620:	3202      	adds	r2, #2
 800c622:	f104 010c 	add.w	r1, r4, #12
 800c626:	0092      	lsls	r2, r2, #2
 800c628:	300c      	adds	r0, #12
 800c62a:	f002 f9c7 	bl	800e9bc <memcpy>
 800c62e:	4621      	mov	r1, r4
 800c630:	4638      	mov	r0, r7
 800c632:	f7ff ffa5 	bl	800c580 <_Bfree>
 800c636:	4644      	mov	r4, r8
 800c638:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c63c:	3501      	adds	r5, #1
 800c63e:	615e      	str	r6, [r3, #20]
 800c640:	6125      	str	r5, [r4, #16]
 800c642:	4620      	mov	r0, r4
 800c644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c648:	0800ffee 	.word	0x0800ffee
 800c64c:	0800ffff 	.word	0x0800ffff

0800c650 <__s2b>:
 800c650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c654:	460c      	mov	r4, r1
 800c656:	4615      	mov	r5, r2
 800c658:	461f      	mov	r7, r3
 800c65a:	2209      	movs	r2, #9
 800c65c:	3308      	adds	r3, #8
 800c65e:	4606      	mov	r6, r0
 800c660:	fb93 f3f2 	sdiv	r3, r3, r2
 800c664:	2100      	movs	r1, #0
 800c666:	2201      	movs	r2, #1
 800c668:	429a      	cmp	r2, r3
 800c66a:	db09      	blt.n	800c680 <__s2b+0x30>
 800c66c:	4630      	mov	r0, r6
 800c66e:	f7ff ff47 	bl	800c500 <_Balloc>
 800c672:	b940      	cbnz	r0, 800c686 <__s2b+0x36>
 800c674:	4602      	mov	r2, r0
 800c676:	4b19      	ldr	r3, [pc, #100]	@ (800c6dc <__s2b+0x8c>)
 800c678:	4819      	ldr	r0, [pc, #100]	@ (800c6e0 <__s2b+0x90>)
 800c67a:	21d3      	movs	r1, #211	@ 0xd3
 800c67c:	f7fe ffd6 	bl	800b62c <__assert_func>
 800c680:	0052      	lsls	r2, r2, #1
 800c682:	3101      	adds	r1, #1
 800c684:	e7f0      	b.n	800c668 <__s2b+0x18>
 800c686:	9b08      	ldr	r3, [sp, #32]
 800c688:	6143      	str	r3, [r0, #20]
 800c68a:	2d09      	cmp	r5, #9
 800c68c:	f04f 0301 	mov.w	r3, #1
 800c690:	6103      	str	r3, [r0, #16]
 800c692:	dd16      	ble.n	800c6c2 <__s2b+0x72>
 800c694:	f104 0909 	add.w	r9, r4, #9
 800c698:	46c8      	mov	r8, r9
 800c69a:	442c      	add	r4, r5
 800c69c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c6a0:	4601      	mov	r1, r0
 800c6a2:	3b30      	subs	r3, #48	@ 0x30
 800c6a4:	220a      	movs	r2, #10
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	f7ff ff8c 	bl	800c5c4 <__multadd>
 800c6ac:	45a0      	cmp	r8, r4
 800c6ae:	d1f5      	bne.n	800c69c <__s2b+0x4c>
 800c6b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c6b4:	444c      	add	r4, r9
 800c6b6:	1b2d      	subs	r5, r5, r4
 800c6b8:	1963      	adds	r3, r4, r5
 800c6ba:	42bb      	cmp	r3, r7
 800c6bc:	db04      	blt.n	800c6c8 <__s2b+0x78>
 800c6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6c2:	340a      	adds	r4, #10
 800c6c4:	2509      	movs	r5, #9
 800c6c6:	e7f6      	b.n	800c6b6 <__s2b+0x66>
 800c6c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6cc:	4601      	mov	r1, r0
 800c6ce:	3b30      	subs	r3, #48	@ 0x30
 800c6d0:	220a      	movs	r2, #10
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f7ff ff76 	bl	800c5c4 <__multadd>
 800c6d8:	e7ee      	b.n	800c6b8 <__s2b+0x68>
 800c6da:	bf00      	nop
 800c6dc:	0800ffee 	.word	0x0800ffee
 800c6e0:	0800ffff 	.word	0x0800ffff

0800c6e4 <__hi0bits>:
 800c6e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	bf36      	itet	cc
 800c6ec:	0403      	lslcc	r3, r0, #16
 800c6ee:	2000      	movcs	r0, #0
 800c6f0:	2010      	movcc	r0, #16
 800c6f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6f6:	bf3c      	itt	cc
 800c6f8:	021b      	lslcc	r3, r3, #8
 800c6fa:	3008      	addcc	r0, #8
 800c6fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c700:	bf3c      	itt	cc
 800c702:	011b      	lslcc	r3, r3, #4
 800c704:	3004      	addcc	r0, #4
 800c706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c70a:	bf3c      	itt	cc
 800c70c:	009b      	lslcc	r3, r3, #2
 800c70e:	3002      	addcc	r0, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	db05      	blt.n	800c720 <__hi0bits+0x3c>
 800c714:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c718:	f100 0001 	add.w	r0, r0, #1
 800c71c:	bf08      	it	eq
 800c71e:	2020      	moveq	r0, #32
 800c720:	4770      	bx	lr

0800c722 <__lo0bits>:
 800c722:	6803      	ldr	r3, [r0, #0]
 800c724:	4602      	mov	r2, r0
 800c726:	f013 0007 	ands.w	r0, r3, #7
 800c72a:	d00b      	beq.n	800c744 <__lo0bits+0x22>
 800c72c:	07d9      	lsls	r1, r3, #31
 800c72e:	d421      	bmi.n	800c774 <__lo0bits+0x52>
 800c730:	0798      	lsls	r0, r3, #30
 800c732:	bf49      	itett	mi
 800c734:	085b      	lsrmi	r3, r3, #1
 800c736:	089b      	lsrpl	r3, r3, #2
 800c738:	2001      	movmi	r0, #1
 800c73a:	6013      	strmi	r3, [r2, #0]
 800c73c:	bf5c      	itt	pl
 800c73e:	6013      	strpl	r3, [r2, #0]
 800c740:	2002      	movpl	r0, #2
 800c742:	4770      	bx	lr
 800c744:	b299      	uxth	r1, r3
 800c746:	b909      	cbnz	r1, 800c74c <__lo0bits+0x2a>
 800c748:	0c1b      	lsrs	r3, r3, #16
 800c74a:	2010      	movs	r0, #16
 800c74c:	b2d9      	uxtb	r1, r3
 800c74e:	b909      	cbnz	r1, 800c754 <__lo0bits+0x32>
 800c750:	3008      	adds	r0, #8
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	0719      	lsls	r1, r3, #28
 800c756:	bf04      	itt	eq
 800c758:	091b      	lsreq	r3, r3, #4
 800c75a:	3004      	addeq	r0, #4
 800c75c:	0799      	lsls	r1, r3, #30
 800c75e:	bf04      	itt	eq
 800c760:	089b      	lsreq	r3, r3, #2
 800c762:	3002      	addeq	r0, #2
 800c764:	07d9      	lsls	r1, r3, #31
 800c766:	d403      	bmi.n	800c770 <__lo0bits+0x4e>
 800c768:	085b      	lsrs	r3, r3, #1
 800c76a:	f100 0001 	add.w	r0, r0, #1
 800c76e:	d003      	beq.n	800c778 <__lo0bits+0x56>
 800c770:	6013      	str	r3, [r2, #0]
 800c772:	4770      	bx	lr
 800c774:	2000      	movs	r0, #0
 800c776:	4770      	bx	lr
 800c778:	2020      	movs	r0, #32
 800c77a:	4770      	bx	lr

0800c77c <__i2b>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	460c      	mov	r4, r1
 800c780:	2101      	movs	r1, #1
 800c782:	f7ff febd 	bl	800c500 <_Balloc>
 800c786:	4602      	mov	r2, r0
 800c788:	b928      	cbnz	r0, 800c796 <__i2b+0x1a>
 800c78a:	4b05      	ldr	r3, [pc, #20]	@ (800c7a0 <__i2b+0x24>)
 800c78c:	4805      	ldr	r0, [pc, #20]	@ (800c7a4 <__i2b+0x28>)
 800c78e:	f240 1145 	movw	r1, #325	@ 0x145
 800c792:	f7fe ff4b 	bl	800b62c <__assert_func>
 800c796:	2301      	movs	r3, #1
 800c798:	6144      	str	r4, [r0, #20]
 800c79a:	6103      	str	r3, [r0, #16]
 800c79c:	bd10      	pop	{r4, pc}
 800c79e:	bf00      	nop
 800c7a0:	0800ffee 	.word	0x0800ffee
 800c7a4:	0800ffff 	.word	0x0800ffff

0800c7a8 <__multiply>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	690a      	ldr	r2, [r1, #16]
 800c7b0:	6923      	ldr	r3, [r4, #16]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	bfa8      	it	ge
 800c7b6:	4623      	movge	r3, r4
 800c7b8:	460f      	mov	r7, r1
 800c7ba:	bfa4      	itt	ge
 800c7bc:	460c      	movge	r4, r1
 800c7be:	461f      	movge	r7, r3
 800c7c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7c8:	68a3      	ldr	r3, [r4, #8]
 800c7ca:	6861      	ldr	r1, [r4, #4]
 800c7cc:	eb0a 0609 	add.w	r6, sl, r9
 800c7d0:	42b3      	cmp	r3, r6
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	bfb8      	it	lt
 800c7d6:	3101      	addlt	r1, #1
 800c7d8:	f7ff fe92 	bl	800c500 <_Balloc>
 800c7dc:	b930      	cbnz	r0, 800c7ec <__multiply+0x44>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	4b44      	ldr	r3, [pc, #272]	@ (800c8f4 <__multiply+0x14c>)
 800c7e2:	4845      	ldr	r0, [pc, #276]	@ (800c8f8 <__multiply+0x150>)
 800c7e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7e8:	f7fe ff20 	bl	800b62c <__assert_func>
 800c7ec:	f100 0514 	add.w	r5, r0, #20
 800c7f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7f4:	462b      	mov	r3, r5
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	4543      	cmp	r3, r8
 800c7fa:	d321      	bcc.n	800c840 <__multiply+0x98>
 800c7fc:	f107 0114 	add.w	r1, r7, #20
 800c800:	f104 0214 	add.w	r2, r4, #20
 800c804:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c808:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c80c:	9302      	str	r3, [sp, #8]
 800c80e:	1b13      	subs	r3, r2, r4
 800c810:	3b15      	subs	r3, #21
 800c812:	f023 0303 	bic.w	r3, r3, #3
 800c816:	3304      	adds	r3, #4
 800c818:	f104 0715 	add.w	r7, r4, #21
 800c81c:	42ba      	cmp	r2, r7
 800c81e:	bf38      	it	cc
 800c820:	2304      	movcc	r3, #4
 800c822:	9301      	str	r3, [sp, #4]
 800c824:	9b02      	ldr	r3, [sp, #8]
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	428b      	cmp	r3, r1
 800c82a:	d80c      	bhi.n	800c846 <__multiply+0x9e>
 800c82c:	2e00      	cmp	r6, #0
 800c82e:	dd03      	ble.n	800c838 <__multiply+0x90>
 800c830:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c834:	2b00      	cmp	r3, #0
 800c836:	d05b      	beq.n	800c8f0 <__multiply+0x148>
 800c838:	6106      	str	r6, [r0, #16]
 800c83a:	b005      	add	sp, #20
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c840:	f843 2b04 	str.w	r2, [r3], #4
 800c844:	e7d8      	b.n	800c7f8 <__multiply+0x50>
 800c846:	f8b1 a000 	ldrh.w	sl, [r1]
 800c84a:	f1ba 0f00 	cmp.w	sl, #0
 800c84e:	d024      	beq.n	800c89a <__multiply+0xf2>
 800c850:	f104 0e14 	add.w	lr, r4, #20
 800c854:	46a9      	mov	r9, r5
 800c856:	f04f 0c00 	mov.w	ip, #0
 800c85a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c85e:	f8d9 3000 	ldr.w	r3, [r9]
 800c862:	fa1f fb87 	uxth.w	fp, r7
 800c866:	b29b      	uxth	r3, r3
 800c868:	fb0a 330b 	mla	r3, sl, fp, r3
 800c86c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c870:	f8d9 7000 	ldr.w	r7, [r9]
 800c874:	4463      	add	r3, ip
 800c876:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c87a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c87e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c882:	b29b      	uxth	r3, r3
 800c884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c888:	4572      	cmp	r2, lr
 800c88a:	f849 3b04 	str.w	r3, [r9], #4
 800c88e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c892:	d8e2      	bhi.n	800c85a <__multiply+0xb2>
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	f845 c003 	str.w	ip, [r5, r3]
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8a0:	3104      	adds	r1, #4
 800c8a2:	f1b9 0f00 	cmp.w	r9, #0
 800c8a6:	d021      	beq.n	800c8ec <__multiply+0x144>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	f104 0c14 	add.w	ip, r4, #20
 800c8ae:	46ae      	mov	lr, r5
 800c8b0:	f04f 0a00 	mov.w	sl, #0
 800c8b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c8b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c8bc:	fb09 770b 	mla	r7, r9, fp, r7
 800c8c0:	4457      	add	r7, sl
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8c8:	f84e 3b04 	str.w	r3, [lr], #4
 800c8cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8d4:	f8be 3000 	ldrh.w	r3, [lr]
 800c8d8:	fb09 330a 	mla	r3, r9, sl, r3
 800c8dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8e0:	4562      	cmp	r2, ip
 800c8e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8e6:	d8e5      	bhi.n	800c8b4 <__multiply+0x10c>
 800c8e8:	9f01      	ldr	r7, [sp, #4]
 800c8ea:	51eb      	str	r3, [r5, r7]
 800c8ec:	3504      	adds	r5, #4
 800c8ee:	e799      	b.n	800c824 <__multiply+0x7c>
 800c8f0:	3e01      	subs	r6, #1
 800c8f2:	e79b      	b.n	800c82c <__multiply+0x84>
 800c8f4:	0800ffee 	.word	0x0800ffee
 800c8f8:	0800ffff 	.word	0x0800ffff

0800c8fc <__pow5mult>:
 800c8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c900:	4615      	mov	r5, r2
 800c902:	f012 0203 	ands.w	r2, r2, #3
 800c906:	4607      	mov	r7, r0
 800c908:	460e      	mov	r6, r1
 800c90a:	d007      	beq.n	800c91c <__pow5mult+0x20>
 800c90c:	4c25      	ldr	r4, [pc, #148]	@ (800c9a4 <__pow5mult+0xa8>)
 800c90e:	3a01      	subs	r2, #1
 800c910:	2300      	movs	r3, #0
 800c912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c916:	f7ff fe55 	bl	800c5c4 <__multadd>
 800c91a:	4606      	mov	r6, r0
 800c91c:	10ad      	asrs	r5, r5, #2
 800c91e:	d03d      	beq.n	800c99c <__pow5mult+0xa0>
 800c920:	69fc      	ldr	r4, [r7, #28]
 800c922:	b97c      	cbnz	r4, 800c944 <__pow5mult+0x48>
 800c924:	2010      	movs	r0, #16
 800c926:	f7ff fd35 	bl	800c394 <malloc>
 800c92a:	4602      	mov	r2, r0
 800c92c:	61f8      	str	r0, [r7, #28]
 800c92e:	b928      	cbnz	r0, 800c93c <__pow5mult+0x40>
 800c930:	4b1d      	ldr	r3, [pc, #116]	@ (800c9a8 <__pow5mult+0xac>)
 800c932:	481e      	ldr	r0, [pc, #120]	@ (800c9ac <__pow5mult+0xb0>)
 800c934:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c938:	f7fe fe78 	bl	800b62c <__assert_func>
 800c93c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c940:	6004      	str	r4, [r0, #0]
 800c942:	60c4      	str	r4, [r0, #12]
 800c944:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c94c:	b94c      	cbnz	r4, 800c962 <__pow5mult+0x66>
 800c94e:	f240 2171 	movw	r1, #625	@ 0x271
 800c952:	4638      	mov	r0, r7
 800c954:	f7ff ff12 	bl	800c77c <__i2b>
 800c958:	2300      	movs	r3, #0
 800c95a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c95e:	4604      	mov	r4, r0
 800c960:	6003      	str	r3, [r0, #0]
 800c962:	f04f 0900 	mov.w	r9, #0
 800c966:	07eb      	lsls	r3, r5, #31
 800c968:	d50a      	bpl.n	800c980 <__pow5mult+0x84>
 800c96a:	4631      	mov	r1, r6
 800c96c:	4622      	mov	r2, r4
 800c96e:	4638      	mov	r0, r7
 800c970:	f7ff ff1a 	bl	800c7a8 <__multiply>
 800c974:	4631      	mov	r1, r6
 800c976:	4680      	mov	r8, r0
 800c978:	4638      	mov	r0, r7
 800c97a:	f7ff fe01 	bl	800c580 <_Bfree>
 800c97e:	4646      	mov	r6, r8
 800c980:	106d      	asrs	r5, r5, #1
 800c982:	d00b      	beq.n	800c99c <__pow5mult+0xa0>
 800c984:	6820      	ldr	r0, [r4, #0]
 800c986:	b938      	cbnz	r0, 800c998 <__pow5mult+0x9c>
 800c988:	4622      	mov	r2, r4
 800c98a:	4621      	mov	r1, r4
 800c98c:	4638      	mov	r0, r7
 800c98e:	f7ff ff0b 	bl	800c7a8 <__multiply>
 800c992:	6020      	str	r0, [r4, #0]
 800c994:	f8c0 9000 	str.w	r9, [r0]
 800c998:	4604      	mov	r4, r0
 800c99a:	e7e4      	b.n	800c966 <__pow5mult+0x6a>
 800c99c:	4630      	mov	r0, r6
 800c99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a2:	bf00      	nop
 800c9a4:	08010058 	.word	0x08010058
 800c9a8:	0800fedc 	.word	0x0800fedc
 800c9ac:	0800ffff 	.word	0x0800ffff

0800c9b0 <__lshift>:
 800c9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	6849      	ldr	r1, [r1, #4]
 800c9b8:	6923      	ldr	r3, [r4, #16]
 800c9ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	4607      	mov	r7, r0
 800c9c2:	4691      	mov	r9, r2
 800c9c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9c8:	f108 0601 	add.w	r6, r8, #1
 800c9cc:	42b3      	cmp	r3, r6
 800c9ce:	db0b      	blt.n	800c9e8 <__lshift+0x38>
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7ff fd95 	bl	800c500 <_Balloc>
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	b948      	cbnz	r0, 800c9ee <__lshift+0x3e>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	4b28      	ldr	r3, [pc, #160]	@ (800ca80 <__lshift+0xd0>)
 800c9de:	4829      	ldr	r0, [pc, #164]	@ (800ca84 <__lshift+0xd4>)
 800c9e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9e4:	f7fe fe22 	bl	800b62c <__assert_func>
 800c9e8:	3101      	adds	r1, #1
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	e7ee      	b.n	800c9cc <__lshift+0x1c>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f100 0114 	add.w	r1, r0, #20
 800c9f4:	f100 0210 	add.w	r2, r0, #16
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	4553      	cmp	r3, sl
 800c9fc:	db33      	blt.n	800ca66 <__lshift+0xb6>
 800c9fe:	6920      	ldr	r0, [r4, #16]
 800ca00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca04:	f104 0314 	add.w	r3, r4, #20
 800ca08:	f019 091f 	ands.w	r9, r9, #31
 800ca0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca14:	d02b      	beq.n	800ca6e <__lshift+0xbe>
 800ca16:	f1c9 0e20 	rsb	lr, r9, #32
 800ca1a:	468a      	mov	sl, r1
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	6818      	ldr	r0, [r3, #0]
 800ca20:	fa00 f009 	lsl.w	r0, r0, r9
 800ca24:	4310      	orrs	r0, r2
 800ca26:	f84a 0b04 	str.w	r0, [sl], #4
 800ca2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2e:	459c      	cmp	ip, r3
 800ca30:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca34:	d8f3      	bhi.n	800ca1e <__lshift+0x6e>
 800ca36:	ebac 0304 	sub.w	r3, ip, r4
 800ca3a:	3b15      	subs	r3, #21
 800ca3c:	f023 0303 	bic.w	r3, r3, #3
 800ca40:	3304      	adds	r3, #4
 800ca42:	f104 0015 	add.w	r0, r4, #21
 800ca46:	4584      	cmp	ip, r0
 800ca48:	bf38      	it	cc
 800ca4a:	2304      	movcc	r3, #4
 800ca4c:	50ca      	str	r2, [r1, r3]
 800ca4e:	b10a      	cbz	r2, 800ca54 <__lshift+0xa4>
 800ca50:	f108 0602 	add.w	r6, r8, #2
 800ca54:	3e01      	subs	r6, #1
 800ca56:	4638      	mov	r0, r7
 800ca58:	612e      	str	r6, [r5, #16]
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	f7ff fd90 	bl	800c580 <_Bfree>
 800ca60:	4628      	mov	r0, r5
 800ca62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca66:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	e7c5      	b.n	800c9fa <__lshift+0x4a>
 800ca6e:	3904      	subs	r1, #4
 800ca70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca74:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca78:	459c      	cmp	ip, r3
 800ca7a:	d8f9      	bhi.n	800ca70 <__lshift+0xc0>
 800ca7c:	e7ea      	b.n	800ca54 <__lshift+0xa4>
 800ca7e:	bf00      	nop
 800ca80:	0800ffee 	.word	0x0800ffee
 800ca84:	0800ffff 	.word	0x0800ffff

0800ca88 <__mcmp>:
 800ca88:	690a      	ldr	r2, [r1, #16]
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	6900      	ldr	r0, [r0, #16]
 800ca8e:	1a80      	subs	r0, r0, r2
 800ca90:	b530      	push	{r4, r5, lr}
 800ca92:	d10e      	bne.n	800cab2 <__mcmp+0x2a>
 800ca94:	3314      	adds	r3, #20
 800ca96:	3114      	adds	r1, #20
 800ca98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800caa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800caa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800caa8:	4295      	cmp	r5, r2
 800caaa:	d003      	beq.n	800cab4 <__mcmp+0x2c>
 800caac:	d205      	bcs.n	800caba <__mcmp+0x32>
 800caae:	f04f 30ff 	mov.w	r0, #4294967295
 800cab2:	bd30      	pop	{r4, r5, pc}
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d3f3      	bcc.n	800caa0 <__mcmp+0x18>
 800cab8:	e7fb      	b.n	800cab2 <__mcmp+0x2a>
 800caba:	2001      	movs	r0, #1
 800cabc:	e7f9      	b.n	800cab2 <__mcmp+0x2a>
	...

0800cac0 <__mdiff>:
 800cac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	4689      	mov	r9, r1
 800cac6:	4606      	mov	r6, r0
 800cac8:	4611      	mov	r1, r2
 800caca:	4648      	mov	r0, r9
 800cacc:	4614      	mov	r4, r2
 800cace:	f7ff ffdb 	bl	800ca88 <__mcmp>
 800cad2:	1e05      	subs	r5, r0, #0
 800cad4:	d112      	bne.n	800cafc <__mdiff+0x3c>
 800cad6:	4629      	mov	r1, r5
 800cad8:	4630      	mov	r0, r6
 800cada:	f7ff fd11 	bl	800c500 <_Balloc>
 800cade:	4602      	mov	r2, r0
 800cae0:	b928      	cbnz	r0, 800caee <__mdiff+0x2e>
 800cae2:	4b3f      	ldr	r3, [pc, #252]	@ (800cbe0 <__mdiff+0x120>)
 800cae4:	f240 2137 	movw	r1, #567	@ 0x237
 800cae8:	483e      	ldr	r0, [pc, #248]	@ (800cbe4 <__mdiff+0x124>)
 800caea:	f7fe fd9f 	bl	800b62c <__assert_func>
 800caee:	2301      	movs	r3, #1
 800caf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caf4:	4610      	mov	r0, r2
 800caf6:	b003      	add	sp, #12
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafc:	bfbc      	itt	lt
 800cafe:	464b      	movlt	r3, r9
 800cb00:	46a1      	movlt	r9, r4
 800cb02:	4630      	mov	r0, r6
 800cb04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb08:	bfba      	itte	lt
 800cb0a:	461c      	movlt	r4, r3
 800cb0c:	2501      	movlt	r5, #1
 800cb0e:	2500      	movge	r5, #0
 800cb10:	f7ff fcf6 	bl	800c500 <_Balloc>
 800cb14:	4602      	mov	r2, r0
 800cb16:	b918      	cbnz	r0, 800cb20 <__mdiff+0x60>
 800cb18:	4b31      	ldr	r3, [pc, #196]	@ (800cbe0 <__mdiff+0x120>)
 800cb1a:	f240 2145 	movw	r1, #581	@ 0x245
 800cb1e:	e7e3      	b.n	800cae8 <__mdiff+0x28>
 800cb20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb24:	6926      	ldr	r6, [r4, #16]
 800cb26:	60c5      	str	r5, [r0, #12]
 800cb28:	f109 0310 	add.w	r3, r9, #16
 800cb2c:	f109 0514 	add.w	r5, r9, #20
 800cb30:	f104 0e14 	add.w	lr, r4, #20
 800cb34:	f100 0b14 	add.w	fp, r0, #20
 800cb38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	46d9      	mov	r9, fp
 800cb44:	f04f 0c00 	mov.w	ip, #0
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	fa1f f38a 	uxth.w	r3, sl
 800cb58:	4619      	mov	r1, r3
 800cb5a:	b283      	uxth	r3, r0
 800cb5c:	1acb      	subs	r3, r1, r3
 800cb5e:	0c00      	lsrs	r0, r0, #16
 800cb60:	4463      	add	r3, ip
 800cb62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb70:	4576      	cmp	r6, lr
 800cb72:	f849 3b04 	str.w	r3, [r9], #4
 800cb76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb7a:	d8e5      	bhi.n	800cb48 <__mdiff+0x88>
 800cb7c:	1b33      	subs	r3, r6, r4
 800cb7e:	3b15      	subs	r3, #21
 800cb80:	f023 0303 	bic.w	r3, r3, #3
 800cb84:	3415      	adds	r4, #21
 800cb86:	3304      	adds	r3, #4
 800cb88:	42a6      	cmp	r6, r4
 800cb8a:	bf38      	it	cc
 800cb8c:	2304      	movcc	r3, #4
 800cb8e:	441d      	add	r5, r3
 800cb90:	445b      	add	r3, fp
 800cb92:	461e      	mov	r6, r3
 800cb94:	462c      	mov	r4, r5
 800cb96:	4544      	cmp	r4, r8
 800cb98:	d30e      	bcc.n	800cbb8 <__mdiff+0xf8>
 800cb9a:	f108 0103 	add.w	r1, r8, #3
 800cb9e:	1b49      	subs	r1, r1, r5
 800cba0:	f021 0103 	bic.w	r1, r1, #3
 800cba4:	3d03      	subs	r5, #3
 800cba6:	45a8      	cmp	r8, r5
 800cba8:	bf38      	it	cc
 800cbaa:	2100      	movcc	r1, #0
 800cbac:	440b      	add	r3, r1
 800cbae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbb2:	b191      	cbz	r1, 800cbda <__mdiff+0x11a>
 800cbb4:	6117      	str	r7, [r2, #16]
 800cbb6:	e79d      	b.n	800caf4 <__mdiff+0x34>
 800cbb8:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbbc:	46e6      	mov	lr, ip
 800cbbe:	0c08      	lsrs	r0, r1, #16
 800cbc0:	fa1c fc81 	uxtah	ip, ip, r1
 800cbc4:	4471      	add	r1, lr
 800cbc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbca:	b289      	uxth	r1, r1
 800cbcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbd0:	f846 1b04 	str.w	r1, [r6], #4
 800cbd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbd8:	e7dd      	b.n	800cb96 <__mdiff+0xd6>
 800cbda:	3f01      	subs	r7, #1
 800cbdc:	e7e7      	b.n	800cbae <__mdiff+0xee>
 800cbde:	bf00      	nop
 800cbe0:	0800ffee 	.word	0x0800ffee
 800cbe4:	0800ffff 	.word	0x0800ffff

0800cbe8 <__ulp>:
 800cbe8:	b082      	sub	sp, #8
 800cbea:	ed8d 0b00 	vstr	d0, [sp]
 800cbee:	9a01      	ldr	r2, [sp, #4]
 800cbf0:	4b0f      	ldr	r3, [pc, #60]	@ (800cc30 <__ulp+0x48>)
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dc08      	bgt.n	800cc0e <__ulp+0x26>
 800cbfc:	425b      	negs	r3, r3
 800cbfe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc02:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc06:	da04      	bge.n	800cc12 <__ulp+0x2a>
 800cc08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc0c:	4113      	asrs	r3, r2
 800cc0e:	2200      	movs	r2, #0
 800cc10:	e008      	b.n	800cc24 <__ulp+0x3c>
 800cc12:	f1a2 0314 	sub.w	r3, r2, #20
 800cc16:	2b1e      	cmp	r3, #30
 800cc18:	bfda      	itte	le
 800cc1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cc1e:	40da      	lsrle	r2, r3
 800cc20:	2201      	movgt	r2, #1
 800cc22:	2300      	movs	r3, #0
 800cc24:	4619      	mov	r1, r3
 800cc26:	4610      	mov	r0, r2
 800cc28:	ec41 0b10 	vmov	d0, r0, r1
 800cc2c:	b002      	add	sp, #8
 800cc2e:	4770      	bx	lr
 800cc30:	7ff00000 	.word	0x7ff00000

0800cc34 <__b2d>:
 800cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc38:	6906      	ldr	r6, [r0, #16]
 800cc3a:	f100 0814 	add.w	r8, r0, #20
 800cc3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cc42:	1f37      	subs	r7, r6, #4
 800cc44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc48:	4610      	mov	r0, r2
 800cc4a:	f7ff fd4b 	bl	800c6e4 <__hi0bits>
 800cc4e:	f1c0 0320 	rsb	r3, r0, #32
 800cc52:	280a      	cmp	r0, #10
 800cc54:	600b      	str	r3, [r1, #0]
 800cc56:	491b      	ldr	r1, [pc, #108]	@ (800ccc4 <__b2d+0x90>)
 800cc58:	dc15      	bgt.n	800cc86 <__b2d+0x52>
 800cc5a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cc5e:	fa22 f30c 	lsr.w	r3, r2, ip
 800cc62:	45b8      	cmp	r8, r7
 800cc64:	ea43 0501 	orr.w	r5, r3, r1
 800cc68:	bf34      	ite	cc
 800cc6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc6e:	2300      	movcs	r3, #0
 800cc70:	3015      	adds	r0, #21
 800cc72:	fa02 f000 	lsl.w	r0, r2, r0
 800cc76:	fa23 f30c 	lsr.w	r3, r3, ip
 800cc7a:	4303      	orrs	r3, r0
 800cc7c:	461c      	mov	r4, r3
 800cc7e:	ec45 4b10 	vmov	d0, r4, r5
 800cc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc86:	45b8      	cmp	r8, r7
 800cc88:	bf3a      	itte	cc
 800cc8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc8e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cc92:	2300      	movcs	r3, #0
 800cc94:	380b      	subs	r0, #11
 800cc96:	d012      	beq.n	800ccbe <__b2d+0x8a>
 800cc98:	f1c0 0120 	rsb	r1, r0, #32
 800cc9c:	fa23 f401 	lsr.w	r4, r3, r1
 800cca0:	4082      	lsls	r2, r0
 800cca2:	4322      	orrs	r2, r4
 800cca4:	4547      	cmp	r7, r8
 800cca6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ccaa:	bf8c      	ite	hi
 800ccac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ccb0:	2200      	movls	r2, #0
 800ccb2:	4083      	lsls	r3, r0
 800ccb4:	40ca      	lsrs	r2, r1
 800ccb6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	e7de      	b.n	800cc7c <__b2d+0x48>
 800ccbe:	ea42 0501 	orr.w	r5, r2, r1
 800ccc2:	e7db      	b.n	800cc7c <__b2d+0x48>
 800ccc4:	3ff00000 	.word	0x3ff00000

0800ccc8 <__d2b>:
 800ccc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cccc:	460f      	mov	r7, r1
 800ccce:	2101      	movs	r1, #1
 800ccd0:	ec59 8b10 	vmov	r8, r9, d0
 800ccd4:	4616      	mov	r6, r2
 800ccd6:	f7ff fc13 	bl	800c500 <_Balloc>
 800ccda:	4604      	mov	r4, r0
 800ccdc:	b930      	cbnz	r0, 800ccec <__d2b+0x24>
 800ccde:	4602      	mov	r2, r0
 800cce0:	4b23      	ldr	r3, [pc, #140]	@ (800cd70 <__d2b+0xa8>)
 800cce2:	4824      	ldr	r0, [pc, #144]	@ (800cd74 <__d2b+0xac>)
 800cce4:	f240 310f 	movw	r1, #783	@ 0x30f
 800cce8:	f7fe fca0 	bl	800b62c <__assert_func>
 800ccec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ccf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccf4:	b10d      	cbz	r5, 800ccfa <__d2b+0x32>
 800ccf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccfa:	9301      	str	r3, [sp, #4]
 800ccfc:	f1b8 0300 	subs.w	r3, r8, #0
 800cd00:	d023      	beq.n	800cd4a <__d2b+0x82>
 800cd02:	4668      	mov	r0, sp
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	f7ff fd0c 	bl	800c722 <__lo0bits>
 800cd0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd0e:	b1d0      	cbz	r0, 800cd46 <__d2b+0x7e>
 800cd10:	f1c0 0320 	rsb	r3, r0, #32
 800cd14:	fa02 f303 	lsl.w	r3, r2, r3
 800cd18:	430b      	orrs	r3, r1
 800cd1a:	40c2      	lsrs	r2, r0
 800cd1c:	6163      	str	r3, [r4, #20]
 800cd1e:	9201      	str	r2, [sp, #4]
 800cd20:	9b01      	ldr	r3, [sp, #4]
 800cd22:	61a3      	str	r3, [r4, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	bf0c      	ite	eq
 800cd28:	2201      	moveq	r2, #1
 800cd2a:	2202      	movne	r2, #2
 800cd2c:	6122      	str	r2, [r4, #16]
 800cd2e:	b1a5      	cbz	r5, 800cd5a <__d2b+0x92>
 800cd30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd34:	4405      	add	r5, r0
 800cd36:	603d      	str	r5, [r7, #0]
 800cd38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd3c:	6030      	str	r0, [r6, #0]
 800cd3e:	4620      	mov	r0, r4
 800cd40:	b003      	add	sp, #12
 800cd42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd46:	6161      	str	r1, [r4, #20]
 800cd48:	e7ea      	b.n	800cd20 <__d2b+0x58>
 800cd4a:	a801      	add	r0, sp, #4
 800cd4c:	f7ff fce9 	bl	800c722 <__lo0bits>
 800cd50:	9b01      	ldr	r3, [sp, #4]
 800cd52:	6163      	str	r3, [r4, #20]
 800cd54:	3020      	adds	r0, #32
 800cd56:	2201      	movs	r2, #1
 800cd58:	e7e8      	b.n	800cd2c <__d2b+0x64>
 800cd5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd62:	6038      	str	r0, [r7, #0]
 800cd64:	6918      	ldr	r0, [r3, #16]
 800cd66:	f7ff fcbd 	bl	800c6e4 <__hi0bits>
 800cd6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd6e:	e7e5      	b.n	800cd3c <__d2b+0x74>
 800cd70:	0800ffee 	.word	0x0800ffee
 800cd74:	0800ffff 	.word	0x0800ffff

0800cd78 <__ratio>:
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	b085      	sub	sp, #20
 800cd7e:	e9cd 1000 	strd	r1, r0, [sp]
 800cd82:	a902      	add	r1, sp, #8
 800cd84:	f7ff ff56 	bl	800cc34 <__b2d>
 800cd88:	9800      	ldr	r0, [sp, #0]
 800cd8a:	a903      	add	r1, sp, #12
 800cd8c:	ec55 4b10 	vmov	r4, r5, d0
 800cd90:	f7ff ff50 	bl	800cc34 <__b2d>
 800cd94:	9b01      	ldr	r3, [sp, #4]
 800cd96:	6919      	ldr	r1, [r3, #16]
 800cd98:	9b00      	ldr	r3, [sp, #0]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	1ac9      	subs	r1, r1, r3
 800cd9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cda2:	1a9b      	subs	r3, r3, r2
 800cda4:	ec5b ab10 	vmov	sl, fp, d0
 800cda8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	bfce      	itee	gt
 800cdb0:	462a      	movgt	r2, r5
 800cdb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cdb6:	465a      	movle	r2, fp
 800cdb8:	462f      	mov	r7, r5
 800cdba:	46d9      	mov	r9, fp
 800cdbc:	bfcc      	ite	gt
 800cdbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cdc2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cdc6:	464b      	mov	r3, r9
 800cdc8:	4652      	mov	r2, sl
 800cdca:	4620      	mov	r0, r4
 800cdcc:	4639      	mov	r1, r7
 800cdce:	f7f3 fd45 	bl	800085c <__aeabi_ddiv>
 800cdd2:	ec41 0b10 	vmov	d0, r0, r1
 800cdd6:	b005      	add	sp, #20
 800cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cddc <__copybits>:
 800cddc:	3901      	subs	r1, #1
 800cdde:	b570      	push	{r4, r5, r6, lr}
 800cde0:	1149      	asrs	r1, r1, #5
 800cde2:	6914      	ldr	r4, [r2, #16]
 800cde4:	3101      	adds	r1, #1
 800cde6:	f102 0314 	add.w	r3, r2, #20
 800cdea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cdee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cdf2:	1f05      	subs	r5, r0, #4
 800cdf4:	42a3      	cmp	r3, r4
 800cdf6:	d30c      	bcc.n	800ce12 <__copybits+0x36>
 800cdf8:	1aa3      	subs	r3, r4, r2
 800cdfa:	3b11      	subs	r3, #17
 800cdfc:	f023 0303 	bic.w	r3, r3, #3
 800ce00:	3211      	adds	r2, #17
 800ce02:	42a2      	cmp	r2, r4
 800ce04:	bf88      	it	hi
 800ce06:	2300      	movhi	r3, #0
 800ce08:	4418      	add	r0, r3
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	4288      	cmp	r0, r1
 800ce0e:	d305      	bcc.n	800ce1c <__copybits+0x40>
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce16:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce1a:	e7eb      	b.n	800cdf4 <__copybits+0x18>
 800ce1c:	f840 3b04 	str.w	r3, [r0], #4
 800ce20:	e7f4      	b.n	800ce0c <__copybits+0x30>

0800ce22 <__any_on>:
 800ce22:	f100 0214 	add.w	r2, r0, #20
 800ce26:	6900      	ldr	r0, [r0, #16]
 800ce28:	114b      	asrs	r3, r1, #5
 800ce2a:	4298      	cmp	r0, r3
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	db11      	blt.n	800ce54 <__any_on+0x32>
 800ce30:	dd0a      	ble.n	800ce48 <__any_on+0x26>
 800ce32:	f011 011f 	ands.w	r1, r1, #31
 800ce36:	d007      	beq.n	800ce48 <__any_on+0x26>
 800ce38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce3c:	fa24 f001 	lsr.w	r0, r4, r1
 800ce40:	fa00 f101 	lsl.w	r1, r0, r1
 800ce44:	428c      	cmp	r4, r1
 800ce46:	d10b      	bne.n	800ce60 <__any_on+0x3e>
 800ce48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d803      	bhi.n	800ce58 <__any_on+0x36>
 800ce50:	2000      	movs	r0, #0
 800ce52:	bd10      	pop	{r4, pc}
 800ce54:	4603      	mov	r3, r0
 800ce56:	e7f7      	b.n	800ce48 <__any_on+0x26>
 800ce58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce5c:	2900      	cmp	r1, #0
 800ce5e:	d0f5      	beq.n	800ce4c <__any_on+0x2a>
 800ce60:	2001      	movs	r0, #1
 800ce62:	e7f6      	b.n	800ce52 <__any_on+0x30>

0800ce64 <sulp>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	4604      	mov	r4, r0
 800ce68:	460d      	mov	r5, r1
 800ce6a:	ec45 4b10 	vmov	d0, r4, r5
 800ce6e:	4616      	mov	r6, r2
 800ce70:	f7ff feba 	bl	800cbe8 <__ulp>
 800ce74:	ec51 0b10 	vmov	r0, r1, d0
 800ce78:	b17e      	cbz	r6, 800ce9a <sulp+0x36>
 800ce7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dd09      	ble.n	800ce9a <sulp+0x36>
 800ce86:	051b      	lsls	r3, r3, #20
 800ce88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ce8c:	2400      	movs	r4, #0
 800ce8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ce92:	4622      	mov	r2, r4
 800ce94:	462b      	mov	r3, r5
 800ce96:	f7f3 fbb7 	bl	8000608 <__aeabi_dmul>
 800ce9a:	ec41 0b10 	vmov	d0, r0, r1
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}

0800cea0 <_strtod_l>:
 800cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	b09f      	sub	sp, #124	@ 0x7c
 800cea6:	460c      	mov	r4, r1
 800cea8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ceaa:	2200      	movs	r2, #0
 800ceac:	921a      	str	r2, [sp, #104]	@ 0x68
 800ceae:	9005      	str	r0, [sp, #20]
 800ceb0:	f04f 0a00 	mov.w	sl, #0
 800ceb4:	f04f 0b00 	mov.w	fp, #0
 800ceb8:	460a      	mov	r2, r1
 800ceba:	9219      	str	r2, [sp, #100]	@ 0x64
 800cebc:	7811      	ldrb	r1, [r2, #0]
 800cebe:	292b      	cmp	r1, #43	@ 0x2b
 800cec0:	d04a      	beq.n	800cf58 <_strtod_l+0xb8>
 800cec2:	d838      	bhi.n	800cf36 <_strtod_l+0x96>
 800cec4:	290d      	cmp	r1, #13
 800cec6:	d832      	bhi.n	800cf2e <_strtod_l+0x8e>
 800cec8:	2908      	cmp	r1, #8
 800ceca:	d832      	bhi.n	800cf32 <_strtod_l+0x92>
 800cecc:	2900      	cmp	r1, #0
 800cece:	d03b      	beq.n	800cf48 <_strtod_l+0xa8>
 800ced0:	2200      	movs	r2, #0
 800ced2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ced4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ced6:	782a      	ldrb	r2, [r5, #0]
 800ced8:	2a30      	cmp	r2, #48	@ 0x30
 800ceda:	f040 80b3 	bne.w	800d044 <_strtod_l+0x1a4>
 800cede:	786a      	ldrb	r2, [r5, #1]
 800cee0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cee4:	2a58      	cmp	r2, #88	@ 0x58
 800cee6:	d16e      	bne.n	800cfc6 <_strtod_l+0x126>
 800cee8:	9302      	str	r3, [sp, #8]
 800ceea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	ab1a      	add	r3, sp, #104	@ 0x68
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	4a8e      	ldr	r2, [pc, #568]	@ (800d12c <_strtod_l+0x28c>)
 800cef4:	9805      	ldr	r0, [sp, #20]
 800cef6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cef8:	a919      	add	r1, sp, #100	@ 0x64
 800cefa:	f001 fdf7 	bl	800eaec <__gethex>
 800cefe:	f010 060f 	ands.w	r6, r0, #15
 800cf02:	4604      	mov	r4, r0
 800cf04:	d005      	beq.n	800cf12 <_strtod_l+0x72>
 800cf06:	2e06      	cmp	r6, #6
 800cf08:	d128      	bne.n	800cf5c <_strtod_l+0xbc>
 800cf0a:	3501      	adds	r5, #1
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cf10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f040 858e 	bne.w	800da36 <_strtod_l+0xb96>
 800cf1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf1c:	b1cb      	cbz	r3, 800cf52 <_strtod_l+0xb2>
 800cf1e:	4652      	mov	r2, sl
 800cf20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cf24:	ec43 2b10 	vmov	d0, r2, r3
 800cf28:	b01f      	add	sp, #124	@ 0x7c
 800cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2e:	2920      	cmp	r1, #32
 800cf30:	d1ce      	bne.n	800ced0 <_strtod_l+0x30>
 800cf32:	3201      	adds	r2, #1
 800cf34:	e7c1      	b.n	800ceba <_strtod_l+0x1a>
 800cf36:	292d      	cmp	r1, #45	@ 0x2d
 800cf38:	d1ca      	bne.n	800ced0 <_strtod_l+0x30>
 800cf3a:	2101      	movs	r1, #1
 800cf3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cf3e:	1c51      	adds	r1, r2, #1
 800cf40:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf42:	7852      	ldrb	r2, [r2, #1]
 800cf44:	2a00      	cmp	r2, #0
 800cf46:	d1c5      	bne.n	800ced4 <_strtod_l+0x34>
 800cf48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f040 8570 	bne.w	800da32 <_strtod_l+0xb92>
 800cf52:	4652      	mov	r2, sl
 800cf54:	465b      	mov	r3, fp
 800cf56:	e7e5      	b.n	800cf24 <_strtod_l+0x84>
 800cf58:	2100      	movs	r1, #0
 800cf5a:	e7ef      	b.n	800cf3c <_strtod_l+0x9c>
 800cf5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf5e:	b13a      	cbz	r2, 800cf70 <_strtod_l+0xd0>
 800cf60:	2135      	movs	r1, #53	@ 0x35
 800cf62:	a81c      	add	r0, sp, #112	@ 0x70
 800cf64:	f7ff ff3a 	bl	800cddc <__copybits>
 800cf68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf6a:	9805      	ldr	r0, [sp, #20]
 800cf6c:	f7ff fb08 	bl	800c580 <_Bfree>
 800cf70:	3e01      	subs	r6, #1
 800cf72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cf74:	2e04      	cmp	r6, #4
 800cf76:	d806      	bhi.n	800cf86 <_strtod_l+0xe6>
 800cf78:	e8df f006 	tbb	[pc, r6]
 800cf7c:	201d0314 	.word	0x201d0314
 800cf80:	14          	.byte	0x14
 800cf81:	00          	.byte	0x00
 800cf82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cf86:	05e1      	lsls	r1, r4, #23
 800cf88:	bf48      	it	mi
 800cf8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cf8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf92:	0d1b      	lsrs	r3, r3, #20
 800cf94:	051b      	lsls	r3, r3, #20
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1bb      	bne.n	800cf12 <_strtod_l+0x72>
 800cf9a:	f7fe fb13 	bl	800b5c4 <__errno>
 800cf9e:	2322      	movs	r3, #34	@ 0x22
 800cfa0:	6003      	str	r3, [r0, #0]
 800cfa2:	e7b6      	b.n	800cf12 <_strtod_l+0x72>
 800cfa4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cfa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cfac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cfb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cfb4:	e7e7      	b.n	800cf86 <_strtod_l+0xe6>
 800cfb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d134 <_strtod_l+0x294>
 800cfba:	e7e4      	b.n	800cf86 <_strtod_l+0xe6>
 800cfbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cfc0:	f04f 3aff 	mov.w	sl, #4294967295
 800cfc4:	e7df      	b.n	800cf86 <_strtod_l+0xe6>
 800cfc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfc8:	1c5a      	adds	r2, r3, #1
 800cfca:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	2b30      	cmp	r3, #48	@ 0x30
 800cfd0:	d0f9      	beq.n	800cfc6 <_strtod_l+0x126>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d09d      	beq.n	800cf12 <_strtod_l+0x72>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfdc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cfde:	2300      	movs	r3, #0
 800cfe0:	9308      	str	r3, [sp, #32]
 800cfe2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfe4:	461f      	mov	r7, r3
 800cfe6:	220a      	movs	r2, #10
 800cfe8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cfea:	7805      	ldrb	r5, [r0, #0]
 800cfec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cff0:	b2d9      	uxtb	r1, r3
 800cff2:	2909      	cmp	r1, #9
 800cff4:	d928      	bls.n	800d048 <_strtod_l+0x1a8>
 800cff6:	494e      	ldr	r1, [pc, #312]	@ (800d130 <_strtod_l+0x290>)
 800cff8:	2201      	movs	r2, #1
 800cffa:	f7fe fa2a 	bl	800b452 <strncmp>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d032      	beq.n	800d068 <_strtod_l+0x1c8>
 800d002:	2000      	movs	r0, #0
 800d004:	462a      	mov	r2, r5
 800d006:	4681      	mov	r9, r0
 800d008:	463d      	mov	r5, r7
 800d00a:	4603      	mov	r3, r0
 800d00c:	2a65      	cmp	r2, #101	@ 0x65
 800d00e:	d001      	beq.n	800d014 <_strtod_l+0x174>
 800d010:	2a45      	cmp	r2, #69	@ 0x45
 800d012:	d114      	bne.n	800d03e <_strtod_l+0x19e>
 800d014:	b91d      	cbnz	r5, 800d01e <_strtod_l+0x17e>
 800d016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d018:	4302      	orrs	r2, r0
 800d01a:	d095      	beq.n	800cf48 <_strtod_l+0xa8>
 800d01c:	2500      	movs	r5, #0
 800d01e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d020:	1c62      	adds	r2, r4, #1
 800d022:	9219      	str	r2, [sp, #100]	@ 0x64
 800d024:	7862      	ldrb	r2, [r4, #1]
 800d026:	2a2b      	cmp	r2, #43	@ 0x2b
 800d028:	d077      	beq.n	800d11a <_strtod_l+0x27a>
 800d02a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d02c:	d07b      	beq.n	800d126 <_strtod_l+0x286>
 800d02e:	f04f 0c00 	mov.w	ip, #0
 800d032:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d036:	2909      	cmp	r1, #9
 800d038:	f240 8082 	bls.w	800d140 <_strtod_l+0x2a0>
 800d03c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d03e:	f04f 0800 	mov.w	r8, #0
 800d042:	e0a2      	b.n	800d18a <_strtod_l+0x2ea>
 800d044:	2300      	movs	r3, #0
 800d046:	e7c7      	b.n	800cfd8 <_strtod_l+0x138>
 800d048:	2f08      	cmp	r7, #8
 800d04a:	bfd5      	itete	le
 800d04c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d04e:	9908      	ldrgt	r1, [sp, #32]
 800d050:	fb02 3301 	mlale	r3, r2, r1, r3
 800d054:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d058:	f100 0001 	add.w	r0, r0, #1
 800d05c:	bfd4      	ite	le
 800d05e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d060:	9308      	strgt	r3, [sp, #32]
 800d062:	3701      	adds	r7, #1
 800d064:	9019      	str	r0, [sp, #100]	@ 0x64
 800d066:	e7bf      	b.n	800cfe8 <_strtod_l+0x148>
 800d068:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d06a:	1c5a      	adds	r2, r3, #1
 800d06c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d06e:	785a      	ldrb	r2, [r3, #1]
 800d070:	b37f      	cbz	r7, 800d0d2 <_strtod_l+0x232>
 800d072:	4681      	mov	r9, r0
 800d074:	463d      	mov	r5, r7
 800d076:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d07a:	2b09      	cmp	r3, #9
 800d07c:	d912      	bls.n	800d0a4 <_strtod_l+0x204>
 800d07e:	2301      	movs	r3, #1
 800d080:	e7c4      	b.n	800d00c <_strtod_l+0x16c>
 800d082:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d084:	1c5a      	adds	r2, r3, #1
 800d086:	9219      	str	r2, [sp, #100]	@ 0x64
 800d088:	785a      	ldrb	r2, [r3, #1]
 800d08a:	3001      	adds	r0, #1
 800d08c:	2a30      	cmp	r2, #48	@ 0x30
 800d08e:	d0f8      	beq.n	800d082 <_strtod_l+0x1e2>
 800d090:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d094:	2b08      	cmp	r3, #8
 800d096:	f200 84d3 	bhi.w	800da40 <_strtod_l+0xba0>
 800d09a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d09c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d09e:	4681      	mov	r9, r0
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	4605      	mov	r5, r0
 800d0a4:	3a30      	subs	r2, #48	@ 0x30
 800d0a6:	f100 0301 	add.w	r3, r0, #1
 800d0aa:	d02a      	beq.n	800d102 <_strtod_l+0x262>
 800d0ac:	4499      	add	r9, r3
 800d0ae:	eb00 0c05 	add.w	ip, r0, r5
 800d0b2:	462b      	mov	r3, r5
 800d0b4:	210a      	movs	r1, #10
 800d0b6:	4563      	cmp	r3, ip
 800d0b8:	d10d      	bne.n	800d0d6 <_strtod_l+0x236>
 800d0ba:	1c69      	adds	r1, r5, #1
 800d0bc:	4401      	add	r1, r0
 800d0be:	4428      	add	r0, r5
 800d0c0:	2808      	cmp	r0, #8
 800d0c2:	dc16      	bgt.n	800d0f2 <_strtod_l+0x252>
 800d0c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d0c6:	230a      	movs	r3, #10
 800d0c8:	fb03 2300 	mla	r3, r3, r0, r2
 800d0cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	e018      	b.n	800d104 <_strtod_l+0x264>
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	e7da      	b.n	800d08c <_strtod_l+0x1ec>
 800d0d6:	2b08      	cmp	r3, #8
 800d0d8:	f103 0301 	add.w	r3, r3, #1
 800d0dc:	dc03      	bgt.n	800d0e6 <_strtod_l+0x246>
 800d0de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d0e0:	434e      	muls	r6, r1
 800d0e2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d0e4:	e7e7      	b.n	800d0b6 <_strtod_l+0x216>
 800d0e6:	2b10      	cmp	r3, #16
 800d0e8:	bfde      	ittt	le
 800d0ea:	9e08      	ldrle	r6, [sp, #32]
 800d0ec:	434e      	mulle	r6, r1
 800d0ee:	9608      	strle	r6, [sp, #32]
 800d0f0:	e7e1      	b.n	800d0b6 <_strtod_l+0x216>
 800d0f2:	280f      	cmp	r0, #15
 800d0f4:	dceb      	bgt.n	800d0ce <_strtod_l+0x22e>
 800d0f6:	9808      	ldr	r0, [sp, #32]
 800d0f8:	230a      	movs	r3, #10
 800d0fa:	fb03 2300 	mla	r3, r3, r0, r2
 800d0fe:	9308      	str	r3, [sp, #32]
 800d100:	e7e5      	b.n	800d0ce <_strtod_l+0x22e>
 800d102:	4629      	mov	r1, r5
 800d104:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d106:	1c50      	adds	r0, r2, #1
 800d108:	9019      	str	r0, [sp, #100]	@ 0x64
 800d10a:	7852      	ldrb	r2, [r2, #1]
 800d10c:	4618      	mov	r0, r3
 800d10e:	460d      	mov	r5, r1
 800d110:	e7b1      	b.n	800d076 <_strtod_l+0x1d6>
 800d112:	f04f 0900 	mov.w	r9, #0
 800d116:	2301      	movs	r3, #1
 800d118:	e77d      	b.n	800d016 <_strtod_l+0x176>
 800d11a:	f04f 0c00 	mov.w	ip, #0
 800d11e:	1ca2      	adds	r2, r4, #2
 800d120:	9219      	str	r2, [sp, #100]	@ 0x64
 800d122:	78a2      	ldrb	r2, [r4, #2]
 800d124:	e785      	b.n	800d032 <_strtod_l+0x192>
 800d126:	f04f 0c01 	mov.w	ip, #1
 800d12a:	e7f8      	b.n	800d11e <_strtod_l+0x27e>
 800d12c:	08010170 	.word	0x08010170
 800d130:	08010158 	.word	0x08010158
 800d134:	7ff00000 	.word	0x7ff00000
 800d138:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d13a:	1c51      	adds	r1, r2, #1
 800d13c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d13e:	7852      	ldrb	r2, [r2, #1]
 800d140:	2a30      	cmp	r2, #48	@ 0x30
 800d142:	d0f9      	beq.n	800d138 <_strtod_l+0x298>
 800d144:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d148:	2908      	cmp	r1, #8
 800d14a:	f63f af78 	bhi.w	800d03e <_strtod_l+0x19e>
 800d14e:	3a30      	subs	r2, #48	@ 0x30
 800d150:	920e      	str	r2, [sp, #56]	@ 0x38
 800d152:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d154:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d156:	f04f 080a 	mov.w	r8, #10
 800d15a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d15c:	1c56      	adds	r6, r2, #1
 800d15e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d160:	7852      	ldrb	r2, [r2, #1]
 800d162:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d166:	f1be 0f09 	cmp.w	lr, #9
 800d16a:	d939      	bls.n	800d1e0 <_strtod_l+0x340>
 800d16c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d16e:	1a76      	subs	r6, r6, r1
 800d170:	2e08      	cmp	r6, #8
 800d172:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d176:	dc03      	bgt.n	800d180 <_strtod_l+0x2e0>
 800d178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d17a:	4588      	cmp	r8, r1
 800d17c:	bfa8      	it	ge
 800d17e:	4688      	movge	r8, r1
 800d180:	f1bc 0f00 	cmp.w	ip, #0
 800d184:	d001      	beq.n	800d18a <_strtod_l+0x2ea>
 800d186:	f1c8 0800 	rsb	r8, r8, #0
 800d18a:	2d00      	cmp	r5, #0
 800d18c:	d14e      	bne.n	800d22c <_strtod_l+0x38c>
 800d18e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d190:	4308      	orrs	r0, r1
 800d192:	f47f aebe 	bne.w	800cf12 <_strtod_l+0x72>
 800d196:	2b00      	cmp	r3, #0
 800d198:	f47f aed6 	bne.w	800cf48 <_strtod_l+0xa8>
 800d19c:	2a69      	cmp	r2, #105	@ 0x69
 800d19e:	d028      	beq.n	800d1f2 <_strtod_l+0x352>
 800d1a0:	dc25      	bgt.n	800d1ee <_strtod_l+0x34e>
 800d1a2:	2a49      	cmp	r2, #73	@ 0x49
 800d1a4:	d025      	beq.n	800d1f2 <_strtod_l+0x352>
 800d1a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800d1a8:	f47f aece 	bne.w	800cf48 <_strtod_l+0xa8>
 800d1ac:	499b      	ldr	r1, [pc, #620]	@ (800d41c <_strtod_l+0x57c>)
 800d1ae:	a819      	add	r0, sp, #100	@ 0x64
 800d1b0:	f001 febe 	bl	800ef30 <__match>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	f43f aec7 	beq.w	800cf48 <_strtod_l+0xa8>
 800d1ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b28      	cmp	r3, #40	@ 0x28
 800d1c0:	d12e      	bne.n	800d220 <_strtod_l+0x380>
 800d1c2:	4997      	ldr	r1, [pc, #604]	@ (800d420 <_strtod_l+0x580>)
 800d1c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d1c6:	a819      	add	r0, sp, #100	@ 0x64
 800d1c8:	f001 fec6 	bl	800ef58 <__hexnan>
 800d1cc:	2805      	cmp	r0, #5
 800d1ce:	d127      	bne.n	800d220 <_strtod_l+0x380>
 800d1d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d1d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d1d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d1da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d1de:	e698      	b.n	800cf12 <_strtod_l+0x72>
 800d1e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1e2:	fb08 2101 	mla	r1, r8, r1, r2
 800d1e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d1ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1ec:	e7b5      	b.n	800d15a <_strtod_l+0x2ba>
 800d1ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800d1f0:	e7da      	b.n	800d1a8 <_strtod_l+0x308>
 800d1f2:	498c      	ldr	r1, [pc, #560]	@ (800d424 <_strtod_l+0x584>)
 800d1f4:	a819      	add	r0, sp, #100	@ 0x64
 800d1f6:	f001 fe9b 	bl	800ef30 <__match>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	f43f aea4 	beq.w	800cf48 <_strtod_l+0xa8>
 800d200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d202:	4989      	ldr	r1, [pc, #548]	@ (800d428 <_strtod_l+0x588>)
 800d204:	3b01      	subs	r3, #1
 800d206:	a819      	add	r0, sp, #100	@ 0x64
 800d208:	9319      	str	r3, [sp, #100]	@ 0x64
 800d20a:	f001 fe91 	bl	800ef30 <__match>
 800d20e:	b910      	cbnz	r0, 800d216 <_strtod_l+0x376>
 800d210:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d212:	3301      	adds	r3, #1
 800d214:	9319      	str	r3, [sp, #100]	@ 0x64
 800d216:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d438 <_strtod_l+0x598>
 800d21a:	f04f 0a00 	mov.w	sl, #0
 800d21e:	e678      	b.n	800cf12 <_strtod_l+0x72>
 800d220:	4882      	ldr	r0, [pc, #520]	@ (800d42c <_strtod_l+0x58c>)
 800d222:	f001 fbd9 	bl	800e9d8 <nan>
 800d226:	ec5b ab10 	vmov	sl, fp, d0
 800d22a:	e672      	b.n	800cf12 <_strtod_l+0x72>
 800d22c:	eba8 0309 	sub.w	r3, r8, r9
 800d230:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d232:	9309      	str	r3, [sp, #36]	@ 0x24
 800d234:	2f00      	cmp	r7, #0
 800d236:	bf08      	it	eq
 800d238:	462f      	moveq	r7, r5
 800d23a:	2d10      	cmp	r5, #16
 800d23c:	462c      	mov	r4, r5
 800d23e:	bfa8      	it	ge
 800d240:	2410      	movge	r4, #16
 800d242:	f7f3 f967 	bl	8000514 <__aeabi_ui2d>
 800d246:	2d09      	cmp	r5, #9
 800d248:	4682      	mov	sl, r0
 800d24a:	468b      	mov	fp, r1
 800d24c:	dc13      	bgt.n	800d276 <_strtod_l+0x3d6>
 800d24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d250:	2b00      	cmp	r3, #0
 800d252:	f43f ae5e 	beq.w	800cf12 <_strtod_l+0x72>
 800d256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d258:	dd78      	ble.n	800d34c <_strtod_l+0x4ac>
 800d25a:	2b16      	cmp	r3, #22
 800d25c:	dc5f      	bgt.n	800d31e <_strtod_l+0x47e>
 800d25e:	4974      	ldr	r1, [pc, #464]	@ (800d430 <_strtod_l+0x590>)
 800d260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d268:	4652      	mov	r2, sl
 800d26a:	465b      	mov	r3, fp
 800d26c:	f7f3 f9cc 	bl	8000608 <__aeabi_dmul>
 800d270:	4682      	mov	sl, r0
 800d272:	468b      	mov	fp, r1
 800d274:	e64d      	b.n	800cf12 <_strtod_l+0x72>
 800d276:	4b6e      	ldr	r3, [pc, #440]	@ (800d430 <_strtod_l+0x590>)
 800d278:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d27c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d280:	f7f3 f9c2 	bl	8000608 <__aeabi_dmul>
 800d284:	4682      	mov	sl, r0
 800d286:	9808      	ldr	r0, [sp, #32]
 800d288:	468b      	mov	fp, r1
 800d28a:	f7f3 f943 	bl	8000514 <__aeabi_ui2d>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4650      	mov	r0, sl
 800d294:	4659      	mov	r1, fp
 800d296:	f7f3 f801 	bl	800029c <__adddf3>
 800d29a:	2d0f      	cmp	r5, #15
 800d29c:	4682      	mov	sl, r0
 800d29e:	468b      	mov	fp, r1
 800d2a0:	ddd5      	ble.n	800d24e <_strtod_l+0x3ae>
 800d2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a4:	1b2c      	subs	r4, r5, r4
 800d2a6:	441c      	add	r4, r3
 800d2a8:	2c00      	cmp	r4, #0
 800d2aa:	f340 8096 	ble.w	800d3da <_strtod_l+0x53a>
 800d2ae:	f014 030f 	ands.w	r3, r4, #15
 800d2b2:	d00a      	beq.n	800d2ca <_strtod_l+0x42a>
 800d2b4:	495e      	ldr	r1, [pc, #376]	@ (800d430 <_strtod_l+0x590>)
 800d2b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2ba:	4652      	mov	r2, sl
 800d2bc:	465b      	mov	r3, fp
 800d2be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2c2:	f7f3 f9a1 	bl	8000608 <__aeabi_dmul>
 800d2c6:	4682      	mov	sl, r0
 800d2c8:	468b      	mov	fp, r1
 800d2ca:	f034 040f 	bics.w	r4, r4, #15
 800d2ce:	d073      	beq.n	800d3b8 <_strtod_l+0x518>
 800d2d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d2d4:	dd48      	ble.n	800d368 <_strtod_l+0x4c8>
 800d2d6:	2400      	movs	r4, #0
 800d2d8:	46a0      	mov	r8, r4
 800d2da:	940a      	str	r4, [sp, #40]	@ 0x28
 800d2dc:	46a1      	mov	r9, r4
 800d2de:	9a05      	ldr	r2, [sp, #20]
 800d2e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d438 <_strtod_l+0x598>
 800d2e4:	2322      	movs	r3, #34	@ 0x22
 800d2e6:	6013      	str	r3, [r2, #0]
 800d2e8:	f04f 0a00 	mov.w	sl, #0
 800d2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f43f ae0f 	beq.w	800cf12 <_strtod_l+0x72>
 800d2f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2f6:	9805      	ldr	r0, [sp, #20]
 800d2f8:	f7ff f942 	bl	800c580 <_Bfree>
 800d2fc:	9805      	ldr	r0, [sp, #20]
 800d2fe:	4649      	mov	r1, r9
 800d300:	f7ff f93e 	bl	800c580 <_Bfree>
 800d304:	9805      	ldr	r0, [sp, #20]
 800d306:	4641      	mov	r1, r8
 800d308:	f7ff f93a 	bl	800c580 <_Bfree>
 800d30c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d30e:	9805      	ldr	r0, [sp, #20]
 800d310:	f7ff f936 	bl	800c580 <_Bfree>
 800d314:	9805      	ldr	r0, [sp, #20]
 800d316:	4621      	mov	r1, r4
 800d318:	f7ff f932 	bl	800c580 <_Bfree>
 800d31c:	e5f9      	b.n	800cf12 <_strtod_l+0x72>
 800d31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d320:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d324:	4293      	cmp	r3, r2
 800d326:	dbbc      	blt.n	800d2a2 <_strtod_l+0x402>
 800d328:	4c41      	ldr	r4, [pc, #260]	@ (800d430 <_strtod_l+0x590>)
 800d32a:	f1c5 050f 	rsb	r5, r5, #15
 800d32e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d332:	4652      	mov	r2, sl
 800d334:	465b      	mov	r3, fp
 800d336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d33a:	f7f3 f965 	bl	8000608 <__aeabi_dmul>
 800d33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d340:	1b5d      	subs	r5, r3, r5
 800d342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d346:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d34a:	e78f      	b.n	800d26c <_strtod_l+0x3cc>
 800d34c:	3316      	adds	r3, #22
 800d34e:	dba8      	blt.n	800d2a2 <_strtod_l+0x402>
 800d350:	4b37      	ldr	r3, [pc, #220]	@ (800d430 <_strtod_l+0x590>)
 800d352:	eba9 0808 	sub.w	r8, r9, r8
 800d356:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d35a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d35e:	4650      	mov	r0, sl
 800d360:	4659      	mov	r1, fp
 800d362:	f7f3 fa7b 	bl	800085c <__aeabi_ddiv>
 800d366:	e783      	b.n	800d270 <_strtod_l+0x3d0>
 800d368:	4b32      	ldr	r3, [pc, #200]	@ (800d434 <_strtod_l+0x594>)
 800d36a:	9308      	str	r3, [sp, #32]
 800d36c:	2300      	movs	r3, #0
 800d36e:	1124      	asrs	r4, r4, #4
 800d370:	4650      	mov	r0, sl
 800d372:	4659      	mov	r1, fp
 800d374:	461e      	mov	r6, r3
 800d376:	2c01      	cmp	r4, #1
 800d378:	dc21      	bgt.n	800d3be <_strtod_l+0x51e>
 800d37a:	b10b      	cbz	r3, 800d380 <_strtod_l+0x4e0>
 800d37c:	4682      	mov	sl, r0
 800d37e:	468b      	mov	fp, r1
 800d380:	492c      	ldr	r1, [pc, #176]	@ (800d434 <_strtod_l+0x594>)
 800d382:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d386:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d38a:	4652      	mov	r2, sl
 800d38c:	465b      	mov	r3, fp
 800d38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d392:	f7f3 f939 	bl	8000608 <__aeabi_dmul>
 800d396:	4b28      	ldr	r3, [pc, #160]	@ (800d438 <_strtod_l+0x598>)
 800d398:	460a      	mov	r2, r1
 800d39a:	400b      	ands	r3, r1
 800d39c:	4927      	ldr	r1, [pc, #156]	@ (800d43c <_strtod_l+0x59c>)
 800d39e:	428b      	cmp	r3, r1
 800d3a0:	4682      	mov	sl, r0
 800d3a2:	d898      	bhi.n	800d2d6 <_strtod_l+0x436>
 800d3a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d3a8:	428b      	cmp	r3, r1
 800d3aa:	bf86      	itte	hi
 800d3ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d440 <_strtod_l+0x5a0>
 800d3b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800d3b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	9308      	str	r3, [sp, #32]
 800d3bc:	e07a      	b.n	800d4b4 <_strtod_l+0x614>
 800d3be:	07e2      	lsls	r2, r4, #31
 800d3c0:	d505      	bpl.n	800d3ce <_strtod_l+0x52e>
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f7f3 f91e 	bl	8000608 <__aeabi_dmul>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	9a08      	ldr	r2, [sp, #32]
 800d3d0:	3208      	adds	r2, #8
 800d3d2:	3601      	adds	r6, #1
 800d3d4:	1064      	asrs	r4, r4, #1
 800d3d6:	9208      	str	r2, [sp, #32]
 800d3d8:	e7cd      	b.n	800d376 <_strtod_l+0x4d6>
 800d3da:	d0ed      	beq.n	800d3b8 <_strtod_l+0x518>
 800d3dc:	4264      	negs	r4, r4
 800d3de:	f014 020f 	ands.w	r2, r4, #15
 800d3e2:	d00a      	beq.n	800d3fa <_strtod_l+0x55a>
 800d3e4:	4b12      	ldr	r3, [pc, #72]	@ (800d430 <_strtod_l+0x590>)
 800d3e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3ea:	4650      	mov	r0, sl
 800d3ec:	4659      	mov	r1, fp
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f7f3 fa33 	bl	800085c <__aeabi_ddiv>
 800d3f6:	4682      	mov	sl, r0
 800d3f8:	468b      	mov	fp, r1
 800d3fa:	1124      	asrs	r4, r4, #4
 800d3fc:	d0dc      	beq.n	800d3b8 <_strtod_l+0x518>
 800d3fe:	2c1f      	cmp	r4, #31
 800d400:	dd20      	ble.n	800d444 <_strtod_l+0x5a4>
 800d402:	2400      	movs	r4, #0
 800d404:	46a0      	mov	r8, r4
 800d406:	940a      	str	r4, [sp, #40]	@ 0x28
 800d408:	46a1      	mov	r9, r4
 800d40a:	9a05      	ldr	r2, [sp, #20]
 800d40c:	2322      	movs	r3, #34	@ 0x22
 800d40e:	f04f 0a00 	mov.w	sl, #0
 800d412:	f04f 0b00 	mov.w	fp, #0
 800d416:	6013      	str	r3, [r2, #0]
 800d418:	e768      	b.n	800d2ec <_strtod_l+0x44c>
 800d41a:	bf00      	nop
 800d41c:	0800feb2 	.word	0x0800feb2
 800d420:	0801015c 	.word	0x0801015c
 800d424:	0800feaa 	.word	0x0800feaa
 800d428:	0800ff8c 	.word	0x0800ff8c
 800d42c:	0800ff88 	.word	0x0800ff88
 800d430:	08010090 	.word	0x08010090
 800d434:	08010068 	.word	0x08010068
 800d438:	7ff00000 	.word	0x7ff00000
 800d43c:	7ca00000 	.word	0x7ca00000
 800d440:	7fefffff 	.word	0x7fefffff
 800d444:	f014 0310 	ands.w	r3, r4, #16
 800d448:	bf18      	it	ne
 800d44a:	236a      	movne	r3, #106	@ 0x6a
 800d44c:	4ea9      	ldr	r6, [pc, #676]	@ (800d6f4 <_strtod_l+0x854>)
 800d44e:	9308      	str	r3, [sp, #32]
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	2300      	movs	r3, #0
 800d456:	07e2      	lsls	r2, r4, #31
 800d458:	d504      	bpl.n	800d464 <_strtod_l+0x5c4>
 800d45a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d45e:	f7f3 f8d3 	bl	8000608 <__aeabi_dmul>
 800d462:	2301      	movs	r3, #1
 800d464:	1064      	asrs	r4, r4, #1
 800d466:	f106 0608 	add.w	r6, r6, #8
 800d46a:	d1f4      	bne.n	800d456 <_strtod_l+0x5b6>
 800d46c:	b10b      	cbz	r3, 800d472 <_strtod_l+0x5d2>
 800d46e:	4682      	mov	sl, r0
 800d470:	468b      	mov	fp, r1
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	b1b3      	cbz	r3, 800d4a4 <_strtod_l+0x604>
 800d476:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d47a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d47e:	2b00      	cmp	r3, #0
 800d480:	4659      	mov	r1, fp
 800d482:	dd0f      	ble.n	800d4a4 <_strtod_l+0x604>
 800d484:	2b1f      	cmp	r3, #31
 800d486:	dd55      	ble.n	800d534 <_strtod_l+0x694>
 800d488:	2b34      	cmp	r3, #52	@ 0x34
 800d48a:	bfde      	ittt	le
 800d48c:	f04f 33ff 	movle.w	r3, #4294967295
 800d490:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d494:	4093      	lslle	r3, r2
 800d496:	f04f 0a00 	mov.w	sl, #0
 800d49a:	bfcc      	ite	gt
 800d49c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d4a0:	ea03 0b01 	andle.w	fp, r3, r1
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	4650      	mov	r0, sl
 800d4aa:	4659      	mov	r1, fp
 800d4ac:	f7f3 fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d1a6      	bne.n	800d402 <_strtod_l+0x562>
 800d4b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d4ba:	9805      	ldr	r0, [sp, #20]
 800d4bc:	462b      	mov	r3, r5
 800d4be:	463a      	mov	r2, r7
 800d4c0:	f7ff f8c6 	bl	800c650 <__s2b>
 800d4c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f43f af05 	beq.w	800d2d6 <_strtod_l+0x436>
 800d4cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	eba9 0308 	sub.w	r3, r9, r8
 800d4d4:	bfa8      	it	ge
 800d4d6:	2300      	movge	r3, #0
 800d4d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d4da:	2400      	movs	r4, #0
 800d4dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d4e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d4e2:	46a0      	mov	r8, r4
 800d4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4e6:	9805      	ldr	r0, [sp, #20]
 800d4e8:	6859      	ldr	r1, [r3, #4]
 800d4ea:	f7ff f809 	bl	800c500 <_Balloc>
 800d4ee:	4681      	mov	r9, r0
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	f43f aef4 	beq.w	800d2de <_strtod_l+0x43e>
 800d4f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4f8:	691a      	ldr	r2, [r3, #16]
 800d4fa:	3202      	adds	r2, #2
 800d4fc:	f103 010c 	add.w	r1, r3, #12
 800d500:	0092      	lsls	r2, r2, #2
 800d502:	300c      	adds	r0, #12
 800d504:	f001 fa5a 	bl	800e9bc <memcpy>
 800d508:	ec4b ab10 	vmov	d0, sl, fp
 800d50c:	9805      	ldr	r0, [sp, #20]
 800d50e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d510:	a91b      	add	r1, sp, #108	@ 0x6c
 800d512:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d516:	f7ff fbd7 	bl	800ccc8 <__d2b>
 800d51a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d51c:	2800      	cmp	r0, #0
 800d51e:	f43f aede 	beq.w	800d2de <_strtod_l+0x43e>
 800d522:	9805      	ldr	r0, [sp, #20]
 800d524:	2101      	movs	r1, #1
 800d526:	f7ff f929 	bl	800c77c <__i2b>
 800d52a:	4680      	mov	r8, r0
 800d52c:	b948      	cbnz	r0, 800d542 <_strtod_l+0x6a2>
 800d52e:	f04f 0800 	mov.w	r8, #0
 800d532:	e6d4      	b.n	800d2de <_strtod_l+0x43e>
 800d534:	f04f 32ff 	mov.w	r2, #4294967295
 800d538:	fa02 f303 	lsl.w	r3, r2, r3
 800d53c:	ea03 0a0a 	and.w	sl, r3, sl
 800d540:	e7b0      	b.n	800d4a4 <_strtod_l+0x604>
 800d542:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d544:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d546:	2d00      	cmp	r5, #0
 800d548:	bfab      	itete	ge
 800d54a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d54c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d54e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d550:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d552:	bfac      	ite	ge
 800d554:	18ef      	addge	r7, r5, r3
 800d556:	1b5e      	sublt	r6, r3, r5
 800d558:	9b08      	ldr	r3, [sp, #32]
 800d55a:	1aed      	subs	r5, r5, r3
 800d55c:	4415      	add	r5, r2
 800d55e:	4b66      	ldr	r3, [pc, #408]	@ (800d6f8 <_strtod_l+0x858>)
 800d560:	3d01      	subs	r5, #1
 800d562:	429d      	cmp	r5, r3
 800d564:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d568:	da50      	bge.n	800d60c <_strtod_l+0x76c>
 800d56a:	1b5b      	subs	r3, r3, r5
 800d56c:	2b1f      	cmp	r3, #31
 800d56e:	eba2 0203 	sub.w	r2, r2, r3
 800d572:	f04f 0101 	mov.w	r1, #1
 800d576:	dc3d      	bgt.n	800d5f4 <_strtod_l+0x754>
 800d578:	fa01 f303 	lsl.w	r3, r1, r3
 800d57c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d57e:	2300      	movs	r3, #0
 800d580:	9310      	str	r3, [sp, #64]	@ 0x40
 800d582:	18bd      	adds	r5, r7, r2
 800d584:	9b08      	ldr	r3, [sp, #32]
 800d586:	42af      	cmp	r7, r5
 800d588:	4416      	add	r6, r2
 800d58a:	441e      	add	r6, r3
 800d58c:	463b      	mov	r3, r7
 800d58e:	bfa8      	it	ge
 800d590:	462b      	movge	r3, r5
 800d592:	42b3      	cmp	r3, r6
 800d594:	bfa8      	it	ge
 800d596:	4633      	movge	r3, r6
 800d598:	2b00      	cmp	r3, #0
 800d59a:	bfc2      	ittt	gt
 800d59c:	1aed      	subgt	r5, r5, r3
 800d59e:	1af6      	subgt	r6, r6, r3
 800d5a0:	1aff      	subgt	r7, r7, r3
 800d5a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	dd16      	ble.n	800d5d6 <_strtod_l+0x736>
 800d5a8:	4641      	mov	r1, r8
 800d5aa:	9805      	ldr	r0, [sp, #20]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	f7ff f9a5 	bl	800c8fc <__pow5mult>
 800d5b2:	4680      	mov	r8, r0
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d0ba      	beq.n	800d52e <_strtod_l+0x68e>
 800d5b8:	4601      	mov	r1, r0
 800d5ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d5bc:	9805      	ldr	r0, [sp, #20]
 800d5be:	f7ff f8f3 	bl	800c7a8 <__multiply>
 800d5c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	f43f ae8a 	beq.w	800d2de <_strtod_l+0x43e>
 800d5ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5cc:	9805      	ldr	r0, [sp, #20]
 800d5ce:	f7fe ffd7 	bl	800c580 <_Bfree>
 800d5d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5d6:	2d00      	cmp	r5, #0
 800d5d8:	dc1d      	bgt.n	800d616 <_strtod_l+0x776>
 800d5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	dd23      	ble.n	800d628 <_strtod_l+0x788>
 800d5e0:	4649      	mov	r1, r9
 800d5e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d5e4:	9805      	ldr	r0, [sp, #20]
 800d5e6:	f7ff f989 	bl	800c8fc <__pow5mult>
 800d5ea:	4681      	mov	r9, r0
 800d5ec:	b9e0      	cbnz	r0, 800d628 <_strtod_l+0x788>
 800d5ee:	f04f 0900 	mov.w	r9, #0
 800d5f2:	e674      	b.n	800d2de <_strtod_l+0x43e>
 800d5f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d5f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d5fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d600:	35e2      	adds	r5, #226	@ 0xe2
 800d602:	fa01 f305 	lsl.w	r3, r1, r5
 800d606:	9310      	str	r3, [sp, #64]	@ 0x40
 800d608:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d60a:	e7ba      	b.n	800d582 <_strtod_l+0x6e2>
 800d60c:	2300      	movs	r3, #0
 800d60e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d610:	2301      	movs	r3, #1
 800d612:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d614:	e7b5      	b.n	800d582 <_strtod_l+0x6e2>
 800d616:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d618:	9805      	ldr	r0, [sp, #20]
 800d61a:	462a      	mov	r2, r5
 800d61c:	f7ff f9c8 	bl	800c9b0 <__lshift>
 800d620:	901a      	str	r0, [sp, #104]	@ 0x68
 800d622:	2800      	cmp	r0, #0
 800d624:	d1d9      	bne.n	800d5da <_strtod_l+0x73a>
 800d626:	e65a      	b.n	800d2de <_strtod_l+0x43e>
 800d628:	2e00      	cmp	r6, #0
 800d62a:	dd07      	ble.n	800d63c <_strtod_l+0x79c>
 800d62c:	4649      	mov	r1, r9
 800d62e:	9805      	ldr	r0, [sp, #20]
 800d630:	4632      	mov	r2, r6
 800d632:	f7ff f9bd 	bl	800c9b0 <__lshift>
 800d636:	4681      	mov	r9, r0
 800d638:	2800      	cmp	r0, #0
 800d63a:	d0d8      	beq.n	800d5ee <_strtod_l+0x74e>
 800d63c:	2f00      	cmp	r7, #0
 800d63e:	dd08      	ble.n	800d652 <_strtod_l+0x7b2>
 800d640:	4641      	mov	r1, r8
 800d642:	9805      	ldr	r0, [sp, #20]
 800d644:	463a      	mov	r2, r7
 800d646:	f7ff f9b3 	bl	800c9b0 <__lshift>
 800d64a:	4680      	mov	r8, r0
 800d64c:	2800      	cmp	r0, #0
 800d64e:	f43f ae46 	beq.w	800d2de <_strtod_l+0x43e>
 800d652:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d654:	9805      	ldr	r0, [sp, #20]
 800d656:	464a      	mov	r2, r9
 800d658:	f7ff fa32 	bl	800cac0 <__mdiff>
 800d65c:	4604      	mov	r4, r0
 800d65e:	2800      	cmp	r0, #0
 800d660:	f43f ae3d 	beq.w	800d2de <_strtod_l+0x43e>
 800d664:	68c3      	ldr	r3, [r0, #12]
 800d666:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d668:	2300      	movs	r3, #0
 800d66a:	60c3      	str	r3, [r0, #12]
 800d66c:	4641      	mov	r1, r8
 800d66e:	f7ff fa0b 	bl	800ca88 <__mcmp>
 800d672:	2800      	cmp	r0, #0
 800d674:	da46      	bge.n	800d704 <_strtod_l+0x864>
 800d676:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d678:	ea53 030a 	orrs.w	r3, r3, sl
 800d67c:	d16c      	bne.n	800d758 <_strtod_l+0x8b8>
 800d67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d682:	2b00      	cmp	r3, #0
 800d684:	d168      	bne.n	800d758 <_strtod_l+0x8b8>
 800d686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d68a:	0d1b      	lsrs	r3, r3, #20
 800d68c:	051b      	lsls	r3, r3, #20
 800d68e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d692:	d961      	bls.n	800d758 <_strtod_l+0x8b8>
 800d694:	6963      	ldr	r3, [r4, #20]
 800d696:	b913      	cbnz	r3, 800d69e <_strtod_l+0x7fe>
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	dd5c      	ble.n	800d758 <_strtod_l+0x8b8>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	9805      	ldr	r0, [sp, #20]
 800d6a4:	f7ff f984 	bl	800c9b0 <__lshift>
 800d6a8:	4641      	mov	r1, r8
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	f7ff f9ec 	bl	800ca88 <__mcmp>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	dd51      	ble.n	800d758 <_strtod_l+0x8b8>
 800d6b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6b8:	9a08      	ldr	r2, [sp, #32]
 800d6ba:	0d1b      	lsrs	r3, r3, #20
 800d6bc:	051b      	lsls	r3, r3, #20
 800d6be:	2a00      	cmp	r2, #0
 800d6c0:	d06b      	beq.n	800d79a <_strtod_l+0x8fa>
 800d6c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d6c6:	d868      	bhi.n	800d79a <_strtod_l+0x8fa>
 800d6c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d6cc:	f67f ae9d 	bls.w	800d40a <_strtod_l+0x56a>
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6fc <_strtod_l+0x85c>)
 800d6d2:	4650      	mov	r0, sl
 800d6d4:	4659      	mov	r1, fp
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f7f2 ff96 	bl	8000608 <__aeabi_dmul>
 800d6dc:	4b08      	ldr	r3, [pc, #32]	@ (800d700 <_strtod_l+0x860>)
 800d6de:	400b      	ands	r3, r1
 800d6e0:	4682      	mov	sl, r0
 800d6e2:	468b      	mov	fp, r1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f47f ae05 	bne.w	800d2f4 <_strtod_l+0x454>
 800d6ea:	9a05      	ldr	r2, [sp, #20]
 800d6ec:	2322      	movs	r3, #34	@ 0x22
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	e600      	b.n	800d2f4 <_strtod_l+0x454>
 800d6f2:	bf00      	nop
 800d6f4:	08010188 	.word	0x08010188
 800d6f8:	fffffc02 	.word	0xfffffc02
 800d6fc:	39500000 	.word	0x39500000
 800d700:	7ff00000 	.word	0x7ff00000
 800d704:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d708:	d165      	bne.n	800d7d6 <_strtod_l+0x936>
 800d70a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d710:	b35a      	cbz	r2, 800d76a <_strtod_l+0x8ca>
 800d712:	4a9f      	ldr	r2, [pc, #636]	@ (800d990 <_strtod_l+0xaf0>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d12b      	bne.n	800d770 <_strtod_l+0x8d0>
 800d718:	9b08      	ldr	r3, [sp, #32]
 800d71a:	4651      	mov	r1, sl
 800d71c:	b303      	cbz	r3, 800d760 <_strtod_l+0x8c0>
 800d71e:	4b9d      	ldr	r3, [pc, #628]	@ (800d994 <_strtod_l+0xaf4>)
 800d720:	465a      	mov	r2, fp
 800d722:	4013      	ands	r3, r2
 800d724:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d728:	f04f 32ff 	mov.w	r2, #4294967295
 800d72c:	d81b      	bhi.n	800d766 <_strtod_l+0x8c6>
 800d72e:	0d1b      	lsrs	r3, r3, #20
 800d730:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d734:	fa02 f303 	lsl.w	r3, r2, r3
 800d738:	4299      	cmp	r1, r3
 800d73a:	d119      	bne.n	800d770 <_strtod_l+0x8d0>
 800d73c:	4b96      	ldr	r3, [pc, #600]	@ (800d998 <_strtod_l+0xaf8>)
 800d73e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d740:	429a      	cmp	r2, r3
 800d742:	d102      	bne.n	800d74a <_strtod_l+0x8aa>
 800d744:	3101      	adds	r1, #1
 800d746:	f43f adca 	beq.w	800d2de <_strtod_l+0x43e>
 800d74a:	4b92      	ldr	r3, [pc, #584]	@ (800d994 <_strtod_l+0xaf4>)
 800d74c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d74e:	401a      	ands	r2, r3
 800d750:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d754:	f04f 0a00 	mov.w	sl, #0
 800d758:	9b08      	ldr	r3, [sp, #32]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1b8      	bne.n	800d6d0 <_strtod_l+0x830>
 800d75e:	e5c9      	b.n	800d2f4 <_strtod_l+0x454>
 800d760:	f04f 33ff 	mov.w	r3, #4294967295
 800d764:	e7e8      	b.n	800d738 <_strtod_l+0x898>
 800d766:	4613      	mov	r3, r2
 800d768:	e7e6      	b.n	800d738 <_strtod_l+0x898>
 800d76a:	ea53 030a 	orrs.w	r3, r3, sl
 800d76e:	d0a1      	beq.n	800d6b4 <_strtod_l+0x814>
 800d770:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d772:	b1db      	cbz	r3, 800d7ac <_strtod_l+0x90c>
 800d774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d776:	4213      	tst	r3, r2
 800d778:	d0ee      	beq.n	800d758 <_strtod_l+0x8b8>
 800d77a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d77c:	9a08      	ldr	r2, [sp, #32]
 800d77e:	4650      	mov	r0, sl
 800d780:	4659      	mov	r1, fp
 800d782:	b1bb      	cbz	r3, 800d7b4 <_strtod_l+0x914>
 800d784:	f7ff fb6e 	bl	800ce64 <sulp>
 800d788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d78c:	ec53 2b10 	vmov	r2, r3, d0
 800d790:	f7f2 fd84 	bl	800029c <__adddf3>
 800d794:	4682      	mov	sl, r0
 800d796:	468b      	mov	fp, r1
 800d798:	e7de      	b.n	800d758 <_strtod_l+0x8b8>
 800d79a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d79e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d7a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d7a6:	f04f 3aff 	mov.w	sl, #4294967295
 800d7aa:	e7d5      	b.n	800d758 <_strtod_l+0x8b8>
 800d7ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d7ae:	ea13 0f0a 	tst.w	r3, sl
 800d7b2:	e7e1      	b.n	800d778 <_strtod_l+0x8d8>
 800d7b4:	f7ff fb56 	bl	800ce64 <sulp>
 800d7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7bc:	ec53 2b10 	vmov	r2, r3, d0
 800d7c0:	f7f2 fd6a 	bl	8000298 <__aeabi_dsub>
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	4682      	mov	sl, r0
 800d7ca:	468b      	mov	fp, r1
 800d7cc:	f7f3 f984 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d0c1      	beq.n	800d758 <_strtod_l+0x8b8>
 800d7d4:	e619      	b.n	800d40a <_strtod_l+0x56a>
 800d7d6:	4641      	mov	r1, r8
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f7ff facd 	bl	800cd78 <__ratio>
 800d7de:	ec57 6b10 	vmov	r6, r7, d0
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	4639      	mov	r1, r7
 800d7ec:	f7f3 f988 	bl	8000b00 <__aeabi_dcmple>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d06f      	beq.n	800d8d4 <_strtod_l+0xa34>
 800d7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d17a      	bne.n	800d8f0 <_strtod_l+0xa50>
 800d7fa:	f1ba 0f00 	cmp.w	sl, #0
 800d7fe:	d158      	bne.n	800d8b2 <_strtod_l+0xa12>
 800d800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d806:	2b00      	cmp	r3, #0
 800d808:	d15a      	bne.n	800d8c0 <_strtod_l+0xa20>
 800d80a:	4b64      	ldr	r3, [pc, #400]	@ (800d99c <_strtod_l+0xafc>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	4630      	mov	r0, r6
 800d810:	4639      	mov	r1, r7
 800d812:	f7f3 f96b 	bl	8000aec <__aeabi_dcmplt>
 800d816:	2800      	cmp	r0, #0
 800d818:	d159      	bne.n	800d8ce <_strtod_l+0xa2e>
 800d81a:	4630      	mov	r0, r6
 800d81c:	4639      	mov	r1, r7
 800d81e:	4b60      	ldr	r3, [pc, #384]	@ (800d9a0 <_strtod_l+0xb00>)
 800d820:	2200      	movs	r2, #0
 800d822:	f7f2 fef1 	bl	8000608 <__aeabi_dmul>
 800d826:	4606      	mov	r6, r0
 800d828:	460f      	mov	r7, r1
 800d82a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d82e:	9606      	str	r6, [sp, #24]
 800d830:	9307      	str	r3, [sp, #28]
 800d832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d836:	4d57      	ldr	r5, [pc, #348]	@ (800d994 <_strtod_l+0xaf4>)
 800d838:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d83c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d83e:	401d      	ands	r5, r3
 800d840:	4b58      	ldr	r3, [pc, #352]	@ (800d9a4 <_strtod_l+0xb04>)
 800d842:	429d      	cmp	r5, r3
 800d844:	f040 80b2 	bne.w	800d9ac <_strtod_l+0xb0c>
 800d848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d84a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d84e:	ec4b ab10 	vmov	d0, sl, fp
 800d852:	f7ff f9c9 	bl	800cbe8 <__ulp>
 800d856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d85a:	ec51 0b10 	vmov	r0, r1, d0
 800d85e:	f7f2 fed3 	bl	8000608 <__aeabi_dmul>
 800d862:	4652      	mov	r2, sl
 800d864:	465b      	mov	r3, fp
 800d866:	f7f2 fd19 	bl	800029c <__adddf3>
 800d86a:	460b      	mov	r3, r1
 800d86c:	4949      	ldr	r1, [pc, #292]	@ (800d994 <_strtod_l+0xaf4>)
 800d86e:	4a4e      	ldr	r2, [pc, #312]	@ (800d9a8 <_strtod_l+0xb08>)
 800d870:	4019      	ands	r1, r3
 800d872:	4291      	cmp	r1, r2
 800d874:	4682      	mov	sl, r0
 800d876:	d942      	bls.n	800d8fe <_strtod_l+0xa5e>
 800d878:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d87a:	4b47      	ldr	r3, [pc, #284]	@ (800d998 <_strtod_l+0xaf8>)
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d103      	bne.n	800d888 <_strtod_l+0x9e8>
 800d880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d882:	3301      	adds	r3, #1
 800d884:	f43f ad2b 	beq.w	800d2de <_strtod_l+0x43e>
 800d888:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d998 <_strtod_l+0xaf8>
 800d88c:	f04f 3aff 	mov.w	sl, #4294967295
 800d890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d892:	9805      	ldr	r0, [sp, #20]
 800d894:	f7fe fe74 	bl	800c580 <_Bfree>
 800d898:	9805      	ldr	r0, [sp, #20]
 800d89a:	4649      	mov	r1, r9
 800d89c:	f7fe fe70 	bl	800c580 <_Bfree>
 800d8a0:	9805      	ldr	r0, [sp, #20]
 800d8a2:	4641      	mov	r1, r8
 800d8a4:	f7fe fe6c 	bl	800c580 <_Bfree>
 800d8a8:	9805      	ldr	r0, [sp, #20]
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	f7fe fe68 	bl	800c580 <_Bfree>
 800d8b0:	e618      	b.n	800d4e4 <_strtod_l+0x644>
 800d8b2:	f1ba 0f01 	cmp.w	sl, #1
 800d8b6:	d103      	bne.n	800d8c0 <_strtod_l+0xa20>
 800d8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f43f ada5 	beq.w	800d40a <_strtod_l+0x56a>
 800d8c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d970 <_strtod_l+0xad0>
 800d8c4:	4f35      	ldr	r7, [pc, #212]	@ (800d99c <_strtod_l+0xafc>)
 800d8c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8ca:	2600      	movs	r6, #0
 800d8cc:	e7b1      	b.n	800d832 <_strtod_l+0x992>
 800d8ce:	4f34      	ldr	r7, [pc, #208]	@ (800d9a0 <_strtod_l+0xb00>)
 800d8d0:	2600      	movs	r6, #0
 800d8d2:	e7aa      	b.n	800d82a <_strtod_l+0x98a>
 800d8d4:	4b32      	ldr	r3, [pc, #200]	@ (800d9a0 <_strtod_l+0xb00>)
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f7f2 fe94 	bl	8000608 <__aeabi_dmul>
 800d8e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8e2:	4606      	mov	r6, r0
 800d8e4:	460f      	mov	r7, r1
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d09f      	beq.n	800d82a <_strtod_l+0x98a>
 800d8ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d8ee:	e7a0      	b.n	800d832 <_strtod_l+0x992>
 800d8f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d978 <_strtod_l+0xad8>
 800d8f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8f8:	ec57 6b17 	vmov	r6, r7, d7
 800d8fc:	e799      	b.n	800d832 <_strtod_l+0x992>
 800d8fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d902:	9b08      	ldr	r3, [sp, #32]
 800d904:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1c1      	bne.n	800d890 <_strtod_l+0x9f0>
 800d90c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d910:	0d1b      	lsrs	r3, r3, #20
 800d912:	051b      	lsls	r3, r3, #20
 800d914:	429d      	cmp	r5, r3
 800d916:	d1bb      	bne.n	800d890 <_strtod_l+0x9f0>
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f3 fa24 	bl	8000d68 <__aeabi_d2lz>
 800d920:	f7f2 fe44 	bl	80005ac <__aeabi_l2d>
 800d924:	4602      	mov	r2, r0
 800d926:	460b      	mov	r3, r1
 800d928:	4630      	mov	r0, r6
 800d92a:	4639      	mov	r1, r7
 800d92c:	f7f2 fcb4 	bl	8000298 <__aeabi_dsub>
 800d930:	460b      	mov	r3, r1
 800d932:	4602      	mov	r2, r0
 800d934:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d938:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d93e:	ea46 060a 	orr.w	r6, r6, sl
 800d942:	431e      	orrs	r6, r3
 800d944:	d06f      	beq.n	800da26 <_strtod_l+0xb86>
 800d946:	a30e      	add	r3, pc, #56	@ (adr r3, 800d980 <_strtod_l+0xae0>)
 800d948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94c:	f7f3 f8ce 	bl	8000aec <__aeabi_dcmplt>
 800d950:	2800      	cmp	r0, #0
 800d952:	f47f accf 	bne.w	800d2f4 <_strtod_l+0x454>
 800d956:	a30c      	add	r3, pc, #48	@ (adr r3, 800d988 <_strtod_l+0xae8>)
 800d958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d960:	f7f3 f8e2 	bl	8000b28 <__aeabi_dcmpgt>
 800d964:	2800      	cmp	r0, #0
 800d966:	d093      	beq.n	800d890 <_strtod_l+0x9f0>
 800d968:	e4c4      	b.n	800d2f4 <_strtod_l+0x454>
 800d96a:	bf00      	nop
 800d96c:	f3af 8000 	nop.w
 800d970:	00000000 	.word	0x00000000
 800d974:	bff00000 	.word	0xbff00000
 800d978:	00000000 	.word	0x00000000
 800d97c:	3ff00000 	.word	0x3ff00000
 800d980:	94a03595 	.word	0x94a03595
 800d984:	3fdfffff 	.word	0x3fdfffff
 800d988:	35afe535 	.word	0x35afe535
 800d98c:	3fe00000 	.word	0x3fe00000
 800d990:	000fffff 	.word	0x000fffff
 800d994:	7ff00000 	.word	0x7ff00000
 800d998:	7fefffff 	.word	0x7fefffff
 800d99c:	3ff00000 	.word	0x3ff00000
 800d9a0:	3fe00000 	.word	0x3fe00000
 800d9a4:	7fe00000 	.word	0x7fe00000
 800d9a8:	7c9fffff 	.word	0x7c9fffff
 800d9ac:	9b08      	ldr	r3, [sp, #32]
 800d9ae:	b323      	cbz	r3, 800d9fa <_strtod_l+0xb5a>
 800d9b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d9b4:	d821      	bhi.n	800d9fa <_strtod_l+0xb5a>
 800d9b6:	a328      	add	r3, pc, #160	@ (adr r3, 800da58 <_strtod_l+0xbb8>)
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	4630      	mov	r0, r6
 800d9be:	4639      	mov	r1, r7
 800d9c0:	f7f3 f89e 	bl	8000b00 <__aeabi_dcmple>
 800d9c4:	b1a0      	cbz	r0, 800d9f0 <_strtod_l+0xb50>
 800d9c6:	4639      	mov	r1, r7
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7f3 f8f5 	bl	8000bb8 <__aeabi_d2uiz>
 800d9ce:	2801      	cmp	r0, #1
 800d9d0:	bf38      	it	cc
 800d9d2:	2001      	movcc	r0, #1
 800d9d4:	f7f2 fd9e 	bl	8000514 <__aeabi_ui2d>
 800d9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9da:	4606      	mov	r6, r0
 800d9dc:	460f      	mov	r7, r1
 800d9de:	b9fb      	cbnz	r3, 800da20 <_strtod_l+0xb80>
 800d9e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d9e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d9e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d9e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d9ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d9f6:	1b5b      	subs	r3, r3, r5
 800d9f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d9fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d9fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800da02:	f7ff f8f1 	bl	800cbe8 <__ulp>
 800da06:	4650      	mov	r0, sl
 800da08:	ec53 2b10 	vmov	r2, r3, d0
 800da0c:	4659      	mov	r1, fp
 800da0e:	f7f2 fdfb 	bl	8000608 <__aeabi_dmul>
 800da12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800da16:	f7f2 fc41 	bl	800029c <__adddf3>
 800da1a:	4682      	mov	sl, r0
 800da1c:	468b      	mov	fp, r1
 800da1e:	e770      	b.n	800d902 <_strtod_l+0xa62>
 800da20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800da24:	e7e0      	b.n	800d9e8 <_strtod_l+0xb48>
 800da26:	a30e      	add	r3, pc, #56	@ (adr r3, 800da60 <_strtod_l+0xbc0>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f3 f85e 	bl	8000aec <__aeabi_dcmplt>
 800da30:	e798      	b.n	800d964 <_strtod_l+0xac4>
 800da32:	2300      	movs	r3, #0
 800da34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800da38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	f7ff ba6d 	b.w	800cf1a <_strtod_l+0x7a>
 800da40:	2a65      	cmp	r2, #101	@ 0x65
 800da42:	f43f ab66 	beq.w	800d112 <_strtod_l+0x272>
 800da46:	2a45      	cmp	r2, #69	@ 0x45
 800da48:	f43f ab63 	beq.w	800d112 <_strtod_l+0x272>
 800da4c:	2301      	movs	r3, #1
 800da4e:	f7ff bb9e 	b.w	800d18e <_strtod_l+0x2ee>
 800da52:	bf00      	nop
 800da54:	f3af 8000 	nop.w
 800da58:	ffc00000 	.word	0xffc00000
 800da5c:	41dfffff 	.word	0x41dfffff
 800da60:	94a03595 	.word	0x94a03595
 800da64:	3fcfffff 	.word	0x3fcfffff

0800da68 <_strtod_r>:
 800da68:	4b01      	ldr	r3, [pc, #4]	@ (800da70 <_strtod_r+0x8>)
 800da6a:	f7ff ba19 	b.w	800cea0 <_strtod_l>
 800da6e:	bf00      	nop
 800da70:	20000070 	.word	0x20000070

0800da74 <__ssputs_r>:
 800da74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	688e      	ldr	r6, [r1, #8]
 800da7a:	461f      	mov	r7, r3
 800da7c:	42be      	cmp	r6, r7
 800da7e:	680b      	ldr	r3, [r1, #0]
 800da80:	4682      	mov	sl, r0
 800da82:	460c      	mov	r4, r1
 800da84:	4690      	mov	r8, r2
 800da86:	d82d      	bhi.n	800dae4 <__ssputs_r+0x70>
 800da88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da90:	d026      	beq.n	800dae0 <__ssputs_r+0x6c>
 800da92:	6965      	ldr	r5, [r4, #20]
 800da94:	6909      	ldr	r1, [r1, #16]
 800da96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da9a:	eba3 0901 	sub.w	r9, r3, r1
 800da9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daa2:	1c7b      	adds	r3, r7, #1
 800daa4:	444b      	add	r3, r9
 800daa6:	106d      	asrs	r5, r5, #1
 800daa8:	429d      	cmp	r5, r3
 800daaa:	bf38      	it	cc
 800daac:	461d      	movcc	r5, r3
 800daae:	0553      	lsls	r3, r2, #21
 800dab0:	d527      	bpl.n	800db02 <__ssputs_r+0x8e>
 800dab2:	4629      	mov	r1, r5
 800dab4:	f7fe fc98 	bl	800c3e8 <_malloc_r>
 800dab8:	4606      	mov	r6, r0
 800daba:	b360      	cbz	r0, 800db16 <__ssputs_r+0xa2>
 800dabc:	6921      	ldr	r1, [r4, #16]
 800dabe:	464a      	mov	r2, r9
 800dac0:	f000 ff7c 	bl	800e9bc <memcpy>
 800dac4:	89a3      	ldrh	r3, [r4, #12]
 800dac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800daca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dace:	81a3      	strh	r3, [r4, #12]
 800dad0:	6126      	str	r6, [r4, #16]
 800dad2:	6165      	str	r5, [r4, #20]
 800dad4:	444e      	add	r6, r9
 800dad6:	eba5 0509 	sub.w	r5, r5, r9
 800dada:	6026      	str	r6, [r4, #0]
 800dadc:	60a5      	str	r5, [r4, #8]
 800dade:	463e      	mov	r6, r7
 800dae0:	42be      	cmp	r6, r7
 800dae2:	d900      	bls.n	800dae6 <__ssputs_r+0x72>
 800dae4:	463e      	mov	r6, r7
 800dae6:	6820      	ldr	r0, [r4, #0]
 800dae8:	4632      	mov	r2, r6
 800daea:	4641      	mov	r1, r8
 800daec:	f000 ff3c 	bl	800e968 <memmove>
 800daf0:	68a3      	ldr	r3, [r4, #8]
 800daf2:	1b9b      	subs	r3, r3, r6
 800daf4:	60a3      	str	r3, [r4, #8]
 800daf6:	6823      	ldr	r3, [r4, #0]
 800daf8:	4433      	add	r3, r6
 800dafa:	6023      	str	r3, [r4, #0]
 800dafc:	2000      	movs	r0, #0
 800dafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db02:	462a      	mov	r2, r5
 800db04:	f001 fad5 	bl	800f0b2 <_realloc_r>
 800db08:	4606      	mov	r6, r0
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d1e0      	bne.n	800dad0 <__ssputs_r+0x5c>
 800db0e:	6921      	ldr	r1, [r4, #16]
 800db10:	4650      	mov	r0, sl
 800db12:	f7fe fbf5 	bl	800c300 <_free_r>
 800db16:	230c      	movs	r3, #12
 800db18:	f8ca 3000 	str.w	r3, [sl]
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db22:	81a3      	strh	r3, [r4, #12]
 800db24:	f04f 30ff 	mov.w	r0, #4294967295
 800db28:	e7e9      	b.n	800dafe <__ssputs_r+0x8a>
	...

0800db2c <_svfiprintf_r>:
 800db2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db30:	4698      	mov	r8, r3
 800db32:	898b      	ldrh	r3, [r1, #12]
 800db34:	061b      	lsls	r3, r3, #24
 800db36:	b09d      	sub	sp, #116	@ 0x74
 800db38:	4607      	mov	r7, r0
 800db3a:	460d      	mov	r5, r1
 800db3c:	4614      	mov	r4, r2
 800db3e:	d510      	bpl.n	800db62 <_svfiprintf_r+0x36>
 800db40:	690b      	ldr	r3, [r1, #16]
 800db42:	b973      	cbnz	r3, 800db62 <_svfiprintf_r+0x36>
 800db44:	2140      	movs	r1, #64	@ 0x40
 800db46:	f7fe fc4f 	bl	800c3e8 <_malloc_r>
 800db4a:	6028      	str	r0, [r5, #0]
 800db4c:	6128      	str	r0, [r5, #16]
 800db4e:	b930      	cbnz	r0, 800db5e <_svfiprintf_r+0x32>
 800db50:	230c      	movs	r3, #12
 800db52:	603b      	str	r3, [r7, #0]
 800db54:	f04f 30ff 	mov.w	r0, #4294967295
 800db58:	b01d      	add	sp, #116	@ 0x74
 800db5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5e:	2340      	movs	r3, #64	@ 0x40
 800db60:	616b      	str	r3, [r5, #20]
 800db62:	2300      	movs	r3, #0
 800db64:	9309      	str	r3, [sp, #36]	@ 0x24
 800db66:	2320      	movs	r3, #32
 800db68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db70:	2330      	movs	r3, #48	@ 0x30
 800db72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd10 <_svfiprintf_r+0x1e4>
 800db76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db7a:	f04f 0901 	mov.w	r9, #1
 800db7e:	4623      	mov	r3, r4
 800db80:	469a      	mov	sl, r3
 800db82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db86:	b10a      	cbz	r2, 800db8c <_svfiprintf_r+0x60>
 800db88:	2a25      	cmp	r2, #37	@ 0x25
 800db8a:	d1f9      	bne.n	800db80 <_svfiprintf_r+0x54>
 800db8c:	ebba 0b04 	subs.w	fp, sl, r4
 800db90:	d00b      	beq.n	800dbaa <_svfiprintf_r+0x7e>
 800db92:	465b      	mov	r3, fp
 800db94:	4622      	mov	r2, r4
 800db96:	4629      	mov	r1, r5
 800db98:	4638      	mov	r0, r7
 800db9a:	f7ff ff6b 	bl	800da74 <__ssputs_r>
 800db9e:	3001      	adds	r0, #1
 800dba0:	f000 80a7 	beq.w	800dcf2 <_svfiprintf_r+0x1c6>
 800dba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dba6:	445a      	add	r2, fp
 800dba8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbaa:	f89a 3000 	ldrb.w	r3, [sl]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 809f 	beq.w	800dcf2 <_svfiprintf_r+0x1c6>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbbe:	f10a 0a01 	add.w	sl, sl, #1
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	9307      	str	r3, [sp, #28]
 800dbc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbca:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbcc:	4654      	mov	r4, sl
 800dbce:	2205      	movs	r2, #5
 800dbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd4:	484e      	ldr	r0, [pc, #312]	@ (800dd10 <_svfiprintf_r+0x1e4>)
 800dbd6:	f7f2 fb03 	bl	80001e0 <memchr>
 800dbda:	9a04      	ldr	r2, [sp, #16]
 800dbdc:	b9d8      	cbnz	r0, 800dc16 <_svfiprintf_r+0xea>
 800dbde:	06d0      	lsls	r0, r2, #27
 800dbe0:	bf44      	itt	mi
 800dbe2:	2320      	movmi	r3, #32
 800dbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbe8:	0711      	lsls	r1, r2, #28
 800dbea:	bf44      	itt	mi
 800dbec:	232b      	movmi	r3, #43	@ 0x2b
 800dbee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbf2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbf8:	d015      	beq.n	800dc26 <_svfiprintf_r+0xfa>
 800dbfa:	9a07      	ldr	r2, [sp, #28]
 800dbfc:	4654      	mov	r4, sl
 800dbfe:	2000      	movs	r0, #0
 800dc00:	f04f 0c0a 	mov.w	ip, #10
 800dc04:	4621      	mov	r1, r4
 800dc06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc0a:	3b30      	subs	r3, #48	@ 0x30
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d94b      	bls.n	800dca8 <_svfiprintf_r+0x17c>
 800dc10:	b1b0      	cbz	r0, 800dc40 <_svfiprintf_r+0x114>
 800dc12:	9207      	str	r2, [sp, #28]
 800dc14:	e014      	b.n	800dc40 <_svfiprintf_r+0x114>
 800dc16:	eba0 0308 	sub.w	r3, r0, r8
 800dc1a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	9304      	str	r3, [sp, #16]
 800dc22:	46a2      	mov	sl, r4
 800dc24:	e7d2      	b.n	800dbcc <_svfiprintf_r+0xa0>
 800dc26:	9b03      	ldr	r3, [sp, #12]
 800dc28:	1d19      	adds	r1, r3, #4
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	9103      	str	r1, [sp, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	bfbb      	ittet	lt
 800dc32:	425b      	neglt	r3, r3
 800dc34:	f042 0202 	orrlt.w	r2, r2, #2
 800dc38:	9307      	strge	r3, [sp, #28]
 800dc3a:	9307      	strlt	r3, [sp, #28]
 800dc3c:	bfb8      	it	lt
 800dc3e:	9204      	strlt	r2, [sp, #16]
 800dc40:	7823      	ldrb	r3, [r4, #0]
 800dc42:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc44:	d10a      	bne.n	800dc5c <_svfiprintf_r+0x130>
 800dc46:	7863      	ldrb	r3, [r4, #1]
 800dc48:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc4a:	d132      	bne.n	800dcb2 <_svfiprintf_r+0x186>
 800dc4c:	9b03      	ldr	r3, [sp, #12]
 800dc4e:	1d1a      	adds	r2, r3, #4
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	9203      	str	r2, [sp, #12]
 800dc54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc58:	3402      	adds	r4, #2
 800dc5a:	9305      	str	r3, [sp, #20]
 800dc5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd20 <_svfiprintf_r+0x1f4>
 800dc60:	7821      	ldrb	r1, [r4, #0]
 800dc62:	2203      	movs	r2, #3
 800dc64:	4650      	mov	r0, sl
 800dc66:	f7f2 fabb 	bl	80001e0 <memchr>
 800dc6a:	b138      	cbz	r0, 800dc7c <_svfiprintf_r+0x150>
 800dc6c:	9b04      	ldr	r3, [sp, #16]
 800dc6e:	eba0 000a 	sub.w	r0, r0, sl
 800dc72:	2240      	movs	r2, #64	@ 0x40
 800dc74:	4082      	lsls	r2, r0
 800dc76:	4313      	orrs	r3, r2
 800dc78:	3401      	adds	r4, #1
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc80:	4824      	ldr	r0, [pc, #144]	@ (800dd14 <_svfiprintf_r+0x1e8>)
 800dc82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc86:	2206      	movs	r2, #6
 800dc88:	f7f2 faaa 	bl	80001e0 <memchr>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d036      	beq.n	800dcfe <_svfiprintf_r+0x1d2>
 800dc90:	4b21      	ldr	r3, [pc, #132]	@ (800dd18 <_svfiprintf_r+0x1ec>)
 800dc92:	bb1b      	cbnz	r3, 800dcdc <_svfiprintf_r+0x1b0>
 800dc94:	9b03      	ldr	r3, [sp, #12]
 800dc96:	3307      	adds	r3, #7
 800dc98:	f023 0307 	bic.w	r3, r3, #7
 800dc9c:	3308      	adds	r3, #8
 800dc9e:	9303      	str	r3, [sp, #12]
 800dca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dca2:	4433      	add	r3, r6
 800dca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dca6:	e76a      	b.n	800db7e <_svfiprintf_r+0x52>
 800dca8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcac:	460c      	mov	r4, r1
 800dcae:	2001      	movs	r0, #1
 800dcb0:	e7a8      	b.n	800dc04 <_svfiprintf_r+0xd8>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	3401      	adds	r4, #1
 800dcb6:	9305      	str	r3, [sp, #20]
 800dcb8:	4619      	mov	r1, r3
 800dcba:	f04f 0c0a 	mov.w	ip, #10
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcc4:	3a30      	subs	r2, #48	@ 0x30
 800dcc6:	2a09      	cmp	r2, #9
 800dcc8:	d903      	bls.n	800dcd2 <_svfiprintf_r+0x1a6>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d0c6      	beq.n	800dc5c <_svfiprintf_r+0x130>
 800dcce:	9105      	str	r1, [sp, #20]
 800dcd0:	e7c4      	b.n	800dc5c <_svfiprintf_r+0x130>
 800dcd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e7f0      	b.n	800dcbe <_svfiprintf_r+0x192>
 800dcdc:	ab03      	add	r3, sp, #12
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	462a      	mov	r2, r5
 800dce2:	4b0e      	ldr	r3, [pc, #56]	@ (800dd1c <_svfiprintf_r+0x1f0>)
 800dce4:	a904      	add	r1, sp, #16
 800dce6:	4638      	mov	r0, r7
 800dce8:	f7fc fc7c 	bl	800a5e4 <_printf_float>
 800dcec:	1c42      	adds	r2, r0, #1
 800dcee:	4606      	mov	r6, r0
 800dcf0:	d1d6      	bne.n	800dca0 <_svfiprintf_r+0x174>
 800dcf2:	89ab      	ldrh	r3, [r5, #12]
 800dcf4:	065b      	lsls	r3, r3, #25
 800dcf6:	f53f af2d 	bmi.w	800db54 <_svfiprintf_r+0x28>
 800dcfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcfc:	e72c      	b.n	800db58 <_svfiprintf_r+0x2c>
 800dcfe:	ab03      	add	r3, sp, #12
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	462a      	mov	r2, r5
 800dd04:	4b05      	ldr	r3, [pc, #20]	@ (800dd1c <_svfiprintf_r+0x1f0>)
 800dd06:	a904      	add	r1, sp, #16
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f7fc ff03 	bl	800ab14 <_printf_i>
 800dd0e:	e7ed      	b.n	800dcec <_svfiprintf_r+0x1c0>
 800dd10:	080101b0 	.word	0x080101b0
 800dd14:	080101ba 	.word	0x080101ba
 800dd18:	0800a5e5 	.word	0x0800a5e5
 800dd1c:	0800da75 	.word	0x0800da75
 800dd20:	080101b6 	.word	0x080101b6

0800dd24 <_sungetc_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	1c4b      	adds	r3, r1, #1
 800dd28:	4614      	mov	r4, r2
 800dd2a:	d103      	bne.n	800dd34 <_sungetc_r+0x10>
 800dd2c:	f04f 35ff 	mov.w	r5, #4294967295
 800dd30:	4628      	mov	r0, r5
 800dd32:	bd38      	pop	{r3, r4, r5, pc}
 800dd34:	8993      	ldrh	r3, [r2, #12]
 800dd36:	f023 0320 	bic.w	r3, r3, #32
 800dd3a:	8193      	strh	r3, [r2, #12]
 800dd3c:	6853      	ldr	r3, [r2, #4]
 800dd3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dd40:	b2cd      	uxtb	r5, r1
 800dd42:	b18a      	cbz	r2, 800dd68 <_sungetc_r+0x44>
 800dd44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dd46:	429a      	cmp	r2, r3
 800dd48:	dd08      	ble.n	800dd5c <_sungetc_r+0x38>
 800dd4a:	6823      	ldr	r3, [r4, #0]
 800dd4c:	1e5a      	subs	r2, r3, #1
 800dd4e:	6022      	str	r2, [r4, #0]
 800dd50:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dd54:	6863      	ldr	r3, [r4, #4]
 800dd56:	3301      	adds	r3, #1
 800dd58:	6063      	str	r3, [r4, #4]
 800dd5a:	e7e9      	b.n	800dd30 <_sungetc_r+0xc>
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	f000 fd34 	bl	800e7ca <__submore>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d0f1      	beq.n	800dd4a <_sungetc_r+0x26>
 800dd66:	e7e1      	b.n	800dd2c <_sungetc_r+0x8>
 800dd68:	6921      	ldr	r1, [r4, #16]
 800dd6a:	6822      	ldr	r2, [r4, #0]
 800dd6c:	b141      	cbz	r1, 800dd80 <_sungetc_r+0x5c>
 800dd6e:	4291      	cmp	r1, r2
 800dd70:	d206      	bcs.n	800dd80 <_sungetc_r+0x5c>
 800dd72:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800dd76:	42a9      	cmp	r1, r5
 800dd78:	d102      	bne.n	800dd80 <_sungetc_r+0x5c>
 800dd7a:	3a01      	subs	r2, #1
 800dd7c:	6022      	str	r2, [r4, #0]
 800dd7e:	e7ea      	b.n	800dd56 <_sungetc_r+0x32>
 800dd80:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800dd84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd88:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd8a:	2303      	movs	r3, #3
 800dd8c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dd8e:	4623      	mov	r3, r4
 800dd90:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	2301      	movs	r3, #1
 800dd98:	e7de      	b.n	800dd58 <_sungetc_r+0x34>

0800dd9a <__ssrefill_r>:
 800dd9a:	b510      	push	{r4, lr}
 800dd9c:	460c      	mov	r4, r1
 800dd9e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dda0:	b169      	cbz	r1, 800ddbe <__ssrefill_r+0x24>
 800dda2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dda6:	4299      	cmp	r1, r3
 800dda8:	d001      	beq.n	800ddae <__ssrefill_r+0x14>
 800ddaa:	f7fe faa9 	bl	800c300 <_free_r>
 800ddae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ddb0:	6063      	str	r3, [r4, #4]
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	6360      	str	r0, [r4, #52]	@ 0x34
 800ddb6:	b113      	cbz	r3, 800ddbe <__ssrefill_r+0x24>
 800ddb8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ddba:	6023      	str	r3, [r4, #0]
 800ddbc:	bd10      	pop	{r4, pc}
 800ddbe:	6923      	ldr	r3, [r4, #16]
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	6063      	str	r3, [r4, #4]
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	f043 0320 	orr.w	r3, r3, #32
 800ddcc:	81a3      	strh	r3, [r4, #12]
 800ddce:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd2:	e7f3      	b.n	800ddbc <__ssrefill_r+0x22>

0800ddd4 <__ssvfiscanf_r>:
 800ddd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd8:	460c      	mov	r4, r1
 800ddda:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ddde:	2100      	movs	r1, #0
 800dde0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800dde4:	49a5      	ldr	r1, [pc, #660]	@ (800e07c <__ssvfiscanf_r+0x2a8>)
 800dde6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800dde8:	f10d 0804 	add.w	r8, sp, #4
 800ddec:	49a4      	ldr	r1, [pc, #656]	@ (800e080 <__ssvfiscanf_r+0x2ac>)
 800ddee:	4fa5      	ldr	r7, [pc, #660]	@ (800e084 <__ssvfiscanf_r+0x2b0>)
 800ddf0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ddf8:	9300      	str	r3, [sp, #0]
 800ddfa:	7813      	ldrb	r3, [r2, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f000 8158 	beq.w	800e0b2 <__ssvfiscanf_r+0x2de>
 800de02:	5cf9      	ldrb	r1, [r7, r3]
 800de04:	f011 0108 	ands.w	r1, r1, #8
 800de08:	f102 0501 	add.w	r5, r2, #1
 800de0c:	d019      	beq.n	800de42 <__ssvfiscanf_r+0x6e>
 800de0e:	6863      	ldr	r3, [r4, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	dd0f      	ble.n	800de34 <__ssvfiscanf_r+0x60>
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	781a      	ldrb	r2, [r3, #0]
 800de18:	5cba      	ldrb	r2, [r7, r2]
 800de1a:	0712      	lsls	r2, r2, #28
 800de1c:	d401      	bmi.n	800de22 <__ssvfiscanf_r+0x4e>
 800de1e:	462a      	mov	r2, r5
 800de20:	e7eb      	b.n	800ddfa <__ssvfiscanf_r+0x26>
 800de22:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800de24:	3201      	adds	r2, #1
 800de26:	9245      	str	r2, [sp, #276]	@ 0x114
 800de28:	6862      	ldr	r2, [r4, #4]
 800de2a:	3301      	adds	r3, #1
 800de2c:	3a01      	subs	r2, #1
 800de2e:	6062      	str	r2, [r4, #4]
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	e7ec      	b.n	800de0e <__ssvfiscanf_r+0x3a>
 800de34:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800de36:	4621      	mov	r1, r4
 800de38:	4630      	mov	r0, r6
 800de3a:	4798      	blx	r3
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d0e9      	beq.n	800de14 <__ssvfiscanf_r+0x40>
 800de40:	e7ed      	b.n	800de1e <__ssvfiscanf_r+0x4a>
 800de42:	2b25      	cmp	r3, #37	@ 0x25
 800de44:	d012      	beq.n	800de6c <__ssvfiscanf_r+0x98>
 800de46:	4699      	mov	r9, r3
 800de48:	6863      	ldr	r3, [r4, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f340 8093 	ble.w	800df76 <__ssvfiscanf_r+0x1a2>
 800de50:	6822      	ldr	r2, [r4, #0]
 800de52:	7813      	ldrb	r3, [r2, #0]
 800de54:	454b      	cmp	r3, r9
 800de56:	f040 812c 	bne.w	800e0b2 <__ssvfiscanf_r+0x2de>
 800de5a:	6863      	ldr	r3, [r4, #4]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	6063      	str	r3, [r4, #4]
 800de60:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800de62:	3201      	adds	r2, #1
 800de64:	3301      	adds	r3, #1
 800de66:	6022      	str	r2, [r4, #0]
 800de68:	9345      	str	r3, [sp, #276]	@ 0x114
 800de6a:	e7d8      	b.n	800de1e <__ssvfiscanf_r+0x4a>
 800de6c:	9141      	str	r1, [sp, #260]	@ 0x104
 800de6e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800de70:	7853      	ldrb	r3, [r2, #1]
 800de72:	2b2a      	cmp	r3, #42	@ 0x2a
 800de74:	bf02      	ittt	eq
 800de76:	2310      	moveq	r3, #16
 800de78:	1c95      	addeq	r5, r2, #2
 800de7a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800de7c:	220a      	movs	r2, #10
 800de7e:	46a9      	mov	r9, r5
 800de80:	f819 1b01 	ldrb.w	r1, [r9], #1
 800de84:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800de88:	2b09      	cmp	r3, #9
 800de8a:	d91e      	bls.n	800deca <__ssvfiscanf_r+0xf6>
 800de8c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e088 <__ssvfiscanf_r+0x2b4>
 800de90:	2203      	movs	r2, #3
 800de92:	4650      	mov	r0, sl
 800de94:	f7f2 f9a4 	bl	80001e0 <memchr>
 800de98:	b138      	cbz	r0, 800deaa <__ssvfiscanf_r+0xd6>
 800de9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800de9c:	eba0 000a 	sub.w	r0, r0, sl
 800dea0:	2301      	movs	r3, #1
 800dea2:	4083      	lsls	r3, r0
 800dea4:	4313      	orrs	r3, r2
 800dea6:	9341      	str	r3, [sp, #260]	@ 0x104
 800dea8:	464d      	mov	r5, r9
 800deaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800deae:	2b78      	cmp	r3, #120	@ 0x78
 800deb0:	d806      	bhi.n	800dec0 <__ssvfiscanf_r+0xec>
 800deb2:	2b57      	cmp	r3, #87	@ 0x57
 800deb4:	d810      	bhi.n	800ded8 <__ssvfiscanf_r+0x104>
 800deb6:	2b25      	cmp	r3, #37	@ 0x25
 800deb8:	d0c5      	beq.n	800de46 <__ssvfiscanf_r+0x72>
 800deba:	d857      	bhi.n	800df6c <__ssvfiscanf_r+0x198>
 800debc:	2b00      	cmp	r3, #0
 800debe:	d065      	beq.n	800df8c <__ssvfiscanf_r+0x1b8>
 800dec0:	2303      	movs	r3, #3
 800dec2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dec4:	230a      	movs	r3, #10
 800dec6:	9342      	str	r3, [sp, #264]	@ 0x108
 800dec8:	e078      	b.n	800dfbc <__ssvfiscanf_r+0x1e8>
 800deca:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800decc:	fb02 1103 	mla	r1, r2, r3, r1
 800ded0:	3930      	subs	r1, #48	@ 0x30
 800ded2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ded4:	464d      	mov	r5, r9
 800ded6:	e7d2      	b.n	800de7e <__ssvfiscanf_r+0xaa>
 800ded8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800dedc:	2a20      	cmp	r2, #32
 800dede:	d8ef      	bhi.n	800dec0 <__ssvfiscanf_r+0xec>
 800dee0:	a101      	add	r1, pc, #4	@ (adr r1, 800dee8 <__ssvfiscanf_r+0x114>)
 800dee2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dee6:	bf00      	nop
 800dee8:	0800df9b 	.word	0x0800df9b
 800deec:	0800dec1 	.word	0x0800dec1
 800def0:	0800dec1 	.word	0x0800dec1
 800def4:	0800dff5 	.word	0x0800dff5
 800def8:	0800dec1 	.word	0x0800dec1
 800defc:	0800dec1 	.word	0x0800dec1
 800df00:	0800dec1 	.word	0x0800dec1
 800df04:	0800dec1 	.word	0x0800dec1
 800df08:	0800dec1 	.word	0x0800dec1
 800df0c:	0800dec1 	.word	0x0800dec1
 800df10:	0800dec1 	.word	0x0800dec1
 800df14:	0800e00b 	.word	0x0800e00b
 800df18:	0800dff1 	.word	0x0800dff1
 800df1c:	0800df73 	.word	0x0800df73
 800df20:	0800df73 	.word	0x0800df73
 800df24:	0800df73 	.word	0x0800df73
 800df28:	0800dec1 	.word	0x0800dec1
 800df2c:	0800dfad 	.word	0x0800dfad
 800df30:	0800dec1 	.word	0x0800dec1
 800df34:	0800dec1 	.word	0x0800dec1
 800df38:	0800dec1 	.word	0x0800dec1
 800df3c:	0800dec1 	.word	0x0800dec1
 800df40:	0800e01b 	.word	0x0800e01b
 800df44:	0800dfb5 	.word	0x0800dfb5
 800df48:	0800df93 	.word	0x0800df93
 800df4c:	0800dec1 	.word	0x0800dec1
 800df50:	0800dec1 	.word	0x0800dec1
 800df54:	0800e017 	.word	0x0800e017
 800df58:	0800dec1 	.word	0x0800dec1
 800df5c:	0800dff1 	.word	0x0800dff1
 800df60:	0800dec1 	.word	0x0800dec1
 800df64:	0800dec1 	.word	0x0800dec1
 800df68:	0800df9b 	.word	0x0800df9b
 800df6c:	3b45      	subs	r3, #69	@ 0x45
 800df6e:	2b02      	cmp	r3, #2
 800df70:	d8a6      	bhi.n	800dec0 <__ssvfiscanf_r+0xec>
 800df72:	2305      	movs	r3, #5
 800df74:	e021      	b.n	800dfba <__ssvfiscanf_r+0x1e6>
 800df76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800df78:	4621      	mov	r1, r4
 800df7a:	4630      	mov	r0, r6
 800df7c:	4798      	blx	r3
 800df7e:	2800      	cmp	r0, #0
 800df80:	f43f af66 	beq.w	800de50 <__ssvfiscanf_r+0x7c>
 800df84:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800df86:	2800      	cmp	r0, #0
 800df88:	f040 808b 	bne.w	800e0a2 <__ssvfiscanf_r+0x2ce>
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	e08b      	b.n	800e0aa <__ssvfiscanf_r+0x2d6>
 800df92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df94:	f042 0220 	orr.w	r2, r2, #32
 800df98:	9241      	str	r2, [sp, #260]	@ 0x104
 800df9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfa0:	9241      	str	r2, [sp, #260]	@ 0x104
 800dfa2:	2210      	movs	r2, #16
 800dfa4:	2b6e      	cmp	r3, #110	@ 0x6e
 800dfa6:	9242      	str	r2, [sp, #264]	@ 0x108
 800dfa8:	d902      	bls.n	800dfb0 <__ssvfiscanf_r+0x1dc>
 800dfaa:	e005      	b.n	800dfb8 <__ssvfiscanf_r+0x1e4>
 800dfac:	2300      	movs	r3, #0
 800dfae:	9342      	str	r3, [sp, #264]	@ 0x108
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	e002      	b.n	800dfba <__ssvfiscanf_r+0x1e6>
 800dfb4:	2308      	movs	r3, #8
 800dfb6:	9342      	str	r3, [sp, #264]	@ 0x108
 800dfb8:	2304      	movs	r3, #4
 800dfba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dfbc:	6863      	ldr	r3, [r4, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	dd39      	ble.n	800e036 <__ssvfiscanf_r+0x262>
 800dfc2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dfc4:	0659      	lsls	r1, r3, #25
 800dfc6:	d404      	bmi.n	800dfd2 <__ssvfiscanf_r+0x1fe>
 800dfc8:	6823      	ldr	r3, [r4, #0]
 800dfca:	781a      	ldrb	r2, [r3, #0]
 800dfcc:	5cba      	ldrb	r2, [r7, r2]
 800dfce:	0712      	lsls	r2, r2, #28
 800dfd0:	d438      	bmi.n	800e044 <__ssvfiscanf_r+0x270>
 800dfd2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	dc47      	bgt.n	800e068 <__ssvfiscanf_r+0x294>
 800dfd8:	466b      	mov	r3, sp
 800dfda:	4622      	mov	r2, r4
 800dfdc:	a941      	add	r1, sp, #260	@ 0x104
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f000 f9ae 	bl	800e340 <_scanf_chars>
 800dfe4:	2801      	cmp	r0, #1
 800dfe6:	d064      	beq.n	800e0b2 <__ssvfiscanf_r+0x2de>
 800dfe8:	2802      	cmp	r0, #2
 800dfea:	f47f af18 	bne.w	800de1e <__ssvfiscanf_r+0x4a>
 800dfee:	e7c9      	b.n	800df84 <__ssvfiscanf_r+0x1b0>
 800dff0:	220a      	movs	r2, #10
 800dff2:	e7d7      	b.n	800dfa4 <__ssvfiscanf_r+0x1d0>
 800dff4:	4629      	mov	r1, r5
 800dff6:	4640      	mov	r0, r8
 800dff8:	f000 fbae 	bl	800e758 <__sccl>
 800dffc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e002:	9341      	str	r3, [sp, #260]	@ 0x104
 800e004:	4605      	mov	r5, r0
 800e006:	2301      	movs	r3, #1
 800e008:	e7d7      	b.n	800dfba <__ssvfiscanf_r+0x1e6>
 800e00a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e00c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e010:	9341      	str	r3, [sp, #260]	@ 0x104
 800e012:	2300      	movs	r3, #0
 800e014:	e7d1      	b.n	800dfba <__ssvfiscanf_r+0x1e6>
 800e016:	2302      	movs	r3, #2
 800e018:	e7cf      	b.n	800dfba <__ssvfiscanf_r+0x1e6>
 800e01a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e01c:	06c3      	lsls	r3, r0, #27
 800e01e:	f53f aefe 	bmi.w	800de1e <__ssvfiscanf_r+0x4a>
 800e022:	9b00      	ldr	r3, [sp, #0]
 800e024:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e026:	1d19      	adds	r1, r3, #4
 800e028:	9100      	str	r1, [sp, #0]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	07c0      	lsls	r0, r0, #31
 800e02e:	bf4c      	ite	mi
 800e030:	801a      	strhmi	r2, [r3, #0]
 800e032:	601a      	strpl	r2, [r3, #0]
 800e034:	e6f3      	b.n	800de1e <__ssvfiscanf_r+0x4a>
 800e036:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e038:	4621      	mov	r1, r4
 800e03a:	4630      	mov	r0, r6
 800e03c:	4798      	blx	r3
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0bf      	beq.n	800dfc2 <__ssvfiscanf_r+0x1ee>
 800e042:	e79f      	b.n	800df84 <__ssvfiscanf_r+0x1b0>
 800e044:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e046:	3201      	adds	r2, #1
 800e048:	9245      	str	r2, [sp, #276]	@ 0x114
 800e04a:	6862      	ldr	r2, [r4, #4]
 800e04c:	3a01      	subs	r2, #1
 800e04e:	2a00      	cmp	r2, #0
 800e050:	6062      	str	r2, [r4, #4]
 800e052:	dd02      	ble.n	800e05a <__ssvfiscanf_r+0x286>
 800e054:	3301      	adds	r3, #1
 800e056:	6023      	str	r3, [r4, #0]
 800e058:	e7b6      	b.n	800dfc8 <__ssvfiscanf_r+0x1f4>
 800e05a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e05c:	4621      	mov	r1, r4
 800e05e:	4630      	mov	r0, r6
 800e060:	4798      	blx	r3
 800e062:	2800      	cmp	r0, #0
 800e064:	d0b0      	beq.n	800dfc8 <__ssvfiscanf_r+0x1f4>
 800e066:	e78d      	b.n	800df84 <__ssvfiscanf_r+0x1b0>
 800e068:	2b04      	cmp	r3, #4
 800e06a:	dc0f      	bgt.n	800e08c <__ssvfiscanf_r+0x2b8>
 800e06c:	466b      	mov	r3, sp
 800e06e:	4622      	mov	r2, r4
 800e070:	a941      	add	r1, sp, #260	@ 0x104
 800e072:	4630      	mov	r0, r6
 800e074:	f000 f9be 	bl	800e3f4 <_scanf_i>
 800e078:	e7b4      	b.n	800dfe4 <__ssvfiscanf_r+0x210>
 800e07a:	bf00      	nop
 800e07c:	0800dd25 	.word	0x0800dd25
 800e080:	0800dd9b 	.word	0x0800dd9b
 800e084:	0800fda5 	.word	0x0800fda5
 800e088:	080101b6 	.word	0x080101b6
 800e08c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b8 <__ssvfiscanf_r+0x2e4>)
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f43f aec5 	beq.w	800de1e <__ssvfiscanf_r+0x4a>
 800e094:	466b      	mov	r3, sp
 800e096:	4622      	mov	r2, r4
 800e098:	a941      	add	r1, sp, #260	@ 0x104
 800e09a:	4630      	mov	r0, r6
 800e09c:	f7fc fe5a 	bl	800ad54 <_scanf_float>
 800e0a0:	e7a0      	b.n	800dfe4 <__ssvfiscanf_r+0x210>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	065b      	lsls	r3, r3, #25
 800e0a6:	f53f af71 	bmi.w	800df8c <__ssvfiscanf_r+0x1b8>
 800e0aa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0b2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e0b4:	e7f9      	b.n	800e0aa <__ssvfiscanf_r+0x2d6>
 800e0b6:	bf00      	nop
 800e0b8:	0800ad55 	.word	0x0800ad55

0800e0bc <__sfputc_r>:
 800e0bc:	6893      	ldr	r3, [r2, #8]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	b410      	push	{r4}
 800e0c4:	6093      	str	r3, [r2, #8]
 800e0c6:	da08      	bge.n	800e0da <__sfputc_r+0x1e>
 800e0c8:	6994      	ldr	r4, [r2, #24]
 800e0ca:	42a3      	cmp	r3, r4
 800e0cc:	db01      	blt.n	800e0d2 <__sfputc_r+0x16>
 800e0ce:	290a      	cmp	r1, #10
 800e0d0:	d103      	bne.n	800e0da <__sfputc_r+0x1e>
 800e0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d6:	f000 bbb2 	b.w	800e83e <__swbuf_r>
 800e0da:	6813      	ldr	r3, [r2, #0]
 800e0dc:	1c58      	adds	r0, r3, #1
 800e0de:	6010      	str	r0, [r2, #0]
 800e0e0:	7019      	strb	r1, [r3, #0]
 800e0e2:	4608      	mov	r0, r1
 800e0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e8:	4770      	bx	lr

0800e0ea <__sfputs_r>:
 800e0ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	460f      	mov	r7, r1
 800e0f0:	4614      	mov	r4, r2
 800e0f2:	18d5      	adds	r5, r2, r3
 800e0f4:	42ac      	cmp	r4, r5
 800e0f6:	d101      	bne.n	800e0fc <__sfputs_r+0x12>
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e007      	b.n	800e10c <__sfputs_r+0x22>
 800e0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e100:	463a      	mov	r2, r7
 800e102:	4630      	mov	r0, r6
 800e104:	f7ff ffda 	bl	800e0bc <__sfputc_r>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d1f3      	bne.n	800e0f4 <__sfputs_r+0xa>
 800e10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e110 <_vfiprintf_r>:
 800e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	460d      	mov	r5, r1
 800e116:	b09d      	sub	sp, #116	@ 0x74
 800e118:	4614      	mov	r4, r2
 800e11a:	4698      	mov	r8, r3
 800e11c:	4606      	mov	r6, r0
 800e11e:	b118      	cbz	r0, 800e128 <_vfiprintf_r+0x18>
 800e120:	6a03      	ldr	r3, [r0, #32]
 800e122:	b90b      	cbnz	r3, 800e128 <_vfiprintf_r+0x18>
 800e124:	f7fd f8b6 	bl	800b294 <__sinit>
 800e128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e12a:	07d9      	lsls	r1, r3, #31
 800e12c:	d405      	bmi.n	800e13a <_vfiprintf_r+0x2a>
 800e12e:	89ab      	ldrh	r3, [r5, #12]
 800e130:	059a      	lsls	r2, r3, #22
 800e132:	d402      	bmi.n	800e13a <_vfiprintf_r+0x2a>
 800e134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e136:	f7fd fa70 	bl	800b61a <__retarget_lock_acquire_recursive>
 800e13a:	89ab      	ldrh	r3, [r5, #12]
 800e13c:	071b      	lsls	r3, r3, #28
 800e13e:	d501      	bpl.n	800e144 <_vfiprintf_r+0x34>
 800e140:	692b      	ldr	r3, [r5, #16]
 800e142:	b99b      	cbnz	r3, 800e16c <_vfiprintf_r+0x5c>
 800e144:	4629      	mov	r1, r5
 800e146:	4630      	mov	r0, r6
 800e148:	f000 fbb8 	bl	800e8bc <__swsetup_r>
 800e14c:	b170      	cbz	r0, 800e16c <_vfiprintf_r+0x5c>
 800e14e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e150:	07dc      	lsls	r4, r3, #31
 800e152:	d504      	bpl.n	800e15e <_vfiprintf_r+0x4e>
 800e154:	f04f 30ff 	mov.w	r0, #4294967295
 800e158:	b01d      	add	sp, #116	@ 0x74
 800e15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15e:	89ab      	ldrh	r3, [r5, #12]
 800e160:	0598      	lsls	r0, r3, #22
 800e162:	d4f7      	bmi.n	800e154 <_vfiprintf_r+0x44>
 800e164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e166:	f7fd fa59 	bl	800b61c <__retarget_lock_release_recursive>
 800e16a:	e7f3      	b.n	800e154 <_vfiprintf_r+0x44>
 800e16c:	2300      	movs	r3, #0
 800e16e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e170:	2320      	movs	r3, #32
 800e172:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e176:	f8cd 800c 	str.w	r8, [sp, #12]
 800e17a:	2330      	movs	r3, #48	@ 0x30
 800e17c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e32c <_vfiprintf_r+0x21c>
 800e180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e184:	f04f 0901 	mov.w	r9, #1
 800e188:	4623      	mov	r3, r4
 800e18a:	469a      	mov	sl, r3
 800e18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e190:	b10a      	cbz	r2, 800e196 <_vfiprintf_r+0x86>
 800e192:	2a25      	cmp	r2, #37	@ 0x25
 800e194:	d1f9      	bne.n	800e18a <_vfiprintf_r+0x7a>
 800e196:	ebba 0b04 	subs.w	fp, sl, r4
 800e19a:	d00b      	beq.n	800e1b4 <_vfiprintf_r+0xa4>
 800e19c:	465b      	mov	r3, fp
 800e19e:	4622      	mov	r2, r4
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f7ff ffa1 	bl	800e0ea <__sfputs_r>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	f000 80a7 	beq.w	800e2fc <_vfiprintf_r+0x1ec>
 800e1ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1b0:	445a      	add	r2, fp
 800e1b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f000 809f 	beq.w	800e2fc <_vfiprintf_r+0x1ec>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c8:	f10a 0a01 	add.w	sl, sl, #1
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	9307      	str	r3, [sp, #28]
 800e1d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1d6:	4654      	mov	r4, sl
 800e1d8:	2205      	movs	r2, #5
 800e1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1de:	4853      	ldr	r0, [pc, #332]	@ (800e32c <_vfiprintf_r+0x21c>)
 800e1e0:	f7f1 fffe 	bl	80001e0 <memchr>
 800e1e4:	9a04      	ldr	r2, [sp, #16]
 800e1e6:	b9d8      	cbnz	r0, 800e220 <_vfiprintf_r+0x110>
 800e1e8:	06d1      	lsls	r1, r2, #27
 800e1ea:	bf44      	itt	mi
 800e1ec:	2320      	movmi	r3, #32
 800e1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1f2:	0713      	lsls	r3, r2, #28
 800e1f4:	bf44      	itt	mi
 800e1f6:	232b      	movmi	r3, #43	@ 0x2b
 800e1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e200:	2b2a      	cmp	r3, #42	@ 0x2a
 800e202:	d015      	beq.n	800e230 <_vfiprintf_r+0x120>
 800e204:	9a07      	ldr	r2, [sp, #28]
 800e206:	4654      	mov	r4, sl
 800e208:	2000      	movs	r0, #0
 800e20a:	f04f 0c0a 	mov.w	ip, #10
 800e20e:	4621      	mov	r1, r4
 800e210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e214:	3b30      	subs	r3, #48	@ 0x30
 800e216:	2b09      	cmp	r3, #9
 800e218:	d94b      	bls.n	800e2b2 <_vfiprintf_r+0x1a2>
 800e21a:	b1b0      	cbz	r0, 800e24a <_vfiprintf_r+0x13a>
 800e21c:	9207      	str	r2, [sp, #28]
 800e21e:	e014      	b.n	800e24a <_vfiprintf_r+0x13a>
 800e220:	eba0 0308 	sub.w	r3, r0, r8
 800e224:	fa09 f303 	lsl.w	r3, r9, r3
 800e228:	4313      	orrs	r3, r2
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	46a2      	mov	sl, r4
 800e22e:	e7d2      	b.n	800e1d6 <_vfiprintf_r+0xc6>
 800e230:	9b03      	ldr	r3, [sp, #12]
 800e232:	1d19      	adds	r1, r3, #4
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	9103      	str	r1, [sp, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	bfbb      	ittet	lt
 800e23c:	425b      	neglt	r3, r3
 800e23e:	f042 0202 	orrlt.w	r2, r2, #2
 800e242:	9307      	strge	r3, [sp, #28]
 800e244:	9307      	strlt	r3, [sp, #28]
 800e246:	bfb8      	it	lt
 800e248:	9204      	strlt	r2, [sp, #16]
 800e24a:	7823      	ldrb	r3, [r4, #0]
 800e24c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e24e:	d10a      	bne.n	800e266 <_vfiprintf_r+0x156>
 800e250:	7863      	ldrb	r3, [r4, #1]
 800e252:	2b2a      	cmp	r3, #42	@ 0x2a
 800e254:	d132      	bne.n	800e2bc <_vfiprintf_r+0x1ac>
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	1d1a      	adds	r2, r3, #4
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	9203      	str	r2, [sp, #12]
 800e25e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e262:	3402      	adds	r4, #2
 800e264:	9305      	str	r3, [sp, #20]
 800e266:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e33c <_vfiprintf_r+0x22c>
 800e26a:	7821      	ldrb	r1, [r4, #0]
 800e26c:	2203      	movs	r2, #3
 800e26e:	4650      	mov	r0, sl
 800e270:	f7f1 ffb6 	bl	80001e0 <memchr>
 800e274:	b138      	cbz	r0, 800e286 <_vfiprintf_r+0x176>
 800e276:	9b04      	ldr	r3, [sp, #16]
 800e278:	eba0 000a 	sub.w	r0, r0, sl
 800e27c:	2240      	movs	r2, #64	@ 0x40
 800e27e:	4082      	lsls	r2, r0
 800e280:	4313      	orrs	r3, r2
 800e282:	3401      	adds	r4, #1
 800e284:	9304      	str	r3, [sp, #16]
 800e286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e28a:	4829      	ldr	r0, [pc, #164]	@ (800e330 <_vfiprintf_r+0x220>)
 800e28c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e290:	2206      	movs	r2, #6
 800e292:	f7f1 ffa5 	bl	80001e0 <memchr>
 800e296:	2800      	cmp	r0, #0
 800e298:	d03f      	beq.n	800e31a <_vfiprintf_r+0x20a>
 800e29a:	4b26      	ldr	r3, [pc, #152]	@ (800e334 <_vfiprintf_r+0x224>)
 800e29c:	bb1b      	cbnz	r3, 800e2e6 <_vfiprintf_r+0x1d6>
 800e29e:	9b03      	ldr	r3, [sp, #12]
 800e2a0:	3307      	adds	r3, #7
 800e2a2:	f023 0307 	bic.w	r3, r3, #7
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	9303      	str	r3, [sp, #12]
 800e2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ac:	443b      	add	r3, r7
 800e2ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2b0:	e76a      	b.n	800e188 <_vfiprintf_r+0x78>
 800e2b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	2001      	movs	r0, #1
 800e2ba:	e7a8      	b.n	800e20e <_vfiprintf_r+0xfe>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	3401      	adds	r4, #1
 800e2c0:	9305      	str	r3, [sp, #20]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	f04f 0c0a 	mov.w	ip, #10
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ce:	3a30      	subs	r2, #48	@ 0x30
 800e2d0:	2a09      	cmp	r2, #9
 800e2d2:	d903      	bls.n	800e2dc <_vfiprintf_r+0x1cc>
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d0c6      	beq.n	800e266 <_vfiprintf_r+0x156>
 800e2d8:	9105      	str	r1, [sp, #20]
 800e2da:	e7c4      	b.n	800e266 <_vfiprintf_r+0x156>
 800e2dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e7f0      	b.n	800e2c8 <_vfiprintf_r+0x1b8>
 800e2e6:	ab03      	add	r3, sp, #12
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	4b12      	ldr	r3, [pc, #72]	@ (800e338 <_vfiprintf_r+0x228>)
 800e2ee:	a904      	add	r1, sp, #16
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7fc f977 	bl	800a5e4 <_printf_float>
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	1c78      	adds	r0, r7, #1
 800e2fa:	d1d6      	bne.n	800e2aa <_vfiprintf_r+0x19a>
 800e2fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2fe:	07d9      	lsls	r1, r3, #31
 800e300:	d405      	bmi.n	800e30e <_vfiprintf_r+0x1fe>
 800e302:	89ab      	ldrh	r3, [r5, #12]
 800e304:	059a      	lsls	r2, r3, #22
 800e306:	d402      	bmi.n	800e30e <_vfiprintf_r+0x1fe>
 800e308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e30a:	f7fd f987 	bl	800b61c <__retarget_lock_release_recursive>
 800e30e:	89ab      	ldrh	r3, [r5, #12]
 800e310:	065b      	lsls	r3, r3, #25
 800e312:	f53f af1f 	bmi.w	800e154 <_vfiprintf_r+0x44>
 800e316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e318:	e71e      	b.n	800e158 <_vfiprintf_r+0x48>
 800e31a:	ab03      	add	r3, sp, #12
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	462a      	mov	r2, r5
 800e320:	4b05      	ldr	r3, [pc, #20]	@ (800e338 <_vfiprintf_r+0x228>)
 800e322:	a904      	add	r1, sp, #16
 800e324:	4630      	mov	r0, r6
 800e326:	f7fc fbf5 	bl	800ab14 <_printf_i>
 800e32a:	e7e4      	b.n	800e2f6 <_vfiprintf_r+0x1e6>
 800e32c:	080101b0 	.word	0x080101b0
 800e330:	080101ba 	.word	0x080101ba
 800e334:	0800a5e5 	.word	0x0800a5e5
 800e338:	0800e0eb 	.word	0x0800e0eb
 800e33c:	080101b6 	.word	0x080101b6

0800e340 <_scanf_chars>:
 800e340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e344:	4615      	mov	r5, r2
 800e346:	688a      	ldr	r2, [r1, #8]
 800e348:	4680      	mov	r8, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	b932      	cbnz	r2, 800e35c <_scanf_chars+0x1c>
 800e34e:	698a      	ldr	r2, [r1, #24]
 800e350:	2a00      	cmp	r2, #0
 800e352:	bf14      	ite	ne
 800e354:	f04f 32ff 	movne.w	r2, #4294967295
 800e358:	2201      	moveq	r2, #1
 800e35a:	608a      	str	r2, [r1, #8]
 800e35c:	6822      	ldr	r2, [r4, #0]
 800e35e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e3f0 <_scanf_chars+0xb0>
 800e362:	06d1      	lsls	r1, r2, #27
 800e364:	bf5f      	itttt	pl
 800e366:	681a      	ldrpl	r2, [r3, #0]
 800e368:	1d11      	addpl	r1, r2, #4
 800e36a:	6019      	strpl	r1, [r3, #0]
 800e36c:	6816      	ldrpl	r6, [r2, #0]
 800e36e:	2700      	movs	r7, #0
 800e370:	69a0      	ldr	r0, [r4, #24]
 800e372:	b188      	cbz	r0, 800e398 <_scanf_chars+0x58>
 800e374:	2801      	cmp	r0, #1
 800e376:	d107      	bne.n	800e388 <_scanf_chars+0x48>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	781a      	ldrb	r2, [r3, #0]
 800e37c:	6963      	ldr	r3, [r4, #20]
 800e37e:	5c9b      	ldrb	r3, [r3, r2]
 800e380:	b953      	cbnz	r3, 800e398 <_scanf_chars+0x58>
 800e382:	2f00      	cmp	r7, #0
 800e384:	d031      	beq.n	800e3ea <_scanf_chars+0xaa>
 800e386:	e022      	b.n	800e3ce <_scanf_chars+0x8e>
 800e388:	2802      	cmp	r0, #2
 800e38a:	d120      	bne.n	800e3ce <_scanf_chars+0x8e>
 800e38c:	682b      	ldr	r3, [r5, #0]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e394:	071b      	lsls	r3, r3, #28
 800e396:	d41a      	bmi.n	800e3ce <_scanf_chars+0x8e>
 800e398:	6823      	ldr	r3, [r4, #0]
 800e39a:	06da      	lsls	r2, r3, #27
 800e39c:	bf5e      	ittt	pl
 800e39e:	682b      	ldrpl	r3, [r5, #0]
 800e3a0:	781b      	ldrbpl	r3, [r3, #0]
 800e3a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e3a6:	682a      	ldr	r2, [r5, #0]
 800e3a8:	686b      	ldr	r3, [r5, #4]
 800e3aa:	3201      	adds	r2, #1
 800e3ac:	602a      	str	r2, [r5, #0]
 800e3ae:	68a2      	ldr	r2, [r4, #8]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	3a01      	subs	r2, #1
 800e3b4:	606b      	str	r3, [r5, #4]
 800e3b6:	3701      	adds	r7, #1
 800e3b8:	60a2      	str	r2, [r4, #8]
 800e3ba:	b142      	cbz	r2, 800e3ce <_scanf_chars+0x8e>
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	dcd7      	bgt.n	800e370 <_scanf_chars+0x30>
 800e3c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4798      	blx	r3
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d0d0      	beq.n	800e370 <_scanf_chars+0x30>
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	f013 0310 	ands.w	r3, r3, #16
 800e3d4:	d105      	bne.n	800e3e2 <_scanf_chars+0xa2>
 800e3d6:	68e2      	ldr	r2, [r4, #12]
 800e3d8:	3201      	adds	r2, #1
 800e3da:	60e2      	str	r2, [r4, #12]
 800e3dc:	69a2      	ldr	r2, [r4, #24]
 800e3de:	b102      	cbz	r2, 800e3e2 <_scanf_chars+0xa2>
 800e3e0:	7033      	strb	r3, [r6, #0]
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	443b      	add	r3, r7
 800e3e6:	6123      	str	r3, [r4, #16]
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0800fda5 	.word	0x0800fda5

0800e3f4 <_scanf_i>:
 800e3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	4698      	mov	r8, r3
 800e3fa:	4b74      	ldr	r3, [pc, #464]	@ (800e5cc <_scanf_i+0x1d8>)
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	4682      	mov	sl, r0
 800e400:	4616      	mov	r6, r2
 800e402:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e406:	b087      	sub	sp, #28
 800e408:	ab03      	add	r3, sp, #12
 800e40a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e40e:	4b70      	ldr	r3, [pc, #448]	@ (800e5d0 <_scanf_i+0x1dc>)
 800e410:	69a1      	ldr	r1, [r4, #24]
 800e412:	4a70      	ldr	r2, [pc, #448]	@ (800e5d4 <_scanf_i+0x1e0>)
 800e414:	2903      	cmp	r1, #3
 800e416:	bf08      	it	eq
 800e418:	461a      	moveq	r2, r3
 800e41a:	68a3      	ldr	r3, [r4, #8]
 800e41c:	9201      	str	r2, [sp, #4]
 800e41e:	1e5a      	subs	r2, r3, #1
 800e420:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e424:	bf88      	it	hi
 800e426:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e42a:	4627      	mov	r7, r4
 800e42c:	bf82      	ittt	hi
 800e42e:	eb03 0905 	addhi.w	r9, r3, r5
 800e432:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e436:	60a3      	strhi	r3, [r4, #8]
 800e438:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e43c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e440:	bf98      	it	ls
 800e442:	f04f 0900 	movls.w	r9, #0
 800e446:	6023      	str	r3, [r4, #0]
 800e448:	463d      	mov	r5, r7
 800e44a:	f04f 0b00 	mov.w	fp, #0
 800e44e:	6831      	ldr	r1, [r6, #0]
 800e450:	ab03      	add	r3, sp, #12
 800e452:	7809      	ldrb	r1, [r1, #0]
 800e454:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e458:	2202      	movs	r2, #2
 800e45a:	f7f1 fec1 	bl	80001e0 <memchr>
 800e45e:	b328      	cbz	r0, 800e4ac <_scanf_i+0xb8>
 800e460:	f1bb 0f01 	cmp.w	fp, #1
 800e464:	d159      	bne.n	800e51a <_scanf_i+0x126>
 800e466:	6862      	ldr	r2, [r4, #4]
 800e468:	b92a      	cbnz	r2, 800e476 <_scanf_i+0x82>
 800e46a:	6822      	ldr	r2, [r4, #0]
 800e46c:	2108      	movs	r1, #8
 800e46e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e472:	6061      	str	r1, [r4, #4]
 800e474:	6022      	str	r2, [r4, #0]
 800e476:	6822      	ldr	r2, [r4, #0]
 800e478:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e47c:	6022      	str	r2, [r4, #0]
 800e47e:	68a2      	ldr	r2, [r4, #8]
 800e480:	1e51      	subs	r1, r2, #1
 800e482:	60a1      	str	r1, [r4, #8]
 800e484:	b192      	cbz	r2, 800e4ac <_scanf_i+0xb8>
 800e486:	6832      	ldr	r2, [r6, #0]
 800e488:	1c51      	adds	r1, r2, #1
 800e48a:	6031      	str	r1, [r6, #0]
 800e48c:	7812      	ldrb	r2, [r2, #0]
 800e48e:	f805 2b01 	strb.w	r2, [r5], #1
 800e492:	6872      	ldr	r2, [r6, #4]
 800e494:	3a01      	subs	r2, #1
 800e496:	2a00      	cmp	r2, #0
 800e498:	6072      	str	r2, [r6, #4]
 800e49a:	dc07      	bgt.n	800e4ac <_scanf_i+0xb8>
 800e49c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	4650      	mov	r0, sl
 800e4a4:	4790      	blx	r2
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f040 8085 	bne.w	800e5b6 <_scanf_i+0x1c2>
 800e4ac:	f10b 0b01 	add.w	fp, fp, #1
 800e4b0:	f1bb 0f03 	cmp.w	fp, #3
 800e4b4:	d1cb      	bne.n	800e44e <_scanf_i+0x5a>
 800e4b6:	6863      	ldr	r3, [r4, #4]
 800e4b8:	b90b      	cbnz	r3, 800e4be <_scanf_i+0xca>
 800e4ba:	230a      	movs	r3, #10
 800e4bc:	6063      	str	r3, [r4, #4]
 800e4be:	6863      	ldr	r3, [r4, #4]
 800e4c0:	4945      	ldr	r1, [pc, #276]	@ (800e5d8 <_scanf_i+0x1e4>)
 800e4c2:	6960      	ldr	r0, [r4, #20]
 800e4c4:	1ac9      	subs	r1, r1, r3
 800e4c6:	f000 f947 	bl	800e758 <__sccl>
 800e4ca:	f04f 0b00 	mov.w	fp, #0
 800e4ce:	68a3      	ldr	r3, [r4, #8]
 800e4d0:	6822      	ldr	r2, [r4, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d03d      	beq.n	800e552 <_scanf_i+0x15e>
 800e4d6:	6831      	ldr	r1, [r6, #0]
 800e4d8:	6960      	ldr	r0, [r4, #20]
 800e4da:	f891 c000 	ldrb.w	ip, [r1]
 800e4de:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d035      	beq.n	800e552 <_scanf_i+0x15e>
 800e4e6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e4ea:	d124      	bne.n	800e536 <_scanf_i+0x142>
 800e4ec:	0510      	lsls	r0, r2, #20
 800e4ee:	d522      	bpl.n	800e536 <_scanf_i+0x142>
 800e4f0:	f10b 0b01 	add.w	fp, fp, #1
 800e4f4:	f1b9 0f00 	cmp.w	r9, #0
 800e4f8:	d003      	beq.n	800e502 <_scanf_i+0x10e>
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	f109 39ff 	add.w	r9, r9, #4294967295
 800e500:	60a3      	str	r3, [r4, #8]
 800e502:	6873      	ldr	r3, [r6, #4]
 800e504:	3b01      	subs	r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	6073      	str	r3, [r6, #4]
 800e50a:	dd1b      	ble.n	800e544 <_scanf_i+0x150>
 800e50c:	6833      	ldr	r3, [r6, #0]
 800e50e:	3301      	adds	r3, #1
 800e510:	6033      	str	r3, [r6, #0]
 800e512:	68a3      	ldr	r3, [r4, #8]
 800e514:	3b01      	subs	r3, #1
 800e516:	60a3      	str	r3, [r4, #8]
 800e518:	e7d9      	b.n	800e4ce <_scanf_i+0xda>
 800e51a:	f1bb 0f02 	cmp.w	fp, #2
 800e51e:	d1ae      	bne.n	800e47e <_scanf_i+0x8a>
 800e520:	6822      	ldr	r2, [r4, #0]
 800e522:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e526:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e52a:	d1bf      	bne.n	800e4ac <_scanf_i+0xb8>
 800e52c:	2110      	movs	r1, #16
 800e52e:	6061      	str	r1, [r4, #4]
 800e530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e534:	e7a2      	b.n	800e47c <_scanf_i+0x88>
 800e536:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e53a:	6022      	str	r2, [r4, #0]
 800e53c:	780b      	ldrb	r3, [r1, #0]
 800e53e:	f805 3b01 	strb.w	r3, [r5], #1
 800e542:	e7de      	b.n	800e502 <_scanf_i+0x10e>
 800e544:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e548:	4631      	mov	r1, r6
 800e54a:	4650      	mov	r0, sl
 800e54c:	4798      	blx	r3
 800e54e:	2800      	cmp	r0, #0
 800e550:	d0df      	beq.n	800e512 <_scanf_i+0x11e>
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	05d9      	lsls	r1, r3, #23
 800e556:	d50d      	bpl.n	800e574 <_scanf_i+0x180>
 800e558:	42bd      	cmp	r5, r7
 800e55a:	d909      	bls.n	800e570 <_scanf_i+0x17c>
 800e55c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e560:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e564:	4632      	mov	r2, r6
 800e566:	4650      	mov	r0, sl
 800e568:	4798      	blx	r3
 800e56a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e56e:	464d      	mov	r5, r9
 800e570:	42bd      	cmp	r5, r7
 800e572:	d028      	beq.n	800e5c6 <_scanf_i+0x1d2>
 800e574:	6822      	ldr	r2, [r4, #0]
 800e576:	f012 0210 	ands.w	r2, r2, #16
 800e57a:	d113      	bne.n	800e5a4 <_scanf_i+0x1b0>
 800e57c:	702a      	strb	r2, [r5, #0]
 800e57e:	6863      	ldr	r3, [r4, #4]
 800e580:	9e01      	ldr	r6, [sp, #4]
 800e582:	4639      	mov	r1, r7
 800e584:	4650      	mov	r0, sl
 800e586:	47b0      	blx	r6
 800e588:	f8d8 3000 	ldr.w	r3, [r8]
 800e58c:	6821      	ldr	r1, [r4, #0]
 800e58e:	1d1a      	adds	r2, r3, #4
 800e590:	f8c8 2000 	str.w	r2, [r8]
 800e594:	f011 0f20 	tst.w	r1, #32
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	d00f      	beq.n	800e5bc <_scanf_i+0x1c8>
 800e59c:	6018      	str	r0, [r3, #0]
 800e59e:	68e3      	ldr	r3, [r4, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	60e3      	str	r3, [r4, #12]
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	1bed      	subs	r5, r5, r7
 800e5a8:	445d      	add	r5, fp
 800e5aa:	442b      	add	r3, r5
 800e5ac:	6123      	str	r3, [r4, #16]
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	b007      	add	sp, #28
 800e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b6:	f04f 0b00 	mov.w	fp, #0
 800e5ba:	e7ca      	b.n	800e552 <_scanf_i+0x15e>
 800e5bc:	07ca      	lsls	r2, r1, #31
 800e5be:	bf4c      	ite	mi
 800e5c0:	8018      	strhmi	r0, [r3, #0]
 800e5c2:	6018      	strpl	r0, [r3, #0]
 800e5c4:	e7eb      	b.n	800e59e <_scanf_i+0x1aa>
 800e5c6:	2001      	movs	r0, #1
 800e5c8:	e7f2      	b.n	800e5b0 <_scanf_i+0x1bc>
 800e5ca:	bf00      	nop
 800e5cc:	0800fd60 	.word	0x0800fd60
 800e5d0:	0800a48d 	.word	0x0800a48d
 800e5d4:	0800f1ed 	.word	0x0800f1ed
 800e5d8:	080101d1 	.word	0x080101d1

0800e5dc <__sflush_r>:
 800e5dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e4:	0716      	lsls	r6, r2, #28
 800e5e6:	4605      	mov	r5, r0
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	d454      	bmi.n	800e696 <__sflush_r+0xba>
 800e5ec:	684b      	ldr	r3, [r1, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	dc02      	bgt.n	800e5f8 <__sflush_r+0x1c>
 800e5f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	dd48      	ble.n	800e68a <__sflush_r+0xae>
 800e5f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5fa:	2e00      	cmp	r6, #0
 800e5fc:	d045      	beq.n	800e68a <__sflush_r+0xae>
 800e5fe:	2300      	movs	r3, #0
 800e600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e604:	682f      	ldr	r7, [r5, #0]
 800e606:	6a21      	ldr	r1, [r4, #32]
 800e608:	602b      	str	r3, [r5, #0]
 800e60a:	d030      	beq.n	800e66e <__sflush_r+0x92>
 800e60c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	0759      	lsls	r1, r3, #29
 800e612:	d505      	bpl.n	800e620 <__sflush_r+0x44>
 800e614:	6863      	ldr	r3, [r4, #4]
 800e616:	1ad2      	subs	r2, r2, r3
 800e618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e61a:	b10b      	cbz	r3, 800e620 <__sflush_r+0x44>
 800e61c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e61e:	1ad2      	subs	r2, r2, r3
 800e620:	2300      	movs	r3, #0
 800e622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e624:	6a21      	ldr	r1, [r4, #32]
 800e626:	4628      	mov	r0, r5
 800e628:	47b0      	blx	r6
 800e62a:	1c43      	adds	r3, r0, #1
 800e62c:	89a3      	ldrh	r3, [r4, #12]
 800e62e:	d106      	bne.n	800e63e <__sflush_r+0x62>
 800e630:	6829      	ldr	r1, [r5, #0]
 800e632:	291d      	cmp	r1, #29
 800e634:	d82b      	bhi.n	800e68e <__sflush_r+0xb2>
 800e636:	4a2a      	ldr	r2, [pc, #168]	@ (800e6e0 <__sflush_r+0x104>)
 800e638:	410a      	asrs	r2, r1
 800e63a:	07d6      	lsls	r6, r2, #31
 800e63c:	d427      	bmi.n	800e68e <__sflush_r+0xb2>
 800e63e:	2200      	movs	r2, #0
 800e640:	6062      	str	r2, [r4, #4]
 800e642:	04d9      	lsls	r1, r3, #19
 800e644:	6922      	ldr	r2, [r4, #16]
 800e646:	6022      	str	r2, [r4, #0]
 800e648:	d504      	bpl.n	800e654 <__sflush_r+0x78>
 800e64a:	1c42      	adds	r2, r0, #1
 800e64c:	d101      	bne.n	800e652 <__sflush_r+0x76>
 800e64e:	682b      	ldr	r3, [r5, #0]
 800e650:	b903      	cbnz	r3, 800e654 <__sflush_r+0x78>
 800e652:	6560      	str	r0, [r4, #84]	@ 0x54
 800e654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e656:	602f      	str	r7, [r5, #0]
 800e658:	b1b9      	cbz	r1, 800e68a <__sflush_r+0xae>
 800e65a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e65e:	4299      	cmp	r1, r3
 800e660:	d002      	beq.n	800e668 <__sflush_r+0x8c>
 800e662:	4628      	mov	r0, r5
 800e664:	f7fd fe4c 	bl	800c300 <_free_r>
 800e668:	2300      	movs	r3, #0
 800e66a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e66c:	e00d      	b.n	800e68a <__sflush_r+0xae>
 800e66e:	2301      	movs	r3, #1
 800e670:	4628      	mov	r0, r5
 800e672:	47b0      	blx	r6
 800e674:	4602      	mov	r2, r0
 800e676:	1c50      	adds	r0, r2, #1
 800e678:	d1c9      	bne.n	800e60e <__sflush_r+0x32>
 800e67a:	682b      	ldr	r3, [r5, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d0c6      	beq.n	800e60e <__sflush_r+0x32>
 800e680:	2b1d      	cmp	r3, #29
 800e682:	d001      	beq.n	800e688 <__sflush_r+0xac>
 800e684:	2b16      	cmp	r3, #22
 800e686:	d11e      	bne.n	800e6c6 <__sflush_r+0xea>
 800e688:	602f      	str	r7, [r5, #0]
 800e68a:	2000      	movs	r0, #0
 800e68c:	e022      	b.n	800e6d4 <__sflush_r+0xf8>
 800e68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e692:	b21b      	sxth	r3, r3
 800e694:	e01b      	b.n	800e6ce <__sflush_r+0xf2>
 800e696:	690f      	ldr	r7, [r1, #16]
 800e698:	2f00      	cmp	r7, #0
 800e69a:	d0f6      	beq.n	800e68a <__sflush_r+0xae>
 800e69c:	0793      	lsls	r3, r2, #30
 800e69e:	680e      	ldr	r6, [r1, #0]
 800e6a0:	bf08      	it	eq
 800e6a2:	694b      	ldreq	r3, [r1, #20]
 800e6a4:	600f      	str	r7, [r1, #0]
 800e6a6:	bf18      	it	ne
 800e6a8:	2300      	movne	r3, #0
 800e6aa:	eba6 0807 	sub.w	r8, r6, r7
 800e6ae:	608b      	str	r3, [r1, #8]
 800e6b0:	f1b8 0f00 	cmp.w	r8, #0
 800e6b4:	dde9      	ble.n	800e68a <__sflush_r+0xae>
 800e6b6:	6a21      	ldr	r1, [r4, #32]
 800e6b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6ba:	4643      	mov	r3, r8
 800e6bc:	463a      	mov	r2, r7
 800e6be:	4628      	mov	r0, r5
 800e6c0:	47b0      	blx	r6
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	dc08      	bgt.n	800e6d8 <__sflush_r+0xfc>
 800e6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ce:	81a3      	strh	r3, [r4, #12]
 800e6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d8:	4407      	add	r7, r0
 800e6da:	eba8 0800 	sub.w	r8, r8, r0
 800e6de:	e7e7      	b.n	800e6b0 <__sflush_r+0xd4>
 800e6e0:	dfbffffe 	.word	0xdfbffffe

0800e6e4 <_fflush_r>:
 800e6e4:	b538      	push	{r3, r4, r5, lr}
 800e6e6:	690b      	ldr	r3, [r1, #16]
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	b913      	cbnz	r3, 800e6f4 <_fflush_r+0x10>
 800e6ee:	2500      	movs	r5, #0
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	bd38      	pop	{r3, r4, r5, pc}
 800e6f4:	b118      	cbz	r0, 800e6fe <_fflush_r+0x1a>
 800e6f6:	6a03      	ldr	r3, [r0, #32]
 800e6f8:	b90b      	cbnz	r3, 800e6fe <_fflush_r+0x1a>
 800e6fa:	f7fc fdcb 	bl	800b294 <__sinit>
 800e6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d0f3      	beq.n	800e6ee <_fflush_r+0xa>
 800e706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e708:	07d0      	lsls	r0, r2, #31
 800e70a:	d404      	bmi.n	800e716 <_fflush_r+0x32>
 800e70c:	0599      	lsls	r1, r3, #22
 800e70e:	d402      	bmi.n	800e716 <_fflush_r+0x32>
 800e710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e712:	f7fc ff82 	bl	800b61a <__retarget_lock_acquire_recursive>
 800e716:	4628      	mov	r0, r5
 800e718:	4621      	mov	r1, r4
 800e71a:	f7ff ff5f 	bl	800e5dc <__sflush_r>
 800e71e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e720:	07da      	lsls	r2, r3, #31
 800e722:	4605      	mov	r5, r0
 800e724:	d4e4      	bmi.n	800e6f0 <_fflush_r+0xc>
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	059b      	lsls	r3, r3, #22
 800e72a:	d4e1      	bmi.n	800e6f0 <_fflush_r+0xc>
 800e72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e72e:	f7fc ff75 	bl	800b61c <__retarget_lock_release_recursive>
 800e732:	e7dd      	b.n	800e6f0 <_fflush_r+0xc>

0800e734 <fiprintf>:
 800e734:	b40e      	push	{r1, r2, r3}
 800e736:	b503      	push	{r0, r1, lr}
 800e738:	4601      	mov	r1, r0
 800e73a:	ab03      	add	r3, sp, #12
 800e73c:	4805      	ldr	r0, [pc, #20]	@ (800e754 <fiprintf+0x20>)
 800e73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e742:	6800      	ldr	r0, [r0, #0]
 800e744:	9301      	str	r3, [sp, #4]
 800e746:	f7ff fce3 	bl	800e110 <_vfiprintf_r>
 800e74a:	b002      	add	sp, #8
 800e74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e750:	b003      	add	sp, #12
 800e752:	4770      	bx	lr
 800e754:	20000020 	.word	0x20000020

0800e758 <__sccl>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	780b      	ldrb	r3, [r1, #0]
 800e75c:	4604      	mov	r4, r0
 800e75e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e760:	bf0b      	itete	eq
 800e762:	784b      	ldrbeq	r3, [r1, #1]
 800e764:	1c4a      	addne	r2, r1, #1
 800e766:	1c8a      	addeq	r2, r1, #2
 800e768:	2100      	movne	r1, #0
 800e76a:	bf08      	it	eq
 800e76c:	2101      	moveq	r1, #1
 800e76e:	3801      	subs	r0, #1
 800e770:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e774:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e778:	42a8      	cmp	r0, r5
 800e77a:	d1fb      	bne.n	800e774 <__sccl+0x1c>
 800e77c:	b90b      	cbnz	r3, 800e782 <__sccl+0x2a>
 800e77e:	1e50      	subs	r0, r2, #1
 800e780:	bd70      	pop	{r4, r5, r6, pc}
 800e782:	f081 0101 	eor.w	r1, r1, #1
 800e786:	54e1      	strb	r1, [r4, r3]
 800e788:	4610      	mov	r0, r2
 800e78a:	4602      	mov	r2, r0
 800e78c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e790:	2d2d      	cmp	r5, #45	@ 0x2d
 800e792:	d005      	beq.n	800e7a0 <__sccl+0x48>
 800e794:	2d5d      	cmp	r5, #93	@ 0x5d
 800e796:	d016      	beq.n	800e7c6 <__sccl+0x6e>
 800e798:	2d00      	cmp	r5, #0
 800e79a:	d0f1      	beq.n	800e780 <__sccl+0x28>
 800e79c:	462b      	mov	r3, r5
 800e79e:	e7f2      	b.n	800e786 <__sccl+0x2e>
 800e7a0:	7846      	ldrb	r6, [r0, #1]
 800e7a2:	2e5d      	cmp	r6, #93	@ 0x5d
 800e7a4:	d0fa      	beq.n	800e79c <__sccl+0x44>
 800e7a6:	42b3      	cmp	r3, r6
 800e7a8:	dcf8      	bgt.n	800e79c <__sccl+0x44>
 800e7aa:	3002      	adds	r0, #2
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	3201      	adds	r2, #1
 800e7b0:	4296      	cmp	r6, r2
 800e7b2:	54a1      	strb	r1, [r4, r2]
 800e7b4:	dcfb      	bgt.n	800e7ae <__sccl+0x56>
 800e7b6:	1af2      	subs	r2, r6, r3
 800e7b8:	3a01      	subs	r2, #1
 800e7ba:	1c5d      	adds	r5, r3, #1
 800e7bc:	42b3      	cmp	r3, r6
 800e7be:	bfa8      	it	ge
 800e7c0:	2200      	movge	r2, #0
 800e7c2:	18ab      	adds	r3, r5, r2
 800e7c4:	e7e1      	b.n	800e78a <__sccl+0x32>
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	e7da      	b.n	800e780 <__sccl+0x28>

0800e7ca <__submore>:
 800e7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e7d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7d6:	4299      	cmp	r1, r3
 800e7d8:	d11d      	bne.n	800e816 <__submore+0x4c>
 800e7da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e7de:	f7fd fe03 	bl	800c3e8 <_malloc_r>
 800e7e2:	b918      	cbnz	r0, 800e7ec <__submore+0x22>
 800e7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e7f2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e7f6:	6360      	str	r0, [r4, #52]	@ 0x34
 800e7f8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e7fc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e800:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e804:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e808:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e80c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e810:	6020      	str	r0, [r4, #0]
 800e812:	2000      	movs	r0, #0
 800e814:	e7e8      	b.n	800e7e8 <__submore+0x1e>
 800e816:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e818:	0077      	lsls	r7, r6, #1
 800e81a:	463a      	mov	r2, r7
 800e81c:	f000 fc49 	bl	800f0b2 <_realloc_r>
 800e820:	4605      	mov	r5, r0
 800e822:	2800      	cmp	r0, #0
 800e824:	d0de      	beq.n	800e7e4 <__submore+0x1a>
 800e826:	eb00 0806 	add.w	r8, r0, r6
 800e82a:	4601      	mov	r1, r0
 800e82c:	4632      	mov	r2, r6
 800e82e:	4640      	mov	r0, r8
 800e830:	f000 f8c4 	bl	800e9bc <memcpy>
 800e834:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e838:	f8c4 8000 	str.w	r8, [r4]
 800e83c:	e7e9      	b.n	800e812 <__submore+0x48>

0800e83e <__swbuf_r>:
 800e83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e840:	460e      	mov	r6, r1
 800e842:	4614      	mov	r4, r2
 800e844:	4605      	mov	r5, r0
 800e846:	b118      	cbz	r0, 800e850 <__swbuf_r+0x12>
 800e848:	6a03      	ldr	r3, [r0, #32]
 800e84a:	b90b      	cbnz	r3, 800e850 <__swbuf_r+0x12>
 800e84c:	f7fc fd22 	bl	800b294 <__sinit>
 800e850:	69a3      	ldr	r3, [r4, #24]
 800e852:	60a3      	str	r3, [r4, #8]
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	071a      	lsls	r2, r3, #28
 800e858:	d501      	bpl.n	800e85e <__swbuf_r+0x20>
 800e85a:	6923      	ldr	r3, [r4, #16]
 800e85c:	b943      	cbnz	r3, 800e870 <__swbuf_r+0x32>
 800e85e:	4621      	mov	r1, r4
 800e860:	4628      	mov	r0, r5
 800e862:	f000 f82b 	bl	800e8bc <__swsetup_r>
 800e866:	b118      	cbz	r0, 800e870 <__swbuf_r+0x32>
 800e868:	f04f 37ff 	mov.w	r7, #4294967295
 800e86c:	4638      	mov	r0, r7
 800e86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	6922      	ldr	r2, [r4, #16]
 800e874:	1a98      	subs	r0, r3, r2
 800e876:	6963      	ldr	r3, [r4, #20]
 800e878:	b2f6      	uxtb	r6, r6
 800e87a:	4283      	cmp	r3, r0
 800e87c:	4637      	mov	r7, r6
 800e87e:	dc05      	bgt.n	800e88c <__swbuf_r+0x4e>
 800e880:	4621      	mov	r1, r4
 800e882:	4628      	mov	r0, r5
 800e884:	f7ff ff2e 	bl	800e6e4 <_fflush_r>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d1ed      	bne.n	800e868 <__swbuf_r+0x2a>
 800e88c:	68a3      	ldr	r3, [r4, #8]
 800e88e:	3b01      	subs	r3, #1
 800e890:	60a3      	str	r3, [r4, #8]
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	6022      	str	r2, [r4, #0]
 800e898:	701e      	strb	r6, [r3, #0]
 800e89a:	6962      	ldr	r2, [r4, #20]
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d004      	beq.n	800e8ac <__swbuf_r+0x6e>
 800e8a2:	89a3      	ldrh	r3, [r4, #12]
 800e8a4:	07db      	lsls	r3, r3, #31
 800e8a6:	d5e1      	bpl.n	800e86c <__swbuf_r+0x2e>
 800e8a8:	2e0a      	cmp	r6, #10
 800e8aa:	d1df      	bne.n	800e86c <__swbuf_r+0x2e>
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	f7ff ff18 	bl	800e6e4 <_fflush_r>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	d0d9      	beq.n	800e86c <__swbuf_r+0x2e>
 800e8b8:	e7d6      	b.n	800e868 <__swbuf_r+0x2a>
	...

0800e8bc <__swsetup_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4b29      	ldr	r3, [pc, #164]	@ (800e964 <__swsetup_r+0xa8>)
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	6818      	ldr	r0, [r3, #0]
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	b118      	cbz	r0, 800e8d0 <__swsetup_r+0x14>
 800e8c8:	6a03      	ldr	r3, [r0, #32]
 800e8ca:	b90b      	cbnz	r3, 800e8d0 <__swsetup_r+0x14>
 800e8cc:	f7fc fce2 	bl	800b294 <__sinit>
 800e8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d4:	0719      	lsls	r1, r3, #28
 800e8d6:	d422      	bmi.n	800e91e <__swsetup_r+0x62>
 800e8d8:	06da      	lsls	r2, r3, #27
 800e8da:	d407      	bmi.n	800e8ec <__swsetup_r+0x30>
 800e8dc:	2209      	movs	r2, #9
 800e8de:	602a      	str	r2, [r5, #0]
 800e8e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8e4:	81a3      	strh	r3, [r4, #12]
 800e8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ea:	e033      	b.n	800e954 <__swsetup_r+0x98>
 800e8ec:	0758      	lsls	r0, r3, #29
 800e8ee:	d512      	bpl.n	800e916 <__swsetup_r+0x5a>
 800e8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8f2:	b141      	cbz	r1, 800e906 <__swsetup_r+0x4a>
 800e8f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8f8:	4299      	cmp	r1, r3
 800e8fa:	d002      	beq.n	800e902 <__swsetup_r+0x46>
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f7fd fcff 	bl	800c300 <_free_r>
 800e902:	2300      	movs	r3, #0
 800e904:	6363      	str	r3, [r4, #52]	@ 0x34
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e90c:	81a3      	strh	r3, [r4, #12]
 800e90e:	2300      	movs	r3, #0
 800e910:	6063      	str	r3, [r4, #4]
 800e912:	6923      	ldr	r3, [r4, #16]
 800e914:	6023      	str	r3, [r4, #0]
 800e916:	89a3      	ldrh	r3, [r4, #12]
 800e918:	f043 0308 	orr.w	r3, r3, #8
 800e91c:	81a3      	strh	r3, [r4, #12]
 800e91e:	6923      	ldr	r3, [r4, #16]
 800e920:	b94b      	cbnz	r3, 800e936 <__swsetup_r+0x7a>
 800e922:	89a3      	ldrh	r3, [r4, #12]
 800e924:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e92c:	d003      	beq.n	800e936 <__swsetup_r+0x7a>
 800e92e:	4621      	mov	r1, r4
 800e930:	4628      	mov	r0, r5
 800e932:	f000 fc90 	bl	800f256 <__smakebuf_r>
 800e936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e93a:	f013 0201 	ands.w	r2, r3, #1
 800e93e:	d00a      	beq.n	800e956 <__swsetup_r+0x9a>
 800e940:	2200      	movs	r2, #0
 800e942:	60a2      	str	r2, [r4, #8]
 800e944:	6962      	ldr	r2, [r4, #20]
 800e946:	4252      	negs	r2, r2
 800e948:	61a2      	str	r2, [r4, #24]
 800e94a:	6922      	ldr	r2, [r4, #16]
 800e94c:	b942      	cbnz	r2, 800e960 <__swsetup_r+0xa4>
 800e94e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e952:	d1c5      	bne.n	800e8e0 <__swsetup_r+0x24>
 800e954:	bd38      	pop	{r3, r4, r5, pc}
 800e956:	0799      	lsls	r1, r3, #30
 800e958:	bf58      	it	pl
 800e95a:	6962      	ldrpl	r2, [r4, #20]
 800e95c:	60a2      	str	r2, [r4, #8]
 800e95e:	e7f4      	b.n	800e94a <__swsetup_r+0x8e>
 800e960:	2000      	movs	r0, #0
 800e962:	e7f7      	b.n	800e954 <__swsetup_r+0x98>
 800e964:	20000020 	.word	0x20000020

0800e968 <memmove>:
 800e968:	4288      	cmp	r0, r1
 800e96a:	b510      	push	{r4, lr}
 800e96c:	eb01 0402 	add.w	r4, r1, r2
 800e970:	d902      	bls.n	800e978 <memmove+0x10>
 800e972:	4284      	cmp	r4, r0
 800e974:	4623      	mov	r3, r4
 800e976:	d807      	bhi.n	800e988 <memmove+0x20>
 800e978:	1e43      	subs	r3, r0, #1
 800e97a:	42a1      	cmp	r1, r4
 800e97c:	d008      	beq.n	800e990 <memmove+0x28>
 800e97e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e982:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e986:	e7f8      	b.n	800e97a <memmove+0x12>
 800e988:	4402      	add	r2, r0
 800e98a:	4601      	mov	r1, r0
 800e98c:	428a      	cmp	r2, r1
 800e98e:	d100      	bne.n	800e992 <memmove+0x2a>
 800e990:	bd10      	pop	{r4, pc}
 800e992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e99a:	e7f7      	b.n	800e98c <memmove+0x24>

0800e99c <_sbrk_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4d06      	ldr	r5, [pc, #24]	@ (800e9b8 <_sbrk_r+0x1c>)
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	602b      	str	r3, [r5, #0]
 800e9a8:	f7f5 ffdc 	bl	8004964 <_sbrk>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d102      	bne.n	800e9b6 <_sbrk_r+0x1a>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	b103      	cbz	r3, 800e9b6 <_sbrk_r+0x1a>
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	bd38      	pop	{r3, r4, r5, pc}
 800e9b8:	20000918 	.word	0x20000918

0800e9bc <memcpy>:
 800e9bc:	440a      	add	r2, r1
 800e9be:	4291      	cmp	r1, r2
 800e9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9c4:	d100      	bne.n	800e9c8 <memcpy+0xc>
 800e9c6:	4770      	bx	lr
 800e9c8:	b510      	push	{r4, lr}
 800e9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9d2:	4291      	cmp	r1, r2
 800e9d4:	d1f9      	bne.n	800e9ca <memcpy+0xe>
 800e9d6:	bd10      	pop	{r4, pc}

0800e9d8 <nan>:
 800e9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e9e0 <nan+0x8>
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop
 800e9e0:	00000000 	.word	0x00000000
 800e9e4:	7ff80000 	.word	0x7ff80000

0800e9e8 <abort>:
 800e9e8:	b508      	push	{r3, lr}
 800e9ea:	2006      	movs	r0, #6
 800e9ec:	f000 fc98 	bl	800f320 <raise>
 800e9f0:	2001      	movs	r0, #1
 800e9f2:	f7f5 ff5b 	bl	80048ac <_exit>

0800e9f6 <_calloc_r>:
 800e9f6:	b570      	push	{r4, r5, r6, lr}
 800e9f8:	fba1 5402 	umull	r5, r4, r1, r2
 800e9fc:	b93c      	cbnz	r4, 800ea0e <_calloc_r+0x18>
 800e9fe:	4629      	mov	r1, r5
 800ea00:	f7fd fcf2 	bl	800c3e8 <_malloc_r>
 800ea04:	4606      	mov	r6, r0
 800ea06:	b928      	cbnz	r0, 800ea14 <_calloc_r+0x1e>
 800ea08:	2600      	movs	r6, #0
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	bd70      	pop	{r4, r5, r6, pc}
 800ea0e:	220c      	movs	r2, #12
 800ea10:	6002      	str	r2, [r0, #0]
 800ea12:	e7f9      	b.n	800ea08 <_calloc_r+0x12>
 800ea14:	462a      	mov	r2, r5
 800ea16:	4621      	mov	r1, r4
 800ea18:	f7fc fd13 	bl	800b442 <memset>
 800ea1c:	e7f5      	b.n	800ea0a <_calloc_r+0x14>

0800ea1e <rshift>:
 800ea1e:	6903      	ldr	r3, [r0, #16]
 800ea20:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea28:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea2c:	f100 0414 	add.w	r4, r0, #20
 800ea30:	dd45      	ble.n	800eabe <rshift+0xa0>
 800ea32:	f011 011f 	ands.w	r1, r1, #31
 800ea36:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea3a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea3e:	d10c      	bne.n	800ea5a <rshift+0x3c>
 800ea40:	f100 0710 	add.w	r7, r0, #16
 800ea44:	4629      	mov	r1, r5
 800ea46:	42b1      	cmp	r1, r6
 800ea48:	d334      	bcc.n	800eab4 <rshift+0x96>
 800ea4a:	1a9b      	subs	r3, r3, r2
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	1eea      	subs	r2, r5, #3
 800ea50:	4296      	cmp	r6, r2
 800ea52:	bf38      	it	cc
 800ea54:	2300      	movcc	r3, #0
 800ea56:	4423      	add	r3, r4
 800ea58:	e015      	b.n	800ea86 <rshift+0x68>
 800ea5a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea5e:	f1c1 0820 	rsb	r8, r1, #32
 800ea62:	40cf      	lsrs	r7, r1
 800ea64:	f105 0e04 	add.w	lr, r5, #4
 800ea68:	46a1      	mov	r9, r4
 800ea6a:	4576      	cmp	r6, lr
 800ea6c:	46f4      	mov	ip, lr
 800ea6e:	d815      	bhi.n	800ea9c <rshift+0x7e>
 800ea70:	1a9a      	subs	r2, r3, r2
 800ea72:	0092      	lsls	r2, r2, #2
 800ea74:	3a04      	subs	r2, #4
 800ea76:	3501      	adds	r5, #1
 800ea78:	42ae      	cmp	r6, r5
 800ea7a:	bf38      	it	cc
 800ea7c:	2200      	movcc	r2, #0
 800ea7e:	18a3      	adds	r3, r4, r2
 800ea80:	50a7      	str	r7, [r4, r2]
 800ea82:	b107      	cbz	r7, 800ea86 <rshift+0x68>
 800ea84:	3304      	adds	r3, #4
 800ea86:	1b1a      	subs	r2, r3, r4
 800ea88:	42a3      	cmp	r3, r4
 800ea8a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea8e:	bf08      	it	eq
 800ea90:	2300      	moveq	r3, #0
 800ea92:	6102      	str	r2, [r0, #16]
 800ea94:	bf08      	it	eq
 800ea96:	6143      	streq	r3, [r0, #20]
 800ea98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea9c:	f8dc c000 	ldr.w	ip, [ip]
 800eaa0:	fa0c fc08 	lsl.w	ip, ip, r8
 800eaa4:	ea4c 0707 	orr.w	r7, ip, r7
 800eaa8:	f849 7b04 	str.w	r7, [r9], #4
 800eaac:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eab0:	40cf      	lsrs	r7, r1
 800eab2:	e7da      	b.n	800ea6a <rshift+0x4c>
 800eab4:	f851 cb04 	ldr.w	ip, [r1], #4
 800eab8:	f847 cf04 	str.w	ip, [r7, #4]!
 800eabc:	e7c3      	b.n	800ea46 <rshift+0x28>
 800eabe:	4623      	mov	r3, r4
 800eac0:	e7e1      	b.n	800ea86 <rshift+0x68>

0800eac2 <__hexdig_fun>:
 800eac2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eac6:	2b09      	cmp	r3, #9
 800eac8:	d802      	bhi.n	800ead0 <__hexdig_fun+0xe>
 800eaca:	3820      	subs	r0, #32
 800eacc:	b2c0      	uxtb	r0, r0
 800eace:	4770      	bx	lr
 800ead0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ead4:	2b05      	cmp	r3, #5
 800ead6:	d801      	bhi.n	800eadc <__hexdig_fun+0x1a>
 800ead8:	3847      	subs	r0, #71	@ 0x47
 800eada:	e7f7      	b.n	800eacc <__hexdig_fun+0xa>
 800eadc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eae0:	2b05      	cmp	r3, #5
 800eae2:	d801      	bhi.n	800eae8 <__hexdig_fun+0x26>
 800eae4:	3827      	subs	r0, #39	@ 0x27
 800eae6:	e7f1      	b.n	800eacc <__hexdig_fun+0xa>
 800eae8:	2000      	movs	r0, #0
 800eaea:	4770      	bx	lr

0800eaec <__gethex>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	b085      	sub	sp, #20
 800eaf2:	468a      	mov	sl, r1
 800eaf4:	9302      	str	r3, [sp, #8]
 800eaf6:	680b      	ldr	r3, [r1, #0]
 800eaf8:	9001      	str	r0, [sp, #4]
 800eafa:	4690      	mov	r8, r2
 800eafc:	1c9c      	adds	r4, r3, #2
 800eafe:	46a1      	mov	r9, r4
 800eb00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eb04:	2830      	cmp	r0, #48	@ 0x30
 800eb06:	d0fa      	beq.n	800eafe <__gethex+0x12>
 800eb08:	eba9 0303 	sub.w	r3, r9, r3
 800eb0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800eb10:	f7ff ffd7 	bl	800eac2 <__hexdig_fun>
 800eb14:	4605      	mov	r5, r0
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d168      	bne.n	800ebec <__gethex+0x100>
 800eb1a:	49a0      	ldr	r1, [pc, #640]	@ (800ed9c <__gethex+0x2b0>)
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	4648      	mov	r0, r9
 800eb20:	f7fc fc97 	bl	800b452 <strncmp>
 800eb24:	4607      	mov	r7, r0
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d167      	bne.n	800ebfa <__gethex+0x10e>
 800eb2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eb2e:	4626      	mov	r6, r4
 800eb30:	f7ff ffc7 	bl	800eac2 <__hexdig_fun>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d062      	beq.n	800ebfe <__gethex+0x112>
 800eb38:	4623      	mov	r3, r4
 800eb3a:	7818      	ldrb	r0, [r3, #0]
 800eb3c:	2830      	cmp	r0, #48	@ 0x30
 800eb3e:	4699      	mov	r9, r3
 800eb40:	f103 0301 	add.w	r3, r3, #1
 800eb44:	d0f9      	beq.n	800eb3a <__gethex+0x4e>
 800eb46:	f7ff ffbc 	bl	800eac2 <__hexdig_fun>
 800eb4a:	fab0 f580 	clz	r5, r0
 800eb4e:	096d      	lsrs	r5, r5, #5
 800eb50:	f04f 0b01 	mov.w	fp, #1
 800eb54:	464a      	mov	r2, r9
 800eb56:	4616      	mov	r6, r2
 800eb58:	3201      	adds	r2, #1
 800eb5a:	7830      	ldrb	r0, [r6, #0]
 800eb5c:	f7ff ffb1 	bl	800eac2 <__hexdig_fun>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d1f8      	bne.n	800eb56 <__gethex+0x6a>
 800eb64:	498d      	ldr	r1, [pc, #564]	@ (800ed9c <__gethex+0x2b0>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f7fc fc72 	bl	800b452 <strncmp>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d13f      	bne.n	800ebf2 <__gethex+0x106>
 800eb72:	b944      	cbnz	r4, 800eb86 <__gethex+0x9a>
 800eb74:	1c74      	adds	r4, r6, #1
 800eb76:	4622      	mov	r2, r4
 800eb78:	4616      	mov	r6, r2
 800eb7a:	3201      	adds	r2, #1
 800eb7c:	7830      	ldrb	r0, [r6, #0]
 800eb7e:	f7ff ffa0 	bl	800eac2 <__hexdig_fun>
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d1f8      	bne.n	800eb78 <__gethex+0x8c>
 800eb86:	1ba4      	subs	r4, r4, r6
 800eb88:	00a7      	lsls	r7, r4, #2
 800eb8a:	7833      	ldrb	r3, [r6, #0]
 800eb8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eb90:	2b50      	cmp	r3, #80	@ 0x50
 800eb92:	d13e      	bne.n	800ec12 <__gethex+0x126>
 800eb94:	7873      	ldrb	r3, [r6, #1]
 800eb96:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb98:	d033      	beq.n	800ec02 <__gethex+0x116>
 800eb9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb9c:	d034      	beq.n	800ec08 <__gethex+0x11c>
 800eb9e:	1c71      	adds	r1, r6, #1
 800eba0:	2400      	movs	r4, #0
 800eba2:	7808      	ldrb	r0, [r1, #0]
 800eba4:	f7ff ff8d 	bl	800eac2 <__hexdig_fun>
 800eba8:	1e43      	subs	r3, r0, #1
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b18      	cmp	r3, #24
 800ebae:	d830      	bhi.n	800ec12 <__gethex+0x126>
 800ebb0:	f1a0 0210 	sub.w	r2, r0, #16
 800ebb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ebb8:	f7ff ff83 	bl	800eac2 <__hexdig_fun>
 800ebbc:	f100 3cff 	add.w	ip, r0, #4294967295
 800ebc0:	fa5f fc8c 	uxtb.w	ip, ip
 800ebc4:	f1bc 0f18 	cmp.w	ip, #24
 800ebc8:	f04f 030a 	mov.w	r3, #10
 800ebcc:	d91e      	bls.n	800ec0c <__gethex+0x120>
 800ebce:	b104      	cbz	r4, 800ebd2 <__gethex+0xe6>
 800ebd0:	4252      	negs	r2, r2
 800ebd2:	4417      	add	r7, r2
 800ebd4:	f8ca 1000 	str.w	r1, [sl]
 800ebd8:	b1ed      	cbz	r5, 800ec16 <__gethex+0x12a>
 800ebda:	f1bb 0f00 	cmp.w	fp, #0
 800ebde:	bf0c      	ite	eq
 800ebe0:	2506      	moveq	r5, #6
 800ebe2:	2500      	movne	r5, #0
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	b005      	add	sp, #20
 800ebe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebec:	2500      	movs	r5, #0
 800ebee:	462c      	mov	r4, r5
 800ebf0:	e7b0      	b.n	800eb54 <__gethex+0x68>
 800ebf2:	2c00      	cmp	r4, #0
 800ebf4:	d1c7      	bne.n	800eb86 <__gethex+0x9a>
 800ebf6:	4627      	mov	r7, r4
 800ebf8:	e7c7      	b.n	800eb8a <__gethex+0x9e>
 800ebfa:	464e      	mov	r6, r9
 800ebfc:	462f      	mov	r7, r5
 800ebfe:	2501      	movs	r5, #1
 800ec00:	e7c3      	b.n	800eb8a <__gethex+0x9e>
 800ec02:	2400      	movs	r4, #0
 800ec04:	1cb1      	adds	r1, r6, #2
 800ec06:	e7cc      	b.n	800eba2 <__gethex+0xb6>
 800ec08:	2401      	movs	r4, #1
 800ec0a:	e7fb      	b.n	800ec04 <__gethex+0x118>
 800ec0c:	fb03 0002 	mla	r0, r3, r2, r0
 800ec10:	e7ce      	b.n	800ebb0 <__gethex+0xc4>
 800ec12:	4631      	mov	r1, r6
 800ec14:	e7de      	b.n	800ebd4 <__gethex+0xe8>
 800ec16:	eba6 0309 	sub.w	r3, r6, r9
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	2b07      	cmp	r3, #7
 800ec20:	dc0a      	bgt.n	800ec38 <__gethex+0x14c>
 800ec22:	9801      	ldr	r0, [sp, #4]
 800ec24:	f7fd fc6c 	bl	800c500 <_Balloc>
 800ec28:	4604      	mov	r4, r0
 800ec2a:	b940      	cbnz	r0, 800ec3e <__gethex+0x152>
 800ec2c:	4b5c      	ldr	r3, [pc, #368]	@ (800eda0 <__gethex+0x2b4>)
 800ec2e:	4602      	mov	r2, r0
 800ec30:	21e4      	movs	r1, #228	@ 0xe4
 800ec32:	485c      	ldr	r0, [pc, #368]	@ (800eda4 <__gethex+0x2b8>)
 800ec34:	f7fc fcfa 	bl	800b62c <__assert_func>
 800ec38:	3101      	adds	r1, #1
 800ec3a:	105b      	asrs	r3, r3, #1
 800ec3c:	e7ef      	b.n	800ec1e <__gethex+0x132>
 800ec3e:	f100 0a14 	add.w	sl, r0, #20
 800ec42:	2300      	movs	r3, #0
 800ec44:	4655      	mov	r5, sl
 800ec46:	469b      	mov	fp, r3
 800ec48:	45b1      	cmp	r9, r6
 800ec4a:	d337      	bcc.n	800ecbc <__gethex+0x1d0>
 800ec4c:	f845 bb04 	str.w	fp, [r5], #4
 800ec50:	eba5 050a 	sub.w	r5, r5, sl
 800ec54:	10ad      	asrs	r5, r5, #2
 800ec56:	6125      	str	r5, [r4, #16]
 800ec58:	4658      	mov	r0, fp
 800ec5a:	f7fd fd43 	bl	800c6e4 <__hi0bits>
 800ec5e:	016d      	lsls	r5, r5, #5
 800ec60:	f8d8 6000 	ldr.w	r6, [r8]
 800ec64:	1a2d      	subs	r5, r5, r0
 800ec66:	42b5      	cmp	r5, r6
 800ec68:	dd54      	ble.n	800ed14 <__gethex+0x228>
 800ec6a:	1bad      	subs	r5, r5, r6
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f7fe f8d7 	bl	800ce22 <__any_on>
 800ec74:	4681      	mov	r9, r0
 800ec76:	b178      	cbz	r0, 800ec98 <__gethex+0x1ac>
 800ec78:	1e6b      	subs	r3, r5, #1
 800ec7a:	1159      	asrs	r1, r3, #5
 800ec7c:	f003 021f 	and.w	r2, r3, #31
 800ec80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ec84:	f04f 0901 	mov.w	r9, #1
 800ec88:	fa09 f202 	lsl.w	r2, r9, r2
 800ec8c:	420a      	tst	r2, r1
 800ec8e:	d003      	beq.n	800ec98 <__gethex+0x1ac>
 800ec90:	454b      	cmp	r3, r9
 800ec92:	dc36      	bgt.n	800ed02 <__gethex+0x216>
 800ec94:	f04f 0902 	mov.w	r9, #2
 800ec98:	4629      	mov	r1, r5
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7ff febf 	bl	800ea1e <rshift>
 800eca0:	442f      	add	r7, r5
 800eca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eca6:	42bb      	cmp	r3, r7
 800eca8:	da42      	bge.n	800ed30 <__gethex+0x244>
 800ecaa:	9801      	ldr	r0, [sp, #4]
 800ecac:	4621      	mov	r1, r4
 800ecae:	f7fd fc67 	bl	800c580 <_Bfree>
 800ecb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	25a3      	movs	r5, #163	@ 0xa3
 800ecba:	e793      	b.n	800ebe4 <__gethex+0xf8>
 800ecbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ecc0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ecc2:	d012      	beq.n	800ecea <__gethex+0x1fe>
 800ecc4:	2b20      	cmp	r3, #32
 800ecc6:	d104      	bne.n	800ecd2 <__gethex+0x1e6>
 800ecc8:	f845 bb04 	str.w	fp, [r5], #4
 800eccc:	f04f 0b00 	mov.w	fp, #0
 800ecd0:	465b      	mov	r3, fp
 800ecd2:	7830      	ldrb	r0, [r6, #0]
 800ecd4:	9303      	str	r3, [sp, #12]
 800ecd6:	f7ff fef4 	bl	800eac2 <__hexdig_fun>
 800ecda:	9b03      	ldr	r3, [sp, #12]
 800ecdc:	f000 000f 	and.w	r0, r0, #15
 800ece0:	4098      	lsls	r0, r3
 800ece2:	ea4b 0b00 	orr.w	fp, fp, r0
 800ece6:	3304      	adds	r3, #4
 800ece8:	e7ae      	b.n	800ec48 <__gethex+0x15c>
 800ecea:	45b1      	cmp	r9, r6
 800ecec:	d8ea      	bhi.n	800ecc4 <__gethex+0x1d8>
 800ecee:	492b      	ldr	r1, [pc, #172]	@ (800ed9c <__gethex+0x2b0>)
 800ecf0:	9303      	str	r3, [sp, #12]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	f7fc fbac 	bl	800b452 <strncmp>
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d1e1      	bne.n	800ecc4 <__gethex+0x1d8>
 800ed00:	e7a2      	b.n	800ec48 <__gethex+0x15c>
 800ed02:	1ea9      	subs	r1, r5, #2
 800ed04:	4620      	mov	r0, r4
 800ed06:	f7fe f88c 	bl	800ce22 <__any_on>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	d0c2      	beq.n	800ec94 <__gethex+0x1a8>
 800ed0e:	f04f 0903 	mov.w	r9, #3
 800ed12:	e7c1      	b.n	800ec98 <__gethex+0x1ac>
 800ed14:	da09      	bge.n	800ed2a <__gethex+0x23e>
 800ed16:	1b75      	subs	r5, r6, r5
 800ed18:	4621      	mov	r1, r4
 800ed1a:	9801      	ldr	r0, [sp, #4]
 800ed1c:	462a      	mov	r2, r5
 800ed1e:	f7fd fe47 	bl	800c9b0 <__lshift>
 800ed22:	1b7f      	subs	r7, r7, r5
 800ed24:	4604      	mov	r4, r0
 800ed26:	f100 0a14 	add.w	sl, r0, #20
 800ed2a:	f04f 0900 	mov.w	r9, #0
 800ed2e:	e7b8      	b.n	800eca2 <__gethex+0x1b6>
 800ed30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed34:	42bd      	cmp	r5, r7
 800ed36:	dd6f      	ble.n	800ee18 <__gethex+0x32c>
 800ed38:	1bed      	subs	r5, r5, r7
 800ed3a:	42ae      	cmp	r6, r5
 800ed3c:	dc34      	bgt.n	800eda8 <__gethex+0x2bc>
 800ed3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d022      	beq.n	800ed8c <__gethex+0x2a0>
 800ed46:	2b03      	cmp	r3, #3
 800ed48:	d024      	beq.n	800ed94 <__gethex+0x2a8>
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d115      	bne.n	800ed7a <__gethex+0x28e>
 800ed4e:	42ae      	cmp	r6, r5
 800ed50:	d113      	bne.n	800ed7a <__gethex+0x28e>
 800ed52:	2e01      	cmp	r6, #1
 800ed54:	d10b      	bne.n	800ed6e <__gethex+0x282>
 800ed56:	9a02      	ldr	r2, [sp, #8]
 800ed58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed5c:	6013      	str	r3, [r2, #0]
 800ed5e:	2301      	movs	r3, #1
 800ed60:	6123      	str	r3, [r4, #16]
 800ed62:	f8ca 3000 	str.w	r3, [sl]
 800ed66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed68:	2562      	movs	r5, #98	@ 0x62
 800ed6a:	601c      	str	r4, [r3, #0]
 800ed6c:	e73a      	b.n	800ebe4 <__gethex+0xf8>
 800ed6e:	1e71      	subs	r1, r6, #1
 800ed70:	4620      	mov	r0, r4
 800ed72:	f7fe f856 	bl	800ce22 <__any_on>
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d1ed      	bne.n	800ed56 <__gethex+0x26a>
 800ed7a:	9801      	ldr	r0, [sp, #4]
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	f7fd fbff 	bl	800c580 <_Bfree>
 800ed82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed84:	2300      	movs	r3, #0
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	2550      	movs	r5, #80	@ 0x50
 800ed8a:	e72b      	b.n	800ebe4 <__gethex+0xf8>
 800ed8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1f3      	bne.n	800ed7a <__gethex+0x28e>
 800ed92:	e7e0      	b.n	800ed56 <__gethex+0x26a>
 800ed94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d1dd      	bne.n	800ed56 <__gethex+0x26a>
 800ed9a:	e7ee      	b.n	800ed7a <__gethex+0x28e>
 800ed9c:	08010158 	.word	0x08010158
 800eda0:	0800ffee 	.word	0x0800ffee
 800eda4:	080101e4 	.word	0x080101e4
 800eda8:	1e6f      	subs	r7, r5, #1
 800edaa:	f1b9 0f00 	cmp.w	r9, #0
 800edae:	d130      	bne.n	800ee12 <__gethex+0x326>
 800edb0:	b127      	cbz	r7, 800edbc <__gethex+0x2d0>
 800edb2:	4639      	mov	r1, r7
 800edb4:	4620      	mov	r0, r4
 800edb6:	f7fe f834 	bl	800ce22 <__any_on>
 800edba:	4681      	mov	r9, r0
 800edbc:	117a      	asrs	r2, r7, #5
 800edbe:	2301      	movs	r3, #1
 800edc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800edc4:	f007 071f 	and.w	r7, r7, #31
 800edc8:	40bb      	lsls	r3, r7
 800edca:	4213      	tst	r3, r2
 800edcc:	4629      	mov	r1, r5
 800edce:	4620      	mov	r0, r4
 800edd0:	bf18      	it	ne
 800edd2:	f049 0902 	orrne.w	r9, r9, #2
 800edd6:	f7ff fe22 	bl	800ea1e <rshift>
 800edda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800edde:	1b76      	subs	r6, r6, r5
 800ede0:	2502      	movs	r5, #2
 800ede2:	f1b9 0f00 	cmp.w	r9, #0
 800ede6:	d047      	beq.n	800ee78 <__gethex+0x38c>
 800ede8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edec:	2b02      	cmp	r3, #2
 800edee:	d015      	beq.n	800ee1c <__gethex+0x330>
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d017      	beq.n	800ee24 <__gethex+0x338>
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d109      	bne.n	800ee0c <__gethex+0x320>
 800edf8:	f019 0f02 	tst.w	r9, #2
 800edfc:	d006      	beq.n	800ee0c <__gethex+0x320>
 800edfe:	f8da 3000 	ldr.w	r3, [sl]
 800ee02:	ea49 0903 	orr.w	r9, r9, r3
 800ee06:	f019 0f01 	tst.w	r9, #1
 800ee0a:	d10e      	bne.n	800ee2a <__gethex+0x33e>
 800ee0c:	f045 0510 	orr.w	r5, r5, #16
 800ee10:	e032      	b.n	800ee78 <__gethex+0x38c>
 800ee12:	f04f 0901 	mov.w	r9, #1
 800ee16:	e7d1      	b.n	800edbc <__gethex+0x2d0>
 800ee18:	2501      	movs	r5, #1
 800ee1a:	e7e2      	b.n	800ede2 <__gethex+0x2f6>
 800ee1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee1e:	f1c3 0301 	rsb	r3, r3, #1
 800ee22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d0f0      	beq.n	800ee0c <__gethex+0x320>
 800ee2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee2e:	f104 0314 	add.w	r3, r4, #20
 800ee32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee3a:	f04f 0c00 	mov.w	ip, #0
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee48:	d01b      	beq.n	800ee82 <__gethex+0x396>
 800ee4a:	3201      	adds	r2, #1
 800ee4c:	6002      	str	r2, [r0, #0]
 800ee4e:	2d02      	cmp	r5, #2
 800ee50:	f104 0314 	add.w	r3, r4, #20
 800ee54:	d13c      	bne.n	800eed0 <__gethex+0x3e4>
 800ee56:	f8d8 2000 	ldr.w	r2, [r8]
 800ee5a:	3a01      	subs	r2, #1
 800ee5c:	42b2      	cmp	r2, r6
 800ee5e:	d109      	bne.n	800ee74 <__gethex+0x388>
 800ee60:	1171      	asrs	r1, r6, #5
 800ee62:	2201      	movs	r2, #1
 800ee64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee68:	f006 061f 	and.w	r6, r6, #31
 800ee6c:	fa02 f606 	lsl.w	r6, r2, r6
 800ee70:	421e      	tst	r6, r3
 800ee72:	d13a      	bne.n	800eeea <__gethex+0x3fe>
 800ee74:	f045 0520 	orr.w	r5, r5, #32
 800ee78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee7a:	601c      	str	r4, [r3, #0]
 800ee7c:	9b02      	ldr	r3, [sp, #8]
 800ee7e:	601f      	str	r7, [r3, #0]
 800ee80:	e6b0      	b.n	800ebe4 <__gethex+0xf8>
 800ee82:	4299      	cmp	r1, r3
 800ee84:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee88:	d8d9      	bhi.n	800ee3e <__gethex+0x352>
 800ee8a:	68a3      	ldr	r3, [r4, #8]
 800ee8c:	459b      	cmp	fp, r3
 800ee8e:	db17      	blt.n	800eec0 <__gethex+0x3d4>
 800ee90:	6861      	ldr	r1, [r4, #4]
 800ee92:	9801      	ldr	r0, [sp, #4]
 800ee94:	3101      	adds	r1, #1
 800ee96:	f7fd fb33 	bl	800c500 <_Balloc>
 800ee9a:	4681      	mov	r9, r0
 800ee9c:	b918      	cbnz	r0, 800eea6 <__gethex+0x3ba>
 800ee9e:	4b1a      	ldr	r3, [pc, #104]	@ (800ef08 <__gethex+0x41c>)
 800eea0:	4602      	mov	r2, r0
 800eea2:	2184      	movs	r1, #132	@ 0x84
 800eea4:	e6c5      	b.n	800ec32 <__gethex+0x146>
 800eea6:	6922      	ldr	r2, [r4, #16]
 800eea8:	3202      	adds	r2, #2
 800eeaa:	f104 010c 	add.w	r1, r4, #12
 800eeae:	0092      	lsls	r2, r2, #2
 800eeb0:	300c      	adds	r0, #12
 800eeb2:	f7ff fd83 	bl	800e9bc <memcpy>
 800eeb6:	4621      	mov	r1, r4
 800eeb8:	9801      	ldr	r0, [sp, #4]
 800eeba:	f7fd fb61 	bl	800c580 <_Bfree>
 800eebe:	464c      	mov	r4, r9
 800eec0:	6923      	ldr	r3, [r4, #16]
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eec8:	6122      	str	r2, [r4, #16]
 800eeca:	2201      	movs	r2, #1
 800eecc:	615a      	str	r2, [r3, #20]
 800eece:	e7be      	b.n	800ee4e <__gethex+0x362>
 800eed0:	6922      	ldr	r2, [r4, #16]
 800eed2:	455a      	cmp	r2, fp
 800eed4:	dd0b      	ble.n	800eeee <__gethex+0x402>
 800eed6:	2101      	movs	r1, #1
 800eed8:	4620      	mov	r0, r4
 800eeda:	f7ff fda0 	bl	800ea1e <rshift>
 800eede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eee2:	3701      	adds	r7, #1
 800eee4:	42bb      	cmp	r3, r7
 800eee6:	f6ff aee0 	blt.w	800ecaa <__gethex+0x1be>
 800eeea:	2501      	movs	r5, #1
 800eeec:	e7c2      	b.n	800ee74 <__gethex+0x388>
 800eeee:	f016 061f 	ands.w	r6, r6, #31
 800eef2:	d0fa      	beq.n	800eeea <__gethex+0x3fe>
 800eef4:	4453      	add	r3, sl
 800eef6:	f1c6 0620 	rsb	r6, r6, #32
 800eefa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eefe:	f7fd fbf1 	bl	800c6e4 <__hi0bits>
 800ef02:	42b0      	cmp	r0, r6
 800ef04:	dbe7      	blt.n	800eed6 <__gethex+0x3ea>
 800ef06:	e7f0      	b.n	800eeea <__gethex+0x3fe>
 800ef08:	0800ffee 	.word	0x0800ffee

0800ef0c <L_shift>:
 800ef0c:	f1c2 0208 	rsb	r2, r2, #8
 800ef10:	0092      	lsls	r2, r2, #2
 800ef12:	b570      	push	{r4, r5, r6, lr}
 800ef14:	f1c2 0620 	rsb	r6, r2, #32
 800ef18:	6843      	ldr	r3, [r0, #4]
 800ef1a:	6804      	ldr	r4, [r0, #0]
 800ef1c:	fa03 f506 	lsl.w	r5, r3, r6
 800ef20:	432c      	orrs	r4, r5
 800ef22:	40d3      	lsrs	r3, r2
 800ef24:	6004      	str	r4, [r0, #0]
 800ef26:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef2a:	4288      	cmp	r0, r1
 800ef2c:	d3f4      	bcc.n	800ef18 <L_shift+0xc>
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}

0800ef30 <__match>:
 800ef30:	b530      	push	{r4, r5, lr}
 800ef32:	6803      	ldr	r3, [r0, #0]
 800ef34:	3301      	adds	r3, #1
 800ef36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef3a:	b914      	cbnz	r4, 800ef42 <__match+0x12>
 800ef3c:	6003      	str	r3, [r0, #0]
 800ef3e:	2001      	movs	r0, #1
 800ef40:	bd30      	pop	{r4, r5, pc}
 800ef42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ef4a:	2d19      	cmp	r5, #25
 800ef4c:	bf98      	it	ls
 800ef4e:	3220      	addls	r2, #32
 800ef50:	42a2      	cmp	r2, r4
 800ef52:	d0f0      	beq.n	800ef36 <__match+0x6>
 800ef54:	2000      	movs	r0, #0
 800ef56:	e7f3      	b.n	800ef40 <__match+0x10>

0800ef58 <__hexnan>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	680b      	ldr	r3, [r1, #0]
 800ef5e:	6801      	ldr	r1, [r0, #0]
 800ef60:	115e      	asrs	r6, r3, #5
 800ef62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef66:	f013 031f 	ands.w	r3, r3, #31
 800ef6a:	b087      	sub	sp, #28
 800ef6c:	bf18      	it	ne
 800ef6e:	3604      	addne	r6, #4
 800ef70:	2500      	movs	r5, #0
 800ef72:	1f37      	subs	r7, r6, #4
 800ef74:	4682      	mov	sl, r0
 800ef76:	4690      	mov	r8, r2
 800ef78:	9301      	str	r3, [sp, #4]
 800ef7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef7e:	46b9      	mov	r9, r7
 800ef80:	463c      	mov	r4, r7
 800ef82:	9502      	str	r5, [sp, #8]
 800ef84:	46ab      	mov	fp, r5
 800ef86:	784a      	ldrb	r2, [r1, #1]
 800ef88:	1c4b      	adds	r3, r1, #1
 800ef8a:	9303      	str	r3, [sp, #12]
 800ef8c:	b342      	cbz	r2, 800efe0 <__hexnan+0x88>
 800ef8e:	4610      	mov	r0, r2
 800ef90:	9105      	str	r1, [sp, #20]
 800ef92:	9204      	str	r2, [sp, #16]
 800ef94:	f7ff fd95 	bl	800eac2 <__hexdig_fun>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d151      	bne.n	800f040 <__hexnan+0xe8>
 800ef9c:	9a04      	ldr	r2, [sp, #16]
 800ef9e:	9905      	ldr	r1, [sp, #20]
 800efa0:	2a20      	cmp	r2, #32
 800efa2:	d818      	bhi.n	800efd6 <__hexnan+0x7e>
 800efa4:	9b02      	ldr	r3, [sp, #8]
 800efa6:	459b      	cmp	fp, r3
 800efa8:	dd13      	ble.n	800efd2 <__hexnan+0x7a>
 800efaa:	454c      	cmp	r4, r9
 800efac:	d206      	bcs.n	800efbc <__hexnan+0x64>
 800efae:	2d07      	cmp	r5, #7
 800efb0:	dc04      	bgt.n	800efbc <__hexnan+0x64>
 800efb2:	462a      	mov	r2, r5
 800efb4:	4649      	mov	r1, r9
 800efb6:	4620      	mov	r0, r4
 800efb8:	f7ff ffa8 	bl	800ef0c <L_shift>
 800efbc:	4544      	cmp	r4, r8
 800efbe:	d952      	bls.n	800f066 <__hexnan+0x10e>
 800efc0:	2300      	movs	r3, #0
 800efc2:	f1a4 0904 	sub.w	r9, r4, #4
 800efc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800efca:	f8cd b008 	str.w	fp, [sp, #8]
 800efce:	464c      	mov	r4, r9
 800efd0:	461d      	mov	r5, r3
 800efd2:	9903      	ldr	r1, [sp, #12]
 800efd4:	e7d7      	b.n	800ef86 <__hexnan+0x2e>
 800efd6:	2a29      	cmp	r2, #41	@ 0x29
 800efd8:	d157      	bne.n	800f08a <__hexnan+0x132>
 800efda:	3102      	adds	r1, #2
 800efdc:	f8ca 1000 	str.w	r1, [sl]
 800efe0:	f1bb 0f00 	cmp.w	fp, #0
 800efe4:	d051      	beq.n	800f08a <__hexnan+0x132>
 800efe6:	454c      	cmp	r4, r9
 800efe8:	d206      	bcs.n	800eff8 <__hexnan+0xa0>
 800efea:	2d07      	cmp	r5, #7
 800efec:	dc04      	bgt.n	800eff8 <__hexnan+0xa0>
 800efee:	462a      	mov	r2, r5
 800eff0:	4649      	mov	r1, r9
 800eff2:	4620      	mov	r0, r4
 800eff4:	f7ff ff8a 	bl	800ef0c <L_shift>
 800eff8:	4544      	cmp	r4, r8
 800effa:	d936      	bls.n	800f06a <__hexnan+0x112>
 800effc:	f1a8 0204 	sub.w	r2, r8, #4
 800f000:	4623      	mov	r3, r4
 800f002:	f853 1b04 	ldr.w	r1, [r3], #4
 800f006:	f842 1f04 	str.w	r1, [r2, #4]!
 800f00a:	429f      	cmp	r7, r3
 800f00c:	d2f9      	bcs.n	800f002 <__hexnan+0xaa>
 800f00e:	1b3b      	subs	r3, r7, r4
 800f010:	f023 0303 	bic.w	r3, r3, #3
 800f014:	3304      	adds	r3, #4
 800f016:	3401      	adds	r4, #1
 800f018:	3e03      	subs	r6, #3
 800f01a:	42b4      	cmp	r4, r6
 800f01c:	bf88      	it	hi
 800f01e:	2304      	movhi	r3, #4
 800f020:	4443      	add	r3, r8
 800f022:	2200      	movs	r2, #0
 800f024:	f843 2b04 	str.w	r2, [r3], #4
 800f028:	429f      	cmp	r7, r3
 800f02a:	d2fb      	bcs.n	800f024 <__hexnan+0xcc>
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	b91b      	cbnz	r3, 800f038 <__hexnan+0xe0>
 800f030:	4547      	cmp	r7, r8
 800f032:	d128      	bne.n	800f086 <__hexnan+0x12e>
 800f034:	2301      	movs	r3, #1
 800f036:	603b      	str	r3, [r7, #0]
 800f038:	2005      	movs	r0, #5
 800f03a:	b007      	add	sp, #28
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f040:	3501      	adds	r5, #1
 800f042:	2d08      	cmp	r5, #8
 800f044:	f10b 0b01 	add.w	fp, fp, #1
 800f048:	dd06      	ble.n	800f058 <__hexnan+0x100>
 800f04a:	4544      	cmp	r4, r8
 800f04c:	d9c1      	bls.n	800efd2 <__hexnan+0x7a>
 800f04e:	2300      	movs	r3, #0
 800f050:	f844 3c04 	str.w	r3, [r4, #-4]
 800f054:	2501      	movs	r5, #1
 800f056:	3c04      	subs	r4, #4
 800f058:	6822      	ldr	r2, [r4, #0]
 800f05a:	f000 000f 	and.w	r0, r0, #15
 800f05e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f062:	6020      	str	r0, [r4, #0]
 800f064:	e7b5      	b.n	800efd2 <__hexnan+0x7a>
 800f066:	2508      	movs	r5, #8
 800f068:	e7b3      	b.n	800efd2 <__hexnan+0x7a>
 800f06a:	9b01      	ldr	r3, [sp, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d0dd      	beq.n	800f02c <__hexnan+0xd4>
 800f070:	f1c3 0320 	rsb	r3, r3, #32
 800f074:	f04f 32ff 	mov.w	r2, #4294967295
 800f078:	40da      	lsrs	r2, r3
 800f07a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f07e:	4013      	ands	r3, r2
 800f080:	f846 3c04 	str.w	r3, [r6, #-4]
 800f084:	e7d2      	b.n	800f02c <__hexnan+0xd4>
 800f086:	3f04      	subs	r7, #4
 800f088:	e7d0      	b.n	800f02c <__hexnan+0xd4>
 800f08a:	2004      	movs	r0, #4
 800f08c:	e7d5      	b.n	800f03a <__hexnan+0xe2>

0800f08e <__ascii_mbtowc>:
 800f08e:	b082      	sub	sp, #8
 800f090:	b901      	cbnz	r1, 800f094 <__ascii_mbtowc+0x6>
 800f092:	a901      	add	r1, sp, #4
 800f094:	b142      	cbz	r2, 800f0a8 <__ascii_mbtowc+0x1a>
 800f096:	b14b      	cbz	r3, 800f0ac <__ascii_mbtowc+0x1e>
 800f098:	7813      	ldrb	r3, [r2, #0]
 800f09a:	600b      	str	r3, [r1, #0]
 800f09c:	7812      	ldrb	r2, [r2, #0]
 800f09e:	1e10      	subs	r0, r2, #0
 800f0a0:	bf18      	it	ne
 800f0a2:	2001      	movne	r0, #1
 800f0a4:	b002      	add	sp, #8
 800f0a6:	4770      	bx	lr
 800f0a8:	4610      	mov	r0, r2
 800f0aa:	e7fb      	b.n	800f0a4 <__ascii_mbtowc+0x16>
 800f0ac:	f06f 0001 	mvn.w	r0, #1
 800f0b0:	e7f8      	b.n	800f0a4 <__ascii_mbtowc+0x16>

0800f0b2 <_realloc_r>:
 800f0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b6:	4680      	mov	r8, r0
 800f0b8:	4615      	mov	r5, r2
 800f0ba:	460c      	mov	r4, r1
 800f0bc:	b921      	cbnz	r1, 800f0c8 <_realloc_r+0x16>
 800f0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	f7fd b990 	b.w	800c3e8 <_malloc_r>
 800f0c8:	b92a      	cbnz	r2, 800f0d6 <_realloc_r+0x24>
 800f0ca:	f7fd f919 	bl	800c300 <_free_r>
 800f0ce:	2400      	movs	r4, #0
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d6:	f000 f961 	bl	800f39c <_malloc_usable_size_r>
 800f0da:	4285      	cmp	r5, r0
 800f0dc:	4606      	mov	r6, r0
 800f0de:	d802      	bhi.n	800f0e6 <_realloc_r+0x34>
 800f0e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0e4:	d8f4      	bhi.n	800f0d0 <_realloc_r+0x1e>
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	f7fd f97d 	bl	800c3e8 <_malloc_r>
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	d0ec      	beq.n	800f0ce <_realloc_r+0x1c>
 800f0f4:	42b5      	cmp	r5, r6
 800f0f6:	462a      	mov	r2, r5
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	bf28      	it	cs
 800f0fc:	4632      	movcs	r2, r6
 800f0fe:	f7ff fc5d 	bl	800e9bc <memcpy>
 800f102:	4621      	mov	r1, r4
 800f104:	4640      	mov	r0, r8
 800f106:	f7fd f8fb 	bl	800c300 <_free_r>
 800f10a:	463c      	mov	r4, r7
 800f10c:	e7e0      	b.n	800f0d0 <_realloc_r+0x1e>
	...

0800f110 <_strtoul_l.constprop.0>:
 800f110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f114:	4e34      	ldr	r6, [pc, #208]	@ (800f1e8 <_strtoul_l.constprop.0+0xd8>)
 800f116:	4686      	mov	lr, r0
 800f118:	460d      	mov	r5, r1
 800f11a:	4628      	mov	r0, r5
 800f11c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f120:	5d37      	ldrb	r7, [r6, r4]
 800f122:	f017 0708 	ands.w	r7, r7, #8
 800f126:	d1f8      	bne.n	800f11a <_strtoul_l.constprop.0+0xa>
 800f128:	2c2d      	cmp	r4, #45	@ 0x2d
 800f12a:	d12f      	bne.n	800f18c <_strtoul_l.constprop.0+0x7c>
 800f12c:	782c      	ldrb	r4, [r5, #0]
 800f12e:	2701      	movs	r7, #1
 800f130:	1c85      	adds	r5, r0, #2
 800f132:	f033 0010 	bics.w	r0, r3, #16
 800f136:	d109      	bne.n	800f14c <_strtoul_l.constprop.0+0x3c>
 800f138:	2c30      	cmp	r4, #48	@ 0x30
 800f13a:	d12c      	bne.n	800f196 <_strtoul_l.constprop.0+0x86>
 800f13c:	7828      	ldrb	r0, [r5, #0]
 800f13e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f142:	2858      	cmp	r0, #88	@ 0x58
 800f144:	d127      	bne.n	800f196 <_strtoul_l.constprop.0+0x86>
 800f146:	786c      	ldrb	r4, [r5, #1]
 800f148:	2310      	movs	r3, #16
 800f14a:	3502      	adds	r5, #2
 800f14c:	f04f 38ff 	mov.w	r8, #4294967295
 800f150:	2600      	movs	r6, #0
 800f152:	fbb8 f8f3 	udiv	r8, r8, r3
 800f156:	fb03 f908 	mul.w	r9, r3, r8
 800f15a:	ea6f 0909 	mvn.w	r9, r9
 800f15e:	4630      	mov	r0, r6
 800f160:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f164:	f1bc 0f09 	cmp.w	ip, #9
 800f168:	d81c      	bhi.n	800f1a4 <_strtoul_l.constprop.0+0x94>
 800f16a:	4664      	mov	r4, ip
 800f16c:	42a3      	cmp	r3, r4
 800f16e:	dd2a      	ble.n	800f1c6 <_strtoul_l.constprop.0+0xb6>
 800f170:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f174:	d007      	beq.n	800f186 <_strtoul_l.constprop.0+0x76>
 800f176:	4580      	cmp	r8, r0
 800f178:	d322      	bcc.n	800f1c0 <_strtoul_l.constprop.0+0xb0>
 800f17a:	d101      	bne.n	800f180 <_strtoul_l.constprop.0+0x70>
 800f17c:	45a1      	cmp	r9, r4
 800f17e:	db1f      	blt.n	800f1c0 <_strtoul_l.constprop.0+0xb0>
 800f180:	fb00 4003 	mla	r0, r0, r3, r4
 800f184:	2601      	movs	r6, #1
 800f186:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f18a:	e7e9      	b.n	800f160 <_strtoul_l.constprop.0+0x50>
 800f18c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f18e:	bf04      	itt	eq
 800f190:	782c      	ldrbeq	r4, [r5, #0]
 800f192:	1c85      	addeq	r5, r0, #2
 800f194:	e7cd      	b.n	800f132 <_strtoul_l.constprop.0+0x22>
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1d8      	bne.n	800f14c <_strtoul_l.constprop.0+0x3c>
 800f19a:	2c30      	cmp	r4, #48	@ 0x30
 800f19c:	bf0c      	ite	eq
 800f19e:	2308      	moveq	r3, #8
 800f1a0:	230a      	movne	r3, #10
 800f1a2:	e7d3      	b.n	800f14c <_strtoul_l.constprop.0+0x3c>
 800f1a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f1a8:	f1bc 0f19 	cmp.w	ip, #25
 800f1ac:	d801      	bhi.n	800f1b2 <_strtoul_l.constprop.0+0xa2>
 800f1ae:	3c37      	subs	r4, #55	@ 0x37
 800f1b0:	e7dc      	b.n	800f16c <_strtoul_l.constprop.0+0x5c>
 800f1b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f1b6:	f1bc 0f19 	cmp.w	ip, #25
 800f1ba:	d804      	bhi.n	800f1c6 <_strtoul_l.constprop.0+0xb6>
 800f1bc:	3c57      	subs	r4, #87	@ 0x57
 800f1be:	e7d5      	b.n	800f16c <_strtoul_l.constprop.0+0x5c>
 800f1c0:	f04f 36ff 	mov.w	r6, #4294967295
 800f1c4:	e7df      	b.n	800f186 <_strtoul_l.constprop.0+0x76>
 800f1c6:	1c73      	adds	r3, r6, #1
 800f1c8:	d106      	bne.n	800f1d8 <_strtoul_l.constprop.0+0xc8>
 800f1ca:	2322      	movs	r3, #34	@ 0x22
 800f1cc:	f8ce 3000 	str.w	r3, [lr]
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	b932      	cbnz	r2, 800f1e2 <_strtoul_l.constprop.0+0xd2>
 800f1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1d8:	b107      	cbz	r7, 800f1dc <_strtoul_l.constprop.0+0xcc>
 800f1da:	4240      	negs	r0, r0
 800f1dc:	2a00      	cmp	r2, #0
 800f1de:	d0f9      	beq.n	800f1d4 <_strtoul_l.constprop.0+0xc4>
 800f1e0:	b106      	cbz	r6, 800f1e4 <_strtoul_l.constprop.0+0xd4>
 800f1e2:	1e69      	subs	r1, r5, #1
 800f1e4:	6011      	str	r1, [r2, #0]
 800f1e6:	e7f5      	b.n	800f1d4 <_strtoul_l.constprop.0+0xc4>
 800f1e8:	0800fda5 	.word	0x0800fda5

0800f1ec <_strtoul_r>:
 800f1ec:	f7ff bf90 	b.w	800f110 <_strtoul_l.constprop.0>

0800f1f0 <__ascii_wctomb>:
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	4608      	mov	r0, r1
 800f1f4:	b141      	cbz	r1, 800f208 <__ascii_wctomb+0x18>
 800f1f6:	2aff      	cmp	r2, #255	@ 0xff
 800f1f8:	d904      	bls.n	800f204 <__ascii_wctomb+0x14>
 800f1fa:	228a      	movs	r2, #138	@ 0x8a
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f202:	4770      	bx	lr
 800f204:	700a      	strb	r2, [r1, #0]
 800f206:	2001      	movs	r0, #1
 800f208:	4770      	bx	lr

0800f20a <__swhatbuf_r>:
 800f20a:	b570      	push	{r4, r5, r6, lr}
 800f20c:	460c      	mov	r4, r1
 800f20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f212:	2900      	cmp	r1, #0
 800f214:	b096      	sub	sp, #88	@ 0x58
 800f216:	4615      	mov	r5, r2
 800f218:	461e      	mov	r6, r3
 800f21a:	da0d      	bge.n	800f238 <__swhatbuf_r+0x2e>
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f222:	f04f 0100 	mov.w	r1, #0
 800f226:	bf14      	ite	ne
 800f228:	2340      	movne	r3, #64	@ 0x40
 800f22a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f22e:	2000      	movs	r0, #0
 800f230:	6031      	str	r1, [r6, #0]
 800f232:	602b      	str	r3, [r5, #0]
 800f234:	b016      	add	sp, #88	@ 0x58
 800f236:	bd70      	pop	{r4, r5, r6, pc}
 800f238:	466a      	mov	r2, sp
 800f23a:	f000 f879 	bl	800f330 <_fstat_r>
 800f23e:	2800      	cmp	r0, #0
 800f240:	dbec      	blt.n	800f21c <__swhatbuf_r+0x12>
 800f242:	9901      	ldr	r1, [sp, #4]
 800f244:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f248:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f24c:	4259      	negs	r1, r3
 800f24e:	4159      	adcs	r1, r3
 800f250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f254:	e7eb      	b.n	800f22e <__swhatbuf_r+0x24>

0800f256 <__smakebuf_r>:
 800f256:	898b      	ldrh	r3, [r1, #12]
 800f258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f25a:	079d      	lsls	r5, r3, #30
 800f25c:	4606      	mov	r6, r0
 800f25e:	460c      	mov	r4, r1
 800f260:	d507      	bpl.n	800f272 <__smakebuf_r+0x1c>
 800f262:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	6123      	str	r3, [r4, #16]
 800f26a:	2301      	movs	r3, #1
 800f26c:	6163      	str	r3, [r4, #20]
 800f26e:	b003      	add	sp, #12
 800f270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f272:	ab01      	add	r3, sp, #4
 800f274:	466a      	mov	r2, sp
 800f276:	f7ff ffc8 	bl	800f20a <__swhatbuf_r>
 800f27a:	9f00      	ldr	r7, [sp, #0]
 800f27c:	4605      	mov	r5, r0
 800f27e:	4639      	mov	r1, r7
 800f280:	4630      	mov	r0, r6
 800f282:	f7fd f8b1 	bl	800c3e8 <_malloc_r>
 800f286:	b948      	cbnz	r0, 800f29c <__smakebuf_r+0x46>
 800f288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f28c:	059a      	lsls	r2, r3, #22
 800f28e:	d4ee      	bmi.n	800f26e <__smakebuf_r+0x18>
 800f290:	f023 0303 	bic.w	r3, r3, #3
 800f294:	f043 0302 	orr.w	r3, r3, #2
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	e7e2      	b.n	800f262 <__smakebuf_r+0xc>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	6020      	str	r0, [r4, #0]
 800f2a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2a4:	81a3      	strh	r3, [r4, #12]
 800f2a6:	9b01      	ldr	r3, [sp, #4]
 800f2a8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2ac:	b15b      	cbz	r3, 800f2c6 <__smakebuf_r+0x70>
 800f2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f000 f84e 	bl	800f354 <_isatty_r>
 800f2b8:	b128      	cbz	r0, 800f2c6 <__smakebuf_r+0x70>
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	f023 0303 	bic.w	r3, r3, #3
 800f2c0:	f043 0301 	orr.w	r3, r3, #1
 800f2c4:	81a3      	strh	r3, [r4, #12]
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	431d      	orrs	r5, r3
 800f2ca:	81a5      	strh	r5, [r4, #12]
 800f2cc:	e7cf      	b.n	800f26e <__smakebuf_r+0x18>

0800f2ce <_raise_r>:
 800f2ce:	291f      	cmp	r1, #31
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	d904      	bls.n	800f2e2 <_raise_r+0x14>
 800f2d8:	2316      	movs	r3, #22
 800f2da:	6003      	str	r3, [r0, #0]
 800f2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e0:	bd38      	pop	{r3, r4, r5, pc}
 800f2e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2e4:	b112      	cbz	r2, 800f2ec <_raise_r+0x1e>
 800f2e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2ea:	b94b      	cbnz	r3, 800f300 <_raise_r+0x32>
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	f000 f853 	bl	800f398 <_getpid_r>
 800f2f2:	4622      	mov	r2, r4
 800f2f4:	4601      	mov	r1, r0
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2fc:	f000 b83a 	b.w	800f374 <_kill_r>
 800f300:	2b01      	cmp	r3, #1
 800f302:	d00a      	beq.n	800f31a <_raise_r+0x4c>
 800f304:	1c59      	adds	r1, r3, #1
 800f306:	d103      	bne.n	800f310 <_raise_r+0x42>
 800f308:	2316      	movs	r3, #22
 800f30a:	6003      	str	r3, [r0, #0]
 800f30c:	2001      	movs	r0, #1
 800f30e:	e7e7      	b.n	800f2e0 <_raise_r+0x12>
 800f310:	2100      	movs	r1, #0
 800f312:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f316:	4620      	mov	r0, r4
 800f318:	4798      	blx	r3
 800f31a:	2000      	movs	r0, #0
 800f31c:	e7e0      	b.n	800f2e0 <_raise_r+0x12>
	...

0800f320 <raise>:
 800f320:	4b02      	ldr	r3, [pc, #8]	@ (800f32c <raise+0xc>)
 800f322:	4601      	mov	r1, r0
 800f324:	6818      	ldr	r0, [r3, #0]
 800f326:	f7ff bfd2 	b.w	800f2ce <_raise_r>
 800f32a:	bf00      	nop
 800f32c:	20000020 	.word	0x20000020

0800f330 <_fstat_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4d07      	ldr	r5, [pc, #28]	@ (800f350 <_fstat_r+0x20>)
 800f334:	2300      	movs	r3, #0
 800f336:	4604      	mov	r4, r0
 800f338:	4608      	mov	r0, r1
 800f33a:	4611      	mov	r1, r2
 800f33c:	602b      	str	r3, [r5, #0]
 800f33e:	f7f5 fae9 	bl	8004914 <_fstat>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d102      	bne.n	800f34c <_fstat_r+0x1c>
 800f346:	682b      	ldr	r3, [r5, #0]
 800f348:	b103      	cbz	r3, 800f34c <_fstat_r+0x1c>
 800f34a:	6023      	str	r3, [r4, #0]
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
 800f34e:	bf00      	nop
 800f350:	20000918 	.word	0x20000918

0800f354 <_isatty_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4d06      	ldr	r5, [pc, #24]	@ (800f370 <_isatty_r+0x1c>)
 800f358:	2300      	movs	r3, #0
 800f35a:	4604      	mov	r4, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	602b      	str	r3, [r5, #0]
 800f360:	f7f5 fae8 	bl	8004934 <_isatty>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_isatty_r+0x1a>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_isatty_r+0x1a>
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	20000918 	.word	0x20000918

0800f374 <_kill_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d07      	ldr	r5, [pc, #28]	@ (800f394 <_kill_r+0x20>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4604      	mov	r4, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	4611      	mov	r1, r2
 800f380:	602b      	str	r3, [r5, #0]
 800f382:	f7f5 fa83 	bl	800488c <_kill>
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	d102      	bne.n	800f390 <_kill_r+0x1c>
 800f38a:	682b      	ldr	r3, [r5, #0]
 800f38c:	b103      	cbz	r3, 800f390 <_kill_r+0x1c>
 800f38e:	6023      	str	r3, [r4, #0]
 800f390:	bd38      	pop	{r3, r4, r5, pc}
 800f392:	bf00      	nop
 800f394:	20000918 	.word	0x20000918

0800f398 <_getpid_r>:
 800f398:	f7f5 ba70 	b.w	800487c <_getpid>

0800f39c <_malloc_usable_size_r>:
 800f39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3a0:	1f18      	subs	r0, r3, #4
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	bfbc      	itt	lt
 800f3a6:	580b      	ldrlt	r3, [r1, r0]
 800f3a8:	18c0      	addlt	r0, r0, r3
 800f3aa:	4770      	bx	lr

0800f3ac <powf>:
 800f3ac:	b508      	push	{r3, lr}
 800f3ae:	ed2d 8b04 	vpush	{d8-d9}
 800f3b2:	eeb0 8a60 	vmov.f32	s16, s1
 800f3b6:	eeb0 9a40 	vmov.f32	s18, s0
 800f3ba:	f000 f859 	bl	800f470 <__ieee754_powf>
 800f3be:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c6:	eef0 8a40 	vmov.f32	s17, s0
 800f3ca:	d63e      	bvs.n	800f44a <powf+0x9e>
 800f3cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d4:	d112      	bne.n	800f3fc <powf+0x50>
 800f3d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3de:	d039      	beq.n	800f454 <powf+0xa8>
 800f3e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f3e4:	f000 f839 	bl	800f45a <finitef>
 800f3e8:	b378      	cbz	r0, 800f44a <powf+0x9e>
 800f3ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f2:	d52a      	bpl.n	800f44a <powf+0x9e>
 800f3f4:	f7fc f8e6 	bl	800b5c4 <__errno>
 800f3f8:	2322      	movs	r3, #34	@ 0x22
 800f3fa:	e014      	b.n	800f426 <powf+0x7a>
 800f3fc:	f000 f82d 	bl	800f45a <finitef>
 800f400:	b998      	cbnz	r0, 800f42a <powf+0x7e>
 800f402:	eeb0 0a49 	vmov.f32	s0, s18
 800f406:	f000 f828 	bl	800f45a <finitef>
 800f40a:	b170      	cbz	r0, 800f42a <powf+0x7e>
 800f40c:	eeb0 0a48 	vmov.f32	s0, s16
 800f410:	f000 f823 	bl	800f45a <finitef>
 800f414:	b148      	cbz	r0, 800f42a <powf+0x7e>
 800f416:	eef4 8a68 	vcmp.f32	s17, s17
 800f41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41e:	d7e9      	bvc.n	800f3f4 <powf+0x48>
 800f420:	f7fc f8d0 	bl	800b5c4 <__errno>
 800f424:	2321      	movs	r3, #33	@ 0x21
 800f426:	6003      	str	r3, [r0, #0]
 800f428:	e00f      	b.n	800f44a <powf+0x9e>
 800f42a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f432:	d10a      	bne.n	800f44a <powf+0x9e>
 800f434:	eeb0 0a49 	vmov.f32	s0, s18
 800f438:	f000 f80f 	bl	800f45a <finitef>
 800f43c:	b128      	cbz	r0, 800f44a <powf+0x9e>
 800f43e:	eeb0 0a48 	vmov.f32	s0, s16
 800f442:	f000 f80a 	bl	800f45a <finitef>
 800f446:	2800      	cmp	r0, #0
 800f448:	d1d4      	bne.n	800f3f4 <powf+0x48>
 800f44a:	eeb0 0a68 	vmov.f32	s0, s17
 800f44e:	ecbd 8b04 	vpop	{d8-d9}
 800f452:	bd08      	pop	{r3, pc}
 800f454:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f458:	e7f7      	b.n	800f44a <powf+0x9e>

0800f45a <finitef>:
 800f45a:	ee10 3a10 	vmov	r3, s0
 800f45e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f462:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f466:	bfac      	ite	ge
 800f468:	2000      	movge	r0, #0
 800f46a:	2001      	movlt	r0, #1
 800f46c:	4770      	bx	lr
	...

0800f470 <__ieee754_powf>:
 800f470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f474:	ee10 4a90 	vmov	r4, s1
 800f478:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f47c:	ed2d 8b02 	vpush	{d8}
 800f480:	ee10 6a10 	vmov	r6, s0
 800f484:	eeb0 8a40 	vmov.f32	s16, s0
 800f488:	eef0 8a60 	vmov.f32	s17, s1
 800f48c:	d10c      	bne.n	800f4a8 <__ieee754_powf+0x38>
 800f48e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f492:	0076      	lsls	r6, r6, #1
 800f494:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f498:	f240 829c 	bls.w	800f9d4 <__ieee754_powf+0x564>
 800f49c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f4a0:	ecbd 8b02 	vpop	{d8}
 800f4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4a8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f4ac:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f4b0:	d802      	bhi.n	800f4b8 <__ieee754_powf+0x48>
 800f4b2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f4b6:	d908      	bls.n	800f4ca <__ieee754_powf+0x5a>
 800f4b8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f4bc:	d1ee      	bne.n	800f49c <__ieee754_powf+0x2c>
 800f4be:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f4c2:	0064      	lsls	r4, r4, #1
 800f4c4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f4c8:	e7e6      	b.n	800f498 <__ieee754_powf+0x28>
 800f4ca:	2e00      	cmp	r6, #0
 800f4cc:	da1e      	bge.n	800f50c <__ieee754_powf+0x9c>
 800f4ce:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f4d2:	d22b      	bcs.n	800f52c <__ieee754_powf+0xbc>
 800f4d4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f4d8:	d332      	bcc.n	800f540 <__ieee754_powf+0xd0>
 800f4da:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f4de:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f4e2:	fa49 f503 	asr.w	r5, r9, r3
 800f4e6:	fa05 f303 	lsl.w	r3, r5, r3
 800f4ea:	454b      	cmp	r3, r9
 800f4ec:	d126      	bne.n	800f53c <__ieee754_powf+0xcc>
 800f4ee:	f005 0501 	and.w	r5, r5, #1
 800f4f2:	f1c5 0502 	rsb	r5, r5, #2
 800f4f6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f4fa:	d122      	bne.n	800f542 <__ieee754_powf+0xd2>
 800f4fc:	2c00      	cmp	r4, #0
 800f4fe:	f280 826f 	bge.w	800f9e0 <__ieee754_powf+0x570>
 800f502:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f506:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f50a:	e7c9      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f50c:	2500      	movs	r5, #0
 800f50e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f512:	d1f0      	bne.n	800f4f6 <__ieee754_powf+0x86>
 800f514:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f518:	f000 825c 	beq.w	800f9d4 <__ieee754_powf+0x564>
 800f51c:	d908      	bls.n	800f530 <__ieee754_powf+0xc0>
 800f51e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800f880 <__ieee754_powf+0x410>
 800f522:	2c00      	cmp	r4, #0
 800f524:	bfa8      	it	ge
 800f526:	eeb0 0a68 	vmovge.f32	s0, s17
 800f52a:	e7b9      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f52c:	2502      	movs	r5, #2
 800f52e:	e7ee      	b.n	800f50e <__ieee754_powf+0x9e>
 800f530:	2c00      	cmp	r4, #0
 800f532:	f280 8252 	bge.w	800f9da <__ieee754_powf+0x56a>
 800f536:	eeb1 0a68 	vneg.f32	s0, s17
 800f53a:	e7b1      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f53c:	2500      	movs	r5, #0
 800f53e:	e7da      	b.n	800f4f6 <__ieee754_powf+0x86>
 800f540:	2500      	movs	r5, #0
 800f542:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f546:	d102      	bne.n	800f54e <__ieee754_powf+0xde>
 800f548:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f54c:	e7a8      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f54e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f552:	d109      	bne.n	800f568 <__ieee754_powf+0xf8>
 800f554:	2e00      	cmp	r6, #0
 800f556:	db07      	blt.n	800f568 <__ieee754_powf+0xf8>
 800f558:	eeb0 0a48 	vmov.f32	s0, s16
 800f55c:	ecbd 8b02 	vpop	{d8}
 800f560:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f564:	f000 bae8 	b.w	800fb38 <__ieee754_sqrtf>
 800f568:	eeb0 0a48 	vmov.f32	s0, s16
 800f56c:	f000 fa50 	bl	800fa10 <fabsf>
 800f570:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f574:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f578:	4647      	mov	r7, r8
 800f57a:	d002      	beq.n	800f582 <__ieee754_powf+0x112>
 800f57c:	f1b8 0f00 	cmp.w	r8, #0
 800f580:	d117      	bne.n	800f5b2 <__ieee754_powf+0x142>
 800f582:	2c00      	cmp	r4, #0
 800f584:	bfbc      	itt	lt
 800f586:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f58a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f58e:	2e00      	cmp	r6, #0
 800f590:	da86      	bge.n	800f4a0 <__ieee754_powf+0x30>
 800f592:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f596:	ea58 0805 	orrs.w	r8, r8, r5
 800f59a:	d104      	bne.n	800f5a6 <__ieee754_powf+0x136>
 800f59c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f5a0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f5a4:	e77c      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f5a6:	2d01      	cmp	r5, #1
 800f5a8:	f47f af7a 	bne.w	800f4a0 <__ieee754_powf+0x30>
 800f5ac:	eeb1 0a40 	vneg.f32	s0, s0
 800f5b0:	e776      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f5b2:	0ff0      	lsrs	r0, r6, #31
 800f5b4:	3801      	subs	r0, #1
 800f5b6:	ea55 0300 	orrs.w	r3, r5, r0
 800f5ba:	d104      	bne.n	800f5c6 <__ieee754_powf+0x156>
 800f5bc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f5c0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f5c4:	e76c      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f5c6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f5ca:	d973      	bls.n	800f6b4 <__ieee754_powf+0x244>
 800f5cc:	4bad      	ldr	r3, [pc, #692]	@ (800f884 <__ieee754_powf+0x414>)
 800f5ce:	4598      	cmp	r8, r3
 800f5d0:	d808      	bhi.n	800f5e4 <__ieee754_powf+0x174>
 800f5d2:	2c00      	cmp	r4, #0
 800f5d4:	da0b      	bge.n	800f5ee <__ieee754_powf+0x17e>
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	ecbd 8b02 	vpop	{d8}
 800f5dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e0:	f000 baa4 	b.w	800fb2c <__math_oflowf>
 800f5e4:	4ba8      	ldr	r3, [pc, #672]	@ (800f888 <__ieee754_powf+0x418>)
 800f5e6:	4598      	cmp	r8, r3
 800f5e8:	d908      	bls.n	800f5fc <__ieee754_powf+0x18c>
 800f5ea:	2c00      	cmp	r4, #0
 800f5ec:	dcf3      	bgt.n	800f5d6 <__ieee754_powf+0x166>
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	ecbd 8b02 	vpop	{d8}
 800f5f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5f8:	f000 ba92 	b.w	800fb20 <__math_uflowf>
 800f5fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f600:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f604:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800f88c <__ieee754_powf+0x41c>
 800f608:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f60c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f610:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f614:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f618:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f61c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f620:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800f890 <__ieee754_powf+0x420>
 800f624:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f628:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800f894 <__ieee754_powf+0x424>
 800f62c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f630:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f898 <__ieee754_powf+0x428>
 800f634:	eef0 6a67 	vmov.f32	s13, s15
 800f638:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f63c:	ee16 3a90 	vmov	r3, s13
 800f640:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f644:	f023 030f 	bic.w	r3, r3, #15
 800f648:	ee06 3a90 	vmov	s13, r3
 800f64c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f650:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f654:	3d01      	subs	r5, #1
 800f656:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f65a:	4305      	orrs	r5, r0
 800f65c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f660:	f024 040f 	bic.w	r4, r4, #15
 800f664:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f668:	bf18      	it	ne
 800f66a:	eeb0 8a47 	vmovne.f32	s16, s14
 800f66e:	ee07 4a10 	vmov	s14, r4
 800f672:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f676:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f67a:	ee07 3a90 	vmov	s15, r3
 800f67e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f682:	ee07 4a10 	vmov	s14, r4
 800f686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f68a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f68e:	ee17 1a10 	vmov	r1, s14
 800f692:	2900      	cmp	r1, #0
 800f694:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f698:	f340 80dd 	ble.w	800f856 <__ieee754_powf+0x3e6>
 800f69c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f6a0:	f240 80ca 	bls.w	800f838 <__ieee754_powf+0x3c8>
 800f6a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ac:	bf4c      	ite	mi
 800f6ae:	2001      	movmi	r0, #1
 800f6b0:	2000      	movpl	r0, #0
 800f6b2:	e791      	b.n	800f5d8 <__ieee754_powf+0x168>
 800f6b4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f6b8:	bf01      	itttt	eq
 800f6ba:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f89c <__ieee754_powf+0x42c>
 800f6be:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f6c2:	f06f 0317 	mvneq.w	r3, #23
 800f6c6:	ee17 7a90 	vmoveq	r7, s15
 800f6ca:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f6ce:	bf18      	it	ne
 800f6d0:	2300      	movne	r3, #0
 800f6d2:	3a7f      	subs	r2, #127	@ 0x7f
 800f6d4:	441a      	add	r2, r3
 800f6d6:	4b72      	ldr	r3, [pc, #456]	@ (800f8a0 <__ieee754_powf+0x430>)
 800f6d8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f6dc:	429f      	cmp	r7, r3
 800f6de:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f6e2:	dd06      	ble.n	800f6f2 <__ieee754_powf+0x282>
 800f6e4:	4b6f      	ldr	r3, [pc, #444]	@ (800f8a4 <__ieee754_powf+0x434>)
 800f6e6:	429f      	cmp	r7, r3
 800f6e8:	f340 80a4 	ble.w	800f834 <__ieee754_powf+0x3c4>
 800f6ec:	3201      	adds	r2, #1
 800f6ee:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f6f2:	2600      	movs	r6, #0
 800f6f4:	4b6c      	ldr	r3, [pc, #432]	@ (800f8a8 <__ieee754_powf+0x438>)
 800f6f6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f6fa:	ee07 1a10 	vmov	s14, r1
 800f6fe:	edd3 5a00 	vldr	s11, [r3]
 800f702:	4b6a      	ldr	r3, [pc, #424]	@ (800f8ac <__ieee754_powf+0x43c>)
 800f704:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f70c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f710:	1049      	asrs	r1, r1, #1
 800f712:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f716:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f71a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f71e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f722:	ee07 1a90 	vmov	s15, r1
 800f726:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f72a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f72e:	ee15 7a10 	vmov	r7, s10
 800f732:	401f      	ands	r7, r3
 800f734:	ee06 7a90 	vmov	s13, r7
 800f738:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f73c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f740:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f744:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f748:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f8b0 <__ieee754_powf+0x440>
 800f74c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f8b4 <__ieee754_powf+0x444>
 800f750:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f754:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f8b8 <__ieee754_powf+0x448>
 800f758:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f75c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f88c <__ieee754_powf+0x41c>
 800f760:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f764:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f8bc <__ieee754_powf+0x44c>
 800f768:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f76c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f8c0 <__ieee754_powf+0x450>
 800f770:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f774:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f778:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f77c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f780:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f784:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f788:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f78c:	eef0 5a67 	vmov.f32	s11, s15
 800f790:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f794:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f798:	ee15 1a90 	vmov	r1, s11
 800f79c:	4019      	ands	r1, r3
 800f79e:	ee05 1a90 	vmov	s11, r1
 800f7a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f7a6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f7aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f7b2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f7b6:	eeb0 6a67 	vmov.f32	s12, s15
 800f7ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f7be:	ee16 1a10 	vmov	r1, s12
 800f7c2:	4019      	ands	r1, r3
 800f7c4:	ee06 1a10 	vmov	s12, r1
 800f7c8:	eeb0 7a46 	vmov.f32	s14, s12
 800f7cc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f7d0:	493c      	ldr	r1, [pc, #240]	@ (800f8c4 <__ieee754_powf+0x454>)
 800f7d2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f7d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7da:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f8c8 <__ieee754_powf+0x458>
 800f7de:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f8cc <__ieee754_powf+0x45c>
 800f7e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7e6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f8d0 <__ieee754_powf+0x460>
 800f7ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f7ee:	ed91 7a00 	vldr	s14, [r1]
 800f7f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7f6:	ee07 2a10 	vmov	s14, r2
 800f7fa:	eef0 6a67 	vmov.f32	s13, s15
 800f7fe:	4a35      	ldr	r2, [pc, #212]	@ (800f8d4 <__ieee754_powf+0x464>)
 800f800:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f804:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f808:	ed92 5a00 	vldr	s10, [r2]
 800f80c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f810:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f814:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f818:	ee16 2a90 	vmov	r2, s13
 800f81c:	4013      	ands	r3, r2
 800f81e:	ee06 3a90 	vmov	s13, r3
 800f822:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f826:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f82a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f82e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f832:	e70f      	b.n	800f654 <__ieee754_powf+0x1e4>
 800f834:	2601      	movs	r6, #1
 800f836:	e75d      	b.n	800f6f4 <__ieee754_powf+0x284>
 800f838:	d152      	bne.n	800f8e0 <__ieee754_powf+0x470>
 800f83a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f8d8 <__ieee754_powf+0x468>
 800f83e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f842:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f846:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f84e:	f73f af29 	bgt.w	800f6a4 <__ieee754_powf+0x234>
 800f852:	2386      	movs	r3, #134	@ 0x86
 800f854:	e048      	b.n	800f8e8 <__ieee754_powf+0x478>
 800f856:	4a21      	ldr	r2, [pc, #132]	@ (800f8dc <__ieee754_powf+0x46c>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d907      	bls.n	800f86c <__ieee754_powf+0x3fc>
 800f85c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f864:	bf4c      	ite	mi
 800f866:	2001      	movmi	r0, #1
 800f868:	2000      	movpl	r0, #0
 800f86a:	e6c1      	b.n	800f5f0 <__ieee754_powf+0x180>
 800f86c:	d138      	bne.n	800f8e0 <__ieee754_powf+0x470>
 800f86e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f872:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87a:	dbea      	blt.n	800f852 <__ieee754_powf+0x3e2>
 800f87c:	e7ee      	b.n	800f85c <__ieee754_powf+0x3ec>
 800f87e:	bf00      	nop
 800f880:	00000000 	.word	0x00000000
 800f884:	3f7ffff3 	.word	0x3f7ffff3
 800f888:	3f800007 	.word	0x3f800007
 800f88c:	3eaaaaab 	.word	0x3eaaaaab
 800f890:	3fb8aa3b 	.word	0x3fb8aa3b
 800f894:	36eca570 	.word	0x36eca570
 800f898:	3fb8aa00 	.word	0x3fb8aa00
 800f89c:	4b800000 	.word	0x4b800000
 800f8a0:	001cc471 	.word	0x001cc471
 800f8a4:	005db3d6 	.word	0x005db3d6
 800f8a8:	08010254 	.word	0x08010254
 800f8ac:	fffff000 	.word	0xfffff000
 800f8b0:	3e6c3255 	.word	0x3e6c3255
 800f8b4:	3e53f142 	.word	0x3e53f142
 800f8b8:	3e8ba305 	.word	0x3e8ba305
 800f8bc:	3edb6db7 	.word	0x3edb6db7
 800f8c0:	3f19999a 	.word	0x3f19999a
 800f8c4:	08010244 	.word	0x08010244
 800f8c8:	3f76384f 	.word	0x3f76384f
 800f8cc:	3f763800 	.word	0x3f763800
 800f8d0:	369dc3a0 	.word	0x369dc3a0
 800f8d4:	0801024c 	.word	0x0801024c
 800f8d8:	3338aa3c 	.word	0x3338aa3c
 800f8dc:	43160000 	.word	0x43160000
 800f8e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f8e4:	d971      	bls.n	800f9ca <__ieee754_powf+0x55a>
 800f8e6:	15db      	asrs	r3, r3, #23
 800f8e8:	3b7e      	subs	r3, #126	@ 0x7e
 800f8ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f8ee:	4118      	asrs	r0, r3
 800f8f0:	4408      	add	r0, r1
 800f8f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f8f6:	4a3c      	ldr	r2, [pc, #240]	@ (800f9e8 <__ieee754_powf+0x578>)
 800f8f8:	3b7f      	subs	r3, #127	@ 0x7f
 800f8fa:	411a      	asrs	r2, r3
 800f8fc:	4002      	ands	r2, r0
 800f8fe:	ee07 2a10 	vmov	s14, r2
 800f902:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f906:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f90a:	f1c3 0317 	rsb	r3, r3, #23
 800f90e:	4118      	asrs	r0, r3
 800f910:	2900      	cmp	r1, #0
 800f912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f916:	bfb8      	it	lt
 800f918:	4240      	neglt	r0, r0
 800f91a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f91e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800f9ec <__ieee754_powf+0x57c>
 800f922:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800f9f0 <__ieee754_powf+0x580>
 800f926:	ee17 3a10 	vmov	r3, s14
 800f92a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f92e:	f023 030f 	bic.w	r3, r3, #15
 800f932:	ee07 3a10 	vmov	s14, r3
 800f936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f93a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f93e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f942:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800f9f4 <__ieee754_powf+0x584>
 800f946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f94a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f94e:	eef0 6a67 	vmov.f32	s13, s15
 800f952:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f956:	eef0 5a66 	vmov.f32	s11, s13
 800f95a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800f95e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f962:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f966:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800f9f8 <__ieee754_powf+0x588>
 800f96a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800f9fc <__ieee754_powf+0x58c>
 800f96e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f972:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800fa00 <__ieee754_powf+0x590>
 800f976:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f97a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800fa04 <__ieee754_powf+0x594>
 800f97e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f982:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800fa08 <__ieee754_powf+0x598>
 800f986:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f98a:	eeb0 6a66 	vmov.f32	s12, s13
 800f98e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800f992:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800f996:	ee66 5a86 	vmul.f32	s11, s13, s12
 800f99a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f99e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800f9a2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800f9a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f9ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9b2:	ee10 3a10 	vmov	r3, s0
 800f9b6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f9ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f9be:	da06      	bge.n	800f9ce <__ieee754_powf+0x55e>
 800f9c0:	f000 f82e 	bl	800fa20 <scalbnf>
 800f9c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f9c8:	e56a      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	e7a5      	b.n	800f91a <__ieee754_powf+0x4aa>
 800f9ce:	ee00 3a10 	vmov	s0, r3
 800f9d2:	e7f7      	b.n	800f9c4 <__ieee754_powf+0x554>
 800f9d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f9d8:	e562      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f9da:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800fa0c <__ieee754_powf+0x59c>
 800f9de:	e55f      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f9e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f9e4:	e55c      	b.n	800f4a0 <__ieee754_powf+0x30>
 800f9e6:	bf00      	nop
 800f9e8:	ff800000 	.word	0xff800000
 800f9ec:	3f317218 	.word	0x3f317218
 800f9f0:	3f317200 	.word	0x3f317200
 800f9f4:	35bfbe8c 	.word	0x35bfbe8c
 800f9f8:	b5ddea0e 	.word	0xb5ddea0e
 800f9fc:	3331bb4c 	.word	0x3331bb4c
 800fa00:	388ab355 	.word	0x388ab355
 800fa04:	bb360b61 	.word	0xbb360b61
 800fa08:	3e2aaaab 	.word	0x3e2aaaab
 800fa0c:	00000000 	.word	0x00000000

0800fa10 <fabsf>:
 800fa10:	ee10 3a10 	vmov	r3, s0
 800fa14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa18:	ee00 3a10 	vmov	s0, r3
 800fa1c:	4770      	bx	lr
	...

0800fa20 <scalbnf>:
 800fa20:	ee10 3a10 	vmov	r3, s0
 800fa24:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fa28:	d02b      	beq.n	800fa82 <scalbnf+0x62>
 800fa2a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fa2e:	d302      	bcc.n	800fa36 <scalbnf+0x16>
 800fa30:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fa34:	4770      	bx	lr
 800fa36:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fa3a:	d123      	bne.n	800fa84 <scalbnf+0x64>
 800fa3c:	4b24      	ldr	r3, [pc, #144]	@ (800fad0 <scalbnf+0xb0>)
 800fa3e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fad4 <scalbnf+0xb4>
 800fa42:	4298      	cmp	r0, r3
 800fa44:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fa48:	db17      	blt.n	800fa7a <scalbnf+0x5a>
 800fa4a:	ee10 3a10 	vmov	r3, s0
 800fa4e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fa52:	3a19      	subs	r2, #25
 800fa54:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fa58:	4288      	cmp	r0, r1
 800fa5a:	dd15      	ble.n	800fa88 <scalbnf+0x68>
 800fa5c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fad8 <scalbnf+0xb8>
 800fa60:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fadc <scalbnf+0xbc>
 800fa64:	ee10 3a10 	vmov	r3, s0
 800fa68:	eeb0 7a67 	vmov.f32	s14, s15
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	bfb8      	it	lt
 800fa70:	eef0 7a66 	vmovlt.f32	s15, s13
 800fa74:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fa78:	4770      	bx	lr
 800fa7a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fae0 <scalbnf+0xc0>
 800fa7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fa82:	4770      	bx	lr
 800fa84:	0dd2      	lsrs	r2, r2, #23
 800fa86:	e7e5      	b.n	800fa54 <scalbnf+0x34>
 800fa88:	4410      	add	r0, r2
 800fa8a:	28fe      	cmp	r0, #254	@ 0xfe
 800fa8c:	dce6      	bgt.n	800fa5c <scalbnf+0x3c>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	dd06      	ble.n	800faa0 <scalbnf+0x80>
 800fa92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fa96:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fa9a:	ee00 3a10 	vmov	s0, r3
 800fa9e:	4770      	bx	lr
 800faa0:	f110 0f16 	cmn.w	r0, #22
 800faa4:	da09      	bge.n	800faba <scalbnf+0x9a>
 800faa6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fae0 <scalbnf+0xc0>
 800faaa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fae4 <scalbnf+0xc4>
 800faae:	ee10 3a10 	vmov	r3, s0
 800fab2:	eeb0 7a67 	vmov.f32	s14, s15
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	e7d9      	b.n	800fa6e <scalbnf+0x4e>
 800faba:	3019      	adds	r0, #25
 800fabc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fac0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fac4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fae8 <scalbnf+0xc8>
 800fac8:	ee07 3a90 	vmov	s15, r3
 800facc:	e7d7      	b.n	800fa7e <scalbnf+0x5e>
 800face:	bf00      	nop
 800fad0:	ffff3cb0 	.word	0xffff3cb0
 800fad4:	4c000000 	.word	0x4c000000
 800fad8:	7149f2ca 	.word	0x7149f2ca
 800fadc:	f149f2ca 	.word	0xf149f2ca
 800fae0:	0da24260 	.word	0x0da24260
 800fae4:	8da24260 	.word	0x8da24260
 800fae8:	33000000 	.word	0x33000000

0800faec <with_errnof>:
 800faec:	b510      	push	{r4, lr}
 800faee:	ed2d 8b02 	vpush	{d8}
 800faf2:	eeb0 8a40 	vmov.f32	s16, s0
 800faf6:	4604      	mov	r4, r0
 800faf8:	f7fb fd64 	bl	800b5c4 <__errno>
 800fafc:	eeb0 0a48 	vmov.f32	s0, s16
 800fb00:	ecbd 8b02 	vpop	{d8}
 800fb04:	6004      	str	r4, [r0, #0]
 800fb06:	bd10      	pop	{r4, pc}

0800fb08 <xflowf>:
 800fb08:	b130      	cbz	r0, 800fb18 <xflowf+0x10>
 800fb0a:	eef1 7a40 	vneg.f32	s15, s0
 800fb0e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fb12:	2022      	movs	r0, #34	@ 0x22
 800fb14:	f7ff bfea 	b.w	800faec <with_errnof>
 800fb18:	eef0 7a40 	vmov.f32	s15, s0
 800fb1c:	e7f7      	b.n	800fb0e <xflowf+0x6>
	...

0800fb20 <__math_uflowf>:
 800fb20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fb28 <__math_uflowf+0x8>
 800fb24:	f7ff bff0 	b.w	800fb08 <xflowf>
 800fb28:	10000000 	.word	0x10000000

0800fb2c <__math_oflowf>:
 800fb2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fb34 <__math_oflowf+0x8>
 800fb30:	f7ff bfea 	b.w	800fb08 <xflowf>
 800fb34:	70000000 	.word	0x70000000

0800fb38 <__ieee754_sqrtf>:
 800fb38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb3c:	4770      	bx	lr
	...

0800fb40 <_init>:
 800fb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb42:	bf00      	nop
 800fb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb46:	bc08      	pop	{r3}
 800fb48:	469e      	mov	lr, r3
 800fb4a:	4770      	bx	lr

0800fb4c <_fini>:
 800fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4e:	bf00      	nop
 800fb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb52:	bc08      	pop	{r3}
 800fb54:	469e      	mov	lr, r3
 800fb56:	4770      	bx	lr
